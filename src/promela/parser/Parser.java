/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.parser;

import src.promela.lexer.*;
import src.promela.node.*;
import src.promela.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce ANormalSpec */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce ATemplateSpec */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce ATemplate */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AUtypeModule */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AMtypeModule */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AVarschansModule */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AProctypeModule */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AInitModule */
		    {
			ArrayList list = new7();
			push(goTo(2), list, false);
		    }
		    break;
                    case 8: /* reduce ANeverModule */
		    {
			ArrayList list = new8();
			push(goTo(2), list, false);
		    }
		    break;
                    case 9: /* reduce ATraceModule */
		    {
			ArrayList list = new9();
			push(goTo(2), list, false);
		    }
		    break;
                    case 10: /* reduce AInlineModule */
		    {
			ArrayList list = new10();
			push(goTo(2), list, false);
		    }
		    break;
                    case 11: /* reduce ASemiModule */
		    {
			ArrayList list = new11();
			push(goTo(2), list, false);
		    }
		    break;
                    case 12: /* reduce AAproctype1Proctype */
		    {
			ArrayList list = new12();
			push(goTo(3), list, false);
		    }
		    break;
                    case 13: /* reduce AAproctype2Proctype */
		    {
			ArrayList list = new13();
			push(goTo(3), list, false);
		    }
		    break;
                    case 14: /* reduce AAproctype3Proctype */
		    {
			ArrayList list = new14();
			push(goTo(3), list, false);
		    }
		    break;
                    case 15: /* reduce AAproctype4Proctype */
		    {
			ArrayList list = new15();
			push(goTo(3), list, false);
		    }
		    break;
                    case 16: /* reduce AAproctype5Proctype */
		    {
			ArrayList list = new16();
			push(goTo(3), list, false);
		    }
		    break;
                    case 17: /* reduce AAproctype6Proctype */
		    {
			ArrayList list = new17();
			push(goTo(3), list, false);
		    }
		    break;
                    case 18: /* reduce AAproctype7Proctype */
		    {
			ArrayList list = new18();
			push(goTo(3), list, false);
		    }
		    break;
                    case 19: /* reduce AAproctype8Proctype */
		    {
			ArrayList list = new19();
			push(goTo(3), list, false);
		    }
		    break;
                    case 20: /* reduce AAproctype9Proctype */
		    {
			ArrayList list = new20();
			push(goTo(3), list, false);
		    }
		    break;
                    case 21: /* reduce AAproctype10Proctype */
		    {
			ArrayList list = new21();
			push(goTo(3), list, false);
		    }
		    break;
                    case 22: /* reduce AAproctype11Proctype */
		    {
			ArrayList list = new22();
			push(goTo(3), list, false);
		    }
		    break;
                    case 23: /* reduce AAproctype12Proctype */
		    {
			ArrayList list = new23();
			push(goTo(3), list, false);
		    }
		    break;
                    case 24: /* reduce AAproctype13Proctype */
		    {
			ArrayList list = new24();
			push(goTo(3), list, false);
		    }
		    break;
                    case 25: /* reduce AAproctype14Proctype */
		    {
			ArrayList list = new25();
			push(goTo(3), list, false);
		    }
		    break;
                    case 26: /* reduce AAproctype15Proctype */
		    {
			ArrayList list = new26();
			push(goTo(3), list, false);
		    }
		    break;
                    case 27: /* reduce AAproctype16Proctype */
		    {
			ArrayList list = new27();
			push(goTo(3), list, false);
		    }
		    break;
                    case 28: /* reduce AOneParamLst */
		    {
			ArrayList list = new28();
			push(goTo(4), list, false);
		    }
		    break;
                    case 29: /* reduce AManyParamLst */
		    {
			ArrayList list = new29();
			push(goTo(4), list, false);
		    }
		    break;
                    case 30: /* reduce AAinit1Init */
		    {
			ArrayList list = new30();
			push(goTo(5), list, false);
		    }
		    break;
                    case 31: /* reduce AAinit2Init */
		    {
			ArrayList list = new31();
			push(goTo(5), list, false);
		    }
		    break;
                    case 32: /* reduce ANever */
		    {
			ArrayList list = new32();
			push(goTo(6), list, false);
		    }
		    break;
                    case 33: /* reduce ATraceTrace */
		    {
			ArrayList list = new33();
			push(goTo(7), list, false);
		    }
		    break;
                    case 34: /* reduce ANotraceTrace */
		    {
			ArrayList list = new34();
			push(goTo(7), list, false);
		    }
		    break;
                    case 35: /* reduce AUtype */
		    {
			ArrayList list = new35();
			push(goTo(8), list, false);
		    }
		    break;
                    case 36: /* reduce AAmtype1Mtype */
		    {
			ArrayList list = new36();
			push(goTo(9), list, false);
		    }
		    break;
                    case 37: /* reduce AAmtype2Mtype */
		    {
			ArrayList list = new37();
			push(goTo(9), list, false);
		    }
		    break;
                    case 38: /* reduce AAinline1Inline */
		    {
			ArrayList list = new38();
			push(goTo(10), list, false);
		    }
		    break;
                    case 39: /* reduce AAinline2Inline */
		    {
			ArrayList list = new39();
			push(goTo(10), list, false);
		    }
		    break;
                    case 40: /* reduce AOneNameLst */
		    {
			ArrayList list = new40();
			push(goTo(11), list, false);
		    }
		    break;
                    case 41: /* reduce AManyNameLst */
		    {
			ArrayList list = new41();
			push(goTo(11), list, false);
		    }
		    break;
                    case 42: /* reduce AOneExprLst */
		    {
			ArrayList list = new42();
			push(goTo(12), list, false);
		    }
		    break;
                    case 43: /* reduce AManyExprLst */
		    {
			ArrayList list = new43();
			push(goTo(12), list, false);
		    }
		    break;
                    case 44: /* reduce ANullDeclLst */
		    {
			ArrayList list = new44();
			push(goTo(13), list, false);
		    }
		    break;
                    case 45: /* reduce AOneDeclLst */
		    {
			ArrayList list = new45();
			push(goTo(13), list, false);
		    }
		    break;
                    case 46: /* reduce AManyDeclLst */
		    {
			ArrayList list = new46();
			push(goTo(13), list, false);
		    }
		    break;
                    case 47: /* reduce AAonedecl1OneDecl */
		    {
			ArrayList list = new47();
			push(goTo(14), list, false);
		    }
		    break;
                    case 48: /* reduce AAonedecl2OneDecl */
		    {
			ArrayList list = new48();
			push(goTo(14), list, false);
		    }
		    break;
                    case 49: /* reduce AOneIvarLst */
		    {
			ArrayList list = new49();
			push(goTo(15), list, false);
		    }
		    break;
                    case 50: /* reduce AManyIvarLst */
		    {
			ArrayList list = new50();
			push(goTo(15), list, false);
		    }
		    break;
                    case 51: /* reduce ABitTypename */
		    {
			ArrayList list = new51();
			push(goTo(16), list, false);
		    }
		    break;
                    case 52: /* reduce ABoolTypename */
		    {
			ArrayList list = new52();
			push(goTo(16), list, false);
		    }
		    break;
                    case 53: /* reduce AByteTypename */
		    {
			ArrayList list = new53();
			push(goTo(16), list, false);
		    }
		    break;
                    case 54: /* reduce APidTypename */
		    {
			ArrayList list = new54();
			push(goTo(16), list, false);
		    }
		    break;
                    case 55: /* reduce AShortTypename */
		    {
			ArrayList list = new55();
			push(goTo(16), list, false);
		    }
		    break;
                    case 56: /* reduce AIntTypename */
		    {
			ArrayList list = new56();
			push(goTo(16), list, false);
		    }
		    break;
                    case 57: /* reduce AMtypeTypename */
		    {
			ArrayList list = new57();
			push(goTo(16), list, false);
		    }
		    break;
                    case 58: /* reduce AChanTypename */
		    {
			ArrayList list = new58();
			push(goTo(16), list, false);
		    }
		    break;
                    case 59: /* reduce AUnameTypename */
		    {
			ArrayList list = new59();
			push(goTo(16), list, false);
		    }
		    break;
                    case 60: /* reduce AOneTypenamelst */
		    {
			ArrayList list = new60();
			push(goTo(17), list, false);
		    }
		    break;
                    case 61: /* reduce AManyTypenamelst */
		    {
			ArrayList list = new61();
			push(goTo(17), list, false);
		    }
		    break;
                    case 62: /* reduce AOneActive */
		    {
			ArrayList list = new62();
			push(goTo(18), list, false);
		    }
		    break;
                    case 63: /* reduce AManyActive */
		    {
			ArrayList list = new63();
			push(goTo(18), list, false);
		    }
		    break;
                    case 64: /* reduce APriority */
		    {
			ArrayList list = new64();
			push(goTo(19), list, false);
		    }
		    break;
                    case 65: /* reduce AEnabler */
		    {
			ArrayList list = new65();
			push(goTo(20), list, false);
		    }
		    break;
                    case 66: /* reduce AHiddenVisible */
		    {
			ArrayList list = new66();
			push(goTo(21), list, false);
		    }
		    break;
                    case 67: /* reduce AShowVisible */
		    {
			ArrayList list = new67();
			push(goTo(21), list, false);
		    }
		    break;
                    case 68: /* reduce ANullSequence */
		    {
			ArrayList list = new68();
			push(goTo(22), list, false);
		    }
		    break;
                    case 69: /* reduce AOneSequence */
		    {
			ArrayList list = new69();
			push(goTo(22), list, false);
		    }
		    break;
                    case 70: /* reduce AManySequence */
		    {
			ArrayList list = new70();
			push(goTo(22), list, false);
		    }
		    break;
                    case 71: /* reduce ADeclarationStep */
		    {
			ArrayList list = new71();
			push(goTo(23), list, false);
		    }
		    break;
                    case 72: /* reduce AStmntStep */
		    {
			ArrayList list = new72();
			push(goTo(23), list, false);
		    }
		    break;
                    case 73: /* reduce AUnlessStep */
		    {
			ArrayList list = new73();
			push(goTo(23), list, false);
		    }
		    break;
                    case 74: /* reduce AExreceiveStep */
		    {
			ArrayList list = new74();
			push(goTo(23), list, false);
		    }
		    break;
                    case 75: /* reduce AExsendStep */
		    {
			ArrayList list = new75();
			push(goTo(23), list, false);
		    }
		    break;
                    case 76: /* reduce AOneVarreflst */
		    {
			ArrayList list = new76();
			push(goTo(24), list, false);
		    }
		    break;
                    case 77: /* reduce AManyVarreflst */
		    {
			ArrayList list = new77();
			push(goTo(24), list, false);
		    }
		    break;
                    case 78: /* reduce AAsingleivar1Ivar */
		    {
			ArrayList list = new78();
			push(goTo(25), list, false);
		    }
		    break;
                    case 79: /* reduce AAsingleivar2Ivar */
		    {
			ArrayList list = new79();
			push(goTo(25), list, false);
		    }
		    break;
                    case 80: /* reduce AAarrayivar1Ivar */
		    {
			ArrayList list = new80();
			push(goTo(25), list, false);
		    }
		    break;
                    case 81: /* reduce AAarrayivar2Ivar */
		    {
			ArrayList list = new81();
			push(goTo(25), list, false);
		    }
		    break;
                    case 82: /* reduce AVariableIvarassignment */
		    {
			ArrayList list = new82();
			push(goTo(26), list, false);
		    }
		    break;
                    case 83: /* reduce AChannelIvarassignment */
		    {
			ArrayList list = new83();
			push(goTo(26), list, false);
		    }
		    break;
                    case 84: /* reduce AAsinglevarref1Varref */
		    {
			ArrayList list = new84();
			push(goTo(27), list, false);
		    }
		    break;
                    case 85: /* reduce AAsinglevarref2Varref */
		    {
			ArrayList list = new85();
			push(goTo(27), list, false);
		    }
		    break;
                    case 86: /* reduce AArecordvarref1Varref */
		    {
			ArrayList list = new86();
			push(goTo(27), list, false);
		    }
		    break;
                    case 87: /* reduce AArecordvarref2Varref */
		    {
			ArrayList list = new87();
			push(goTo(27), list, false);
		    }
		    break;
                    case 88: /* reduce AArrayref */
		    {
			ArrayList list = new88();
			push(goTo(28), list, false);
		    }
		    break;
                    case 89: /* reduce ARecordref */
		    {
			ArrayList list = new89();
			push(goTo(29), list, false);
		    }
		    break;
                    case 90: /* reduce AFifoSend */
		    {
			ArrayList list = new90();
			push(goTo(30), list, false);
		    }
		    break;
                    case 91: /* reduce ASortedSend */
		    {
			ArrayList list = new91();
			push(goTo(30), list, false);
		    }
		    break;
                    case 92: /* reduce AFifoReceive */
		    {
			ArrayList list = new92();
			push(goTo(31), list, false);
		    }
		    break;
                    case 93: /* reduce ARandomReceive */
		    {
			ArrayList list = new93();
			push(goTo(31), list, false);
		    }
		    break;
                    case 94: /* reduce AFifopollReceive */
		    {
			ArrayList list = new94();
			push(goTo(31), list, false);
		    }
		    break;
                    case 95: /* reduce ARandompollReceive */
		    {
			ArrayList list = new95();
			push(goTo(31), list, false);
		    }
		    break;
                    case 96: /* reduce AFifoRecvPoll */
		    {
			ArrayList list = new96();
			push(goTo(32), list, false);
		    }
		    break;
                    case 97: /* reduce ARandomRecvPoll */
		    {
			ArrayList list = new97();
			push(goTo(32), list, false);
		    }
		    break;
                    case 98: /* reduce AListSendArgs */
		    {
			ArrayList list = new98();
			push(goTo(33), list, false);
		    }
		    break;
                    case 99: /* reduce AHeadedlistSendArgs */
		    {
			ArrayList list = new99();
			push(goTo(33), list, false);
		    }
		    break;
                    case 100: /* reduce AOneArgLst */
		    {
			ArrayList list = new100();
			push(goTo(34), list, false);
		    }
		    break;
                    case 101: /* reduce AManyArgLst */
		    {
			ArrayList list = new101();
			push(goTo(34), list, false);
		    }
		    break;
                    case 102: /* reduce AOneRecvArgs */
		    {
			ArrayList list = new102();
			push(goTo(35), list, false);
		    }
		    break;
                    case 103: /* reduce AManyRecvArgs */
		    {
			ArrayList list = new103();
			push(goTo(35), list, false);
		    }
		    break;
                    case 104: /* reduce AManyheadedRecvArgs */
		    {
			ArrayList list = new104();
			push(goTo(35), list, false);
		    }
		    break;
                    case 105: /* reduce AVarRecvArg */
		    {
			ArrayList list = new105();
			push(goTo(36), list, false);
		    }
		    break;
                    case 106: /* reduce AEvalRecvArg */
		    {
			ArrayList list = new106();
			push(goTo(36), list, false);
		    }
		    break;
                    case 107: /* reduce AConstRecvArg */
		    {
			ArrayList list = new107();
			push(goTo(36), list, false);
		    }
		    break;
                    case 108: /* reduce AAssignmentAssignment */
		    {
			ArrayList list = new108();
			push(goTo(37), list, false);
		    }
		    break;
                    case 109: /* reduce AIncrementAssignment */
		    {
			ArrayList list = new109();
			push(goTo(37), list, false);
		    }
		    break;
                    case 110: /* reduce ADecrementAssignment */
		    {
			ArrayList list = new110();
			push(goTo(37), list, false);
		    }
		    break;
                    case 111: /* reduce AIfStmnt */
		    {
			ArrayList list = new111();
			push(goTo(38), list, false);
		    }
		    break;
                    case 112: /* reduce ADoStmnt */
		    {
			ArrayList list = new112();
			push(goTo(38), list, false);
		    }
		    break;
                    case 113: /* reduce AAtomicStmnt */
		    {
			ArrayList list = new113();
			push(goTo(38), list, false);
		    }
		    break;
                    case 114: /* reduce ADstepStmnt */
		    {
			ArrayList list = new114();
			push(goTo(38), list, false);
		    }
		    break;
                    case 115: /* reduce ABracesStmnt */
		    {
			ArrayList list = new115();
			push(goTo(38), list, false);
		    }
		    break;
                    case 116: /* reduce ASendStmnt */
		    {
			ArrayList list = new116();
			push(goTo(38), list, false);
		    }
		    break;
                    case 117: /* reduce AReceiveStmnt */
		    {
			ArrayList list = new117();
			push(goTo(38), list, false);
		    }
		    break;
                    case 118: /* reduce AAssignStmnt */
		    {
			ArrayList list = new118();
			push(goTo(38), list, false);
		    }
		    break;
                    case 119: /* reduce AElseStmnt */
		    {
			ArrayList list = new119();
			push(goTo(38), list, false);
		    }
		    break;
                    case 120: /* reduce ABreakStmnt */
		    {
			ArrayList list = new120();
			push(goTo(38), list, false);
		    }
		    break;
                    case 121: /* reduce AGotoStmnt */
		    {
			ArrayList list = new121();
			push(goTo(38), list, false);
		    }
		    break;
                    case 122: /* reduce ALabelStmnt */
		    {
			ArrayList list = new122();
			push(goTo(38), list, false);
		    }
		    break;
                    case 123: /* reduce APrintStmnt */
		    {
			ArrayList list = new123();
			push(goTo(38), list, false);
		    }
		    break;
                    case 124: /* reduce APrintwithargsStmnt */
		    {
			ArrayList list = new124();
			push(goTo(38), list, false);
		    }
		    break;
                    case 125: /* reduce AAssertStmnt */
		    {
			ArrayList list = new125();
			push(goTo(38), list, false);
		    }
		    break;
                    case 126: /* reduce AExpressionStmnt */
		    {
			ArrayList list = new126();
			push(goTo(38), list, false);
		    }
		    break;
                    case 127: /* reduce AAinlinestmnt1Stmnt */
		    {
			ArrayList list = new127();
			push(goTo(38), list, false);
		    }
		    break;
                    case 128: /* reduce AAinlinestmnt2Stmnt */
		    {
			ArrayList list = new128();
			push(goTo(38), list, false);
		    }
		    break;
                    case 129: /* reduce AAnormaloptions1Options */
		    {
			ArrayList list = new129();
			push(goTo(39), list, false);
		    }
		    break;
                    case 130: /* reduce AAnormaloptions2Options */
		    {
			ArrayList list = new130();
			push(goTo(39), list, false);
		    }
		    break;
                    case 131: /* reduce AAtemplateoptions1Options */
		    {
			ArrayList list = new131();
			push(goTo(39), list, false);
		    }
		    break;
                    case 132: /* reduce AAtemplateoptions2Options */
		    {
			ArrayList list = new132();
			push(goTo(39), list, false);
		    }
		    break;
                    case 133: /* reduce AParentheseFactor */
		    {
			ArrayList list = new133();
			push(goTo(40), list, false);
		    }
		    break;
                    case 134: /* reduce ALengthFactor */
		    {
			ArrayList list = new134();
			push(goTo(40), list, false);
		    }
		    break;
                    case 135: /* reduce ARecvPollFactor */
		    {
			ArrayList list = new135();
			push(goTo(40), list, false);
		    }
		    break;
                    case 136: /* reduce AVarrefFactor */
		    {
			ArrayList list = new136();
			push(goTo(40), list, false);
		    }
		    break;
                    case 137: /* reduce AConstFactor */
		    {
			ArrayList list = new137();
			push(goTo(40), list, false);
		    }
		    break;
                    case 138: /* reduce ATimeoutFactor */
		    {
			ArrayList list = new138();
			push(goTo(40), list, false);
		    }
		    break;
                    case 139: /* reduce ANonprogressFactor */
		    {
			ArrayList list = new139();
			push(goTo(40), list, false);
		    }
		    break;
                    case 140: /* reduce AEnabledFactor */
		    {
			ArrayList list = new140();
			push(goTo(40), list, false);
		    }
		    break;
                    case 141: /* reduce APcValueFactor */
		    {
			ArrayList list = new141();
			push(goTo(40), list, false);
		    }
		    break;
                    case 142: /* reduce ARemoterefFactor */
		    {
			ArrayList list = new142();
			push(goTo(40), list, false);
		    }
		    break;
                    case 143: /* reduce AArunfactor1Factor */
		    {
			ArrayList list = new143();
			push(goTo(40), list, false);
		    }
		    break;
                    case 144: /* reduce AArunfactor2Factor */
		    {
			ArrayList list = new144();
			push(goTo(40), list, false);
		    }
		    break;
                    case 145: /* reduce AArunfactor3Factor */
		    {
			ArrayList list = new145();
			push(goTo(40), list, false);
		    }
		    break;
                    case 146: /* reduce AArunfactor4Factor */
		    {
			ArrayList list = new146();
			push(goTo(40), list, false);
		    }
		    break;
                    case 147: /* reduce AChanopFactor */
		    {
			ArrayList list = new147();
			push(goTo(40), list, false);
		    }
		    break;
                    case 148: /* reduce ASimpleUnExpr */
		    {
			ArrayList list = new148();
			push(goTo(41), list, false);
		    }
		    break;
                    case 149: /* reduce ANotUnExpr */
		    {
			ArrayList list = new149();
			push(goTo(41), list, false);
		    }
		    break;
                    case 150: /* reduce AComplementUnExpr */
		    {
			ArrayList list = new150();
			push(goTo(41), list, false);
		    }
		    break;
                    case 151: /* reduce ASimpleMultExpr */
		    {
			ArrayList list = new151();
			push(goTo(42), list, false);
		    }
		    break;
                    case 152: /* reduce ACompoundMultExpr */
		    {
			ArrayList list = new152();
			push(goTo(42), list, false);
		    }
		    break;
                    case 153: /* reduce ASimpleAddExpr */
		    {
			ArrayList list = new153();
			push(goTo(43), list, false);
		    }
		    break;
                    case 154: /* reduce ACompoundplusAddExpr */
		    {
			ArrayList list = new154();
			push(goTo(43), list, false);
		    }
		    break;
                    case 155: /* reduce ACompoundminusAddExpr */
		    {
			ArrayList list = new155();
			push(goTo(43), list, false);
		    }
		    break;
                    case 156: /* reduce ASimpleShiftExpr */
		    {
			ArrayList list = new156();
			push(goTo(44), list, false);
		    }
		    break;
                    case 157: /* reduce ACompoundShiftExpr */
		    {
			ArrayList list = new157();
			push(goTo(44), list, false);
		    }
		    break;
                    case 158: /* reduce ASimpleRelExpr */
		    {
			ArrayList list = new158();
			push(goTo(45), list, false);
		    }
		    break;
                    case 159: /* reduce ACompoundrelopRelExpr */
		    {
			ArrayList list = new159();
			push(goTo(45), list, false);
		    }
		    break;
                    case 160: /* reduce ACompoundgtRelExpr */
		    {
			ArrayList list = new160();
			push(goTo(45), list, false);
		    }
		    break;
                    case 161: /* reduce ACompoundltRelExpr */
		    {
			ArrayList list = new161();
			push(goTo(45), list, false);
		    }
		    break;
                    case 162: /* reduce ASimpleEqExpr */
		    {
			ArrayList list = new162();
			push(goTo(46), list, false);
		    }
		    break;
                    case 163: /* reduce ACompoundEqExpr */
		    {
			ArrayList list = new163();
			push(goTo(46), list, false);
		    }
		    break;
                    case 164: /* reduce ASimpleBitandExpr */
		    {
			ArrayList list = new164();
			push(goTo(47), list, false);
		    }
		    break;
                    case 165: /* reduce ACompoundBitandExpr */
		    {
			ArrayList list = new165();
			push(goTo(47), list, false);
		    }
		    break;
                    case 166: /* reduce ASimpleBitxorExpr */
		    {
			ArrayList list = new166();
			push(goTo(48), list, false);
		    }
		    break;
                    case 167: /* reduce ACompoundBitxorExpr */
		    {
			ArrayList list = new167();
			push(goTo(48), list, false);
		    }
		    break;
                    case 168: /* reduce ASimpleBitorExpr */
		    {
			ArrayList list = new168();
			push(goTo(49), list, false);
		    }
		    break;
                    case 169: /* reduce ACompoundBitorExpr */
		    {
			ArrayList list = new169();
			push(goTo(49), list, false);
		    }
		    break;
                    case 170: /* reduce ASimpleAndExpr */
		    {
			ArrayList list = new170();
			push(goTo(50), list, false);
		    }
		    break;
                    case 171: /* reduce ACompoundAndExpr */
		    {
			ArrayList list = new171();
			push(goTo(50), list, false);
		    }
		    break;
                    case 172: /* reduce ASimpleOrExpr */
		    {
			ArrayList list = new172();
			push(goTo(51), list, false);
		    }
		    break;
                    case 173: /* reduce ACompoundOrExpr */
		    {
			ArrayList list = new173();
			push(goTo(51), list, false);
		    }
		    break;
                    case 174: /* reduce ASimpleExpr */
		    {
			ArrayList list = new174();
			push(goTo(52), list, false);
		    }
		    break;
                    case 175: /* reduce AConditionalExpr */
		    {
			ArrayList list = new175();
			push(goTo(52), list, false);
		    }
		    break;
                    case 176: /* reduce ATrueConst */
		    {
			ArrayList list = new176();
			push(goTo(53), list, false);
		    }
		    break;
                    case 177: /* reduce AFalseConst */
		    {
			ArrayList list = new177();
			push(goTo(53), list, false);
		    }
		    break;
                    case 178: /* reduce ASkipConst */
		    {
			ArrayList list = new178();
			push(goTo(53), list, false);
		    }
		    break;
                    case 179: /* reduce AAnumberconst1Const */
		    {
			ArrayList list = new179();
			push(goTo(53), list, false);
		    }
		    break;
                    case 180: /* reduce AAnumberconst2Const */
		    {
			ArrayList list = new180();
			push(goTo(53), list, false);
		    }
		    break;
                    case 181: /* reduce APidConst */
		    {
			ArrayList list = new181();
			push(goTo(53), list, false);
		    }
		    break;
                    case 182: /* reduce AUnderscoreConst */
		    {
			ArrayList list = new182();
			push(goTo(53), list, false);
		    }
		    break;
                    case 183: /* reduce ATerminal$Module */
		    {
			ArrayList list = new183();
			push(goTo(54), list, true);
		    }
		    break;
                    case 184: /* reduce ANonTerminal$Module */
		    {
			ArrayList list = new184();
			push(goTo(54), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PSpec node1 = (PSpec) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce ANormalSpec */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSpec pspecNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pspecNode1 = new ANormalSpec(listNode3);
        }
	nodeList.add(pspecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce ATemplateSpec */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSpec pspecNode1;
        {
            // Block
        PTemplate ptemplateNode2;
        ptemplateNode2 = (PTemplate)nodeArrayList1.get(0);

        pspecNode1 = new ATemplateSpec(ptemplateNode2);
        }
	nodeList.add(pspecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ATemplate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTemplate ptemplateNode1;
        {
            // Block
        TName tnameNode2;
        TTemplatetok ttemplatetokNode3;
        TColon tcolonNode4;
        PSequence psequenceNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        ttemplatetokNode3 = (TTemplatetok)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        psequenceNode5 = (PSequence)nodeArrayList4.get(0);

        ptemplateNode1 = new ATemplate(tnameNode2, ttemplatetokNode3, tcolonNode4, psequenceNode5);
        }
	nodeList.add(ptemplateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AUtypeModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PUtype putypeNode2;
        putypeNode2 = (PUtype)nodeArrayList1.get(0);

        pmoduleNode1 = new AUtypeModule(putypeNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AMtypeModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PMtype pmtypeNode2;
        pmtypeNode2 = (PMtype)nodeArrayList1.get(0);

        pmoduleNode1 = new AMtypeModule(pmtypeNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AVarschansModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        POneDecl ponedeclNode2;
        ponedeclNode2 = (POneDecl)nodeArrayList1.get(0);

        pmoduleNode1 = new AVarschansModule(ponedeclNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AProctypeModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PProctype pproctypeNode2;
        pproctypeNode2 = (PProctype)nodeArrayList1.get(0);

        pmoduleNode1 = new AProctypeModule(pproctypeNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AInitModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PInit pinitNode2;
        pinitNode2 = (PInit)nodeArrayList1.get(0);

        pmoduleNode1 = new AInitModule(pinitNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ANeverModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PNever pneverNode2;
        pneverNode2 = (PNever)nodeArrayList1.get(0);

        pmoduleNode1 = new ANeverModule(pneverNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ATraceModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PTrace ptraceNode2;
        ptraceNode2 = (PTrace)nodeArrayList1.get(0);

        pmoduleNode1 = new ATraceModule(ptraceNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AInlineModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PInline pinlineNode2;
        pinlineNode2 = (PInline)nodeArrayList1.get(0);

        pmoduleNode1 = new AInlineModule(pinlineNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ASemiModule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        TSeparator tseparatorNode2;
        tseparatorNode2 = (TSeparator)nodeArrayList1.get(0);

        pmoduleNode1 = new ASemiModule(tseparatorNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAproctype1Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList4.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList5.get(0);
        psequenceNode11 = (PSequence)nodeArrayList6.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList7.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, null, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAproctype2Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList6.get(0);
        psequenceNode11 = (PSequence)nodeArrayList7.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList8.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, null, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAproctype3Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList6.get(0);
        psequenceNode11 = (PSequence)nodeArrayList7.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList8.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, null, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAproctype4Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList7.get(0);
        psequenceNode11 = (PSequence)nodeArrayList8.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList9.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, null, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAproctype5Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList4.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList5.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList6.get(0);
        psequenceNode11 = (PSequence)nodeArrayList7.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList8.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, ppriorityNode8, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAproctype6Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList6.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList7.get(0);
        psequenceNode11 = (PSequence)nodeArrayList8.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList9.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, ppriorityNode8, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAproctype7Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList6.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList7.get(0);
        psequenceNode11 = (PSequence)nodeArrayList8.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList9.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, ppriorityNode8, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAproctype8Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList7.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList8.get(0);
        psequenceNode11 = (PSequence)nodeArrayList9.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList10.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, ppriorityNode8, null, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAproctype9Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList4.get(0);
        penablerNode9 = (PEnabler)nodeArrayList5.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList6.get(0);
        psequenceNode11 = (PSequence)nodeArrayList7.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList8.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, null, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAproctype10Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        penablerNode9 = (PEnabler)nodeArrayList6.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList7.get(0);
        psequenceNode11 = (PSequence)nodeArrayList8.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList9.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, null, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAproctype11Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        penablerNode9 = (PEnabler)nodeArrayList6.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList7.get(0);
        psequenceNode11 = (PSequence)nodeArrayList8.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList9.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, null, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAproctype12Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        penablerNode9 = (PEnabler)nodeArrayList7.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList8.get(0);
        psequenceNode11 = (PSequence)nodeArrayList9.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList10.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, null, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAproctype13Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList4.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList5.get(0);
        penablerNode9 = (PEnabler)nodeArrayList6.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList7.get(0);
        psequenceNode11 = (PSequence)nodeArrayList8.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList9.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, ppriorityNode8, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAproctype14Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList6.get(0);
        penablerNode9 = (PEnabler)nodeArrayList7.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList8.get(0);
        psequenceNode11 = (PSequence)nodeArrayList9.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList10.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, null, trparentheseNode7, ppriorityNode8, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAproctype15Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        tproctypetokNode3 = (TProctypetok)nodeArrayList1.get(0);
        tnameNode4 = (TName)nodeArrayList2.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList3.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList4.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList5.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList6.get(0);
        penablerNode9 = (PEnabler)nodeArrayList7.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList8.get(0);
        psequenceNode11 = (PSequence)nodeArrayList9.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList10.get(0);

        pproctypeNode1 = new AProctype(null, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, ppriorityNode8, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAproctype16Proctype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProctype pproctypeNode1;
        {
            // Block
        PActive pactiveNode2;
        TProctypetok tproctypetokNode3;
        TName tnameNode4;
        TLParenthese tlparentheseNode5;
        PParamLst pparamlstNode6;
        TRParenthese trparentheseNode7;
        PPriority ppriorityNode8;
        PEnabler penablerNode9;
        TLBrace tlbraceNode10;
        PSequence psequenceNode11;
        TRBrace trbraceNode12;
        pactiveNode2 = (PActive)nodeArrayList1.get(0);
        tproctypetokNode3 = (TProctypetok)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparentheseNode5 = (TLParenthese)nodeArrayList4.get(0);
        pparamlstNode6 = (PParamLst)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);
        ppriorityNode8 = (PPriority)nodeArrayList7.get(0);
        penablerNode9 = (PEnabler)nodeArrayList8.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList9.get(0);
        psequenceNode11 = (PSequence)nodeArrayList10.get(0);
        trbraceNode12 = (TRBrace)nodeArrayList11.get(0);

        pproctypeNode1 = new AProctype(pactiveNode2, tproctypetokNode3, tnameNode4, tlparentheseNode5, pparamlstNode6, trparentheseNode7, ppriorityNode8, penablerNode9, tlbraceNode10, psequenceNode11, trbraceNode12);
        }
	nodeList.add(pproctypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AOneParamLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamLst pparamlstNode1;
        {
            // Block
        POneDecl ponedeclNode2;
        ponedeclNode2 = (POneDecl)nodeArrayList1.get(0);

        pparamlstNode1 = new AOneParamLst(ponedeclNode2);
        }
	nodeList.add(pparamlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AManyParamLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamLst pparamlstNode1;
        {
            // Block
        POneDecl ponedeclNode2;
        TSeparator tseparatorNode3;
        PParamLst pparamlstNode4;
        ponedeclNode2 = (POneDecl)nodeArrayList1.get(0);
        tseparatorNode3 = (TSeparator)nodeArrayList2.get(0);
        pparamlstNode4 = (PParamLst)nodeArrayList3.get(0);

        pparamlstNode1 = new AManyParamLst(ponedeclNode2, tseparatorNode3, pparamlstNode4);
        }
	nodeList.add(pparamlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAinit1Init */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInit pinitNode1;
        {
            // Block
        TInittok tinittokNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TLBrace tlbraceNode4;
        PSequence psequenceNode5;
        TRBrace trbraceNode6;
        tinittokNode2 = (TInittok)nodeArrayList1.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList2.get(0);
        psequenceNode5 = (PSequence)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pinitNode1 = new AInit(tinittokNode2, null, tlbraceNode4, psequenceNode5, trbraceNode6);
        }
	nodeList.add(pinitNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAinit2Init */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInit pinitNode1;
        {
            // Block
        TInittok tinittokNode2;
        PPriority ppriorityNode3;
        TLBrace tlbraceNode4;
        PSequence psequenceNode5;
        TRBrace trbraceNode6;
        tinittokNode2 = (TInittok)nodeArrayList1.get(0);
        ppriorityNode3 = (PPriority)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        psequenceNode5 = (PSequence)nodeArrayList4.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList5.get(0);

        pinitNode1 = new AInit(tinittokNode2, ppriorityNode3, tlbraceNode4, psequenceNode5, trbraceNode6);
        }
	nodeList.add(pinitNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ANever */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNever pneverNode1;
        {
            // Block
        TNevertok tnevertokNode2;
        TLBrace tlbraceNode3;
        PSequence psequenceNode4;
        TRBrace trbraceNode5;
        tnevertokNode2 = (TNevertok)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        psequenceNode4 = (PSequence)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pneverNode1 = new ANever(tnevertokNode2, tlbraceNode3, psequenceNode4, trbraceNode5);
        }
	nodeList.add(pneverNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ATraceTrace */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTrace ptraceNode1;
        {
            // Block
        TTracetok ttracetokNode2;
        TLBrace tlbraceNode3;
        PSequence psequenceNode4;
        TRBrace trbraceNode5;
        ttracetokNode2 = (TTracetok)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        psequenceNode4 = (PSequence)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        ptraceNode1 = new ATraceTrace(ttracetokNode2, tlbraceNode3, psequenceNode4, trbraceNode5);
        }
	nodeList.add(ptraceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANotraceTrace */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTrace ptraceNode1;
        {
            // Block
        TNotrace tnotraceNode2;
        TLBrace tlbraceNode3;
        PSequence psequenceNode4;
        TRBrace trbraceNode5;
        tnotraceNode2 = (TNotrace)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        psequenceNode4 = (PSequence)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        ptraceNode1 = new ANotraceTrace(tnotraceNode2, tlbraceNode3, psequenceNode4, trbraceNode5);
        }
	nodeList.add(ptraceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AUtype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUtype putypeNode1;
        {
            // Block
        TTypedef ttypedefNode2;
        TName tnameNode3;
        TLBrace tlbraceNode4;
        PDeclLst pdecllstNode5;
        TRBrace trbraceNode6;
        ttypedefNode2 = (TTypedef)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        pdecllstNode5 = (PDeclLst)nodeArrayList4.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList5.get(0);

        putypeNode1 = new AUtype(ttypedefNode2, tnameNode3, tlbraceNode4, pdecllstNode5, trbraceNode6);
        }
	nodeList.add(putypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAmtype1Mtype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMtype pmtypeNode1;
        {
            // Block
        TMtypetok tmtypetokNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TLBrace tlbraceNode4;
        PNameLst pnamelstNode5;
        TRBrace trbraceNode6;
        tmtypetokNode2 = (TMtypetok)nodeArrayList1.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList2.get(0);
        pnamelstNode5 = (PNameLst)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pmtypeNode1 = new AMtype(tmtypetokNode2, null, tlbraceNode4, pnamelstNode5, trbraceNode6);
        }
	nodeList.add(pmtypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAmtype2Mtype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMtype pmtypeNode1;
        {
            // Block
        TMtypetok tmtypetokNode2;
        TAssign tassignNode3;
        TLBrace tlbraceNode4;
        PNameLst pnamelstNode5;
        TRBrace trbraceNode6;
        tmtypetokNode2 = (TMtypetok)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        pnamelstNode5 = (PNameLst)nodeArrayList4.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList5.get(0);

        pmtypeNode1 = new AMtype(tmtypetokNode2, tassignNode3, tlbraceNode4, pnamelstNode5, trbraceNode6);
        }
	nodeList.add(pmtypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAinline1Inline */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TInlinetok tinlinetokNode2;
        TName tnameNode3;
        TLParenthese tlparentheseNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRParenthese trparentheseNode6;
        TLBrace tlbraceNode7;
        PSequence psequenceNode8;
        TRBrace trbraceNode9;
        tinlinetokNode2 = (TInlinetok)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparentheseNode4 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode6 = (TRParenthese)nodeArrayList4.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList5.get(0);
        psequenceNode8 = (PSequence)nodeArrayList6.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList7.get(0);

        pinlineNode1 = new AInline(tinlinetokNode2, tnameNode3, tlparentheseNode4, null, trparentheseNode6, tlbraceNode7, psequenceNode8, trbraceNode9);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAinline2Inline */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TInlinetok tinlinetokNode2;
        TName tnameNode3;
        TLParenthese tlparentheseNode4;
        PNameLst pnamelstNode5;
        TRParenthese trparentheseNode6;
        TLBrace tlbraceNode7;
        PSequence psequenceNode8;
        TRBrace trbraceNode9;
        tinlinetokNode2 = (TInlinetok)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparentheseNode4 = (TLParenthese)nodeArrayList3.get(0);
        pnamelstNode5 = (PNameLst)nodeArrayList4.get(0);
        trparentheseNode6 = (TRParenthese)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        psequenceNode8 = (PSequence)nodeArrayList7.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList8.get(0);

        pinlineNode1 = new AInline(tinlinetokNode2, tnameNode3, tlparentheseNode4, pnamelstNode5, trparentheseNode6, tlbraceNode7, psequenceNode8, trbraceNode9);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AOneNameLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNameLst pnamelstNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pnamelstNode1 = new AOneNameLst(tnameNode2);
        }
	nodeList.add(pnamelstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AManyNameLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNameLst pnamelstNode1;
        {
            // Block
        TName tnameNode2;
        TComma tcommaNode3;
        PNameLst pnamelstNode4;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pnamelstNode4 = (PNameLst)nodeArrayList3.get(0);

        pnamelstNode1 = new AManyNameLst(tnameNode2, tcommaNode3, pnamelstNode4);
        }
	nodeList.add(pnamelstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AOneExprLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprLst pexprlstNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pexprlstNode1 = new AOneExprLst(pexprNode2);
        }
	nodeList.add(pexprlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AManyExprLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprLst pexprlstNode1;
        {
            // Block
        PExpr pexprNode2;
        TComma tcommaNode3;
        PExprLst pexprlstNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexprlstNode4 = (PExprLst)nodeArrayList3.get(0);

        pexprlstNode1 = new AManyExprLst(pexprNode2, tcommaNode3, pexprlstNode4);
        }
	nodeList.add(pexprlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ANullDeclLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PDeclLst pdecllstNode1;
        {
            // Block

        pdecllstNode1 = new ANullDeclLst();
        }
	nodeList.add(pdecllstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AOneDeclLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclLst pdecllstNode1;
        {
            // Block
        POneDecl ponedeclNode2;
        ponedeclNode2 = (POneDecl)nodeArrayList1.get(0);

        pdecllstNode1 = new AOneDeclLst(ponedeclNode2);
        }
	nodeList.add(pdecllstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AManyDeclLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclLst pdecllstNode1;
        {
            // Block
        POneDecl ponedeclNode2;
        TSeparator tseparatorNode3;
        PDeclLst pdecllstNode4;
        ponedeclNode2 = (POneDecl)nodeArrayList1.get(0);
        tseparatorNode3 = (TSeparator)nodeArrayList2.get(0);
        pdecllstNode4 = (PDeclLst)nodeArrayList3.get(0);

        pdecllstNode1 = new AManyDeclLst(ponedeclNode2, tseparatorNode3, pdecllstNode4);
        }
	nodeList.add(pdecllstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAonedecl1OneDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POneDecl ponedeclNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PTypename ptypenameNode3;
        PIvarLst pivarlstNode4;
        ptypenameNode3 = (PTypename)nodeArrayList1.get(0);
        pivarlstNode4 = (PIvarLst)nodeArrayList2.get(0);

        ponedeclNode1 = new AOneDecl(null, ptypenameNode3, pivarlstNode4);
        }
	nodeList.add(ponedeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAonedecl2OneDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POneDecl ponedeclNode1;
        {
            // Block
        PVisible pvisibleNode2;
        PTypename ptypenameNode3;
        PIvarLst pivarlstNode4;
        pvisibleNode2 = (PVisible)nodeArrayList1.get(0);
        ptypenameNode3 = (PTypename)nodeArrayList2.get(0);
        pivarlstNode4 = (PIvarLst)nodeArrayList3.get(0);

        ponedeclNode1 = new AOneDecl(pvisibleNode2, ptypenameNode3, pivarlstNode4);
        }
	nodeList.add(ponedeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AOneIvarLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvarLst pivarlstNode1;
        {
            // Block
        PIvar pivarNode2;
        pivarNode2 = (PIvar)nodeArrayList1.get(0);

        pivarlstNode1 = new AOneIvarLst(pivarNode2);
        }
	nodeList.add(pivarlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AManyIvarLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvarLst pivarlstNode1;
        {
            // Block
        PIvar pivarNode2;
        TComma tcommaNode3;
        PIvarLst pivarlstNode4;
        pivarNode2 = (PIvar)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pivarlstNode4 = (PIvarLst)nodeArrayList3.get(0);

        pivarlstNode1 = new AManyIvarLst(pivarNode2, tcommaNode3, pivarlstNode4);
        }
	nodeList.add(pivarlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ABitTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TBit tbitNode2;
        tbitNode2 = (TBit)nodeArrayList1.get(0);

        ptypenameNode1 = new ABitTypename(tbitNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ABoolTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypenameNode1 = new ABoolTypename(tboolNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AByteTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TByte tbyteNode2;
        tbyteNode2 = (TByte)nodeArrayList1.get(0);

        ptypenameNode1 = new AByteTypename(tbyteNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce APidTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TPid tpidNode2;
        tpidNode2 = (TPid)nodeArrayList1.get(0);

        ptypenameNode1 = new APidTypename(tpidNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AShortTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TShort tshortNode2;
        tshortNode2 = (TShort)nodeArrayList1.get(0);

        ptypenameNode1 = new AShortTypename(tshortNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AIntTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypenameNode1 = new AIntTypename(tintNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AMtypeTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TMtypetok tmtypetokNode2;
        tmtypetokNode2 = (TMtypetok)nodeArrayList1.get(0);

        ptypenameNode1 = new AMtypeTypename(tmtypetokNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AChanTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TChan tchanNode2;
        tchanNode2 = (TChan)nodeArrayList1.get(0);

        ptypenameNode1 = new AChanTypename(tchanNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AUnameTypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        ptypenameNode1 = new AUnameTypename(tnameNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AOneTypenamelst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypenamelst ptypenamelstNode1;
        {
            // Block
        PTypename ptypenameNode2;
        ptypenameNode2 = (PTypename)nodeArrayList1.get(0);

        ptypenamelstNode1 = new AOneTypenamelst(ptypenameNode2);
        }
	nodeList.add(ptypenamelstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AManyTypenamelst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypenamelst ptypenamelstNode1;
        {
            // Block
        PTypename ptypenameNode2;
        TComma tcommaNode3;
        PTypenamelst ptypenamelstNode4;
        ptypenameNode2 = (PTypename)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        ptypenamelstNode4 = (PTypenamelst)nodeArrayList3.get(0);

        ptypenamelstNode1 = new AManyTypenamelst(ptypenameNode2, tcommaNode3, ptypenamelstNode4);
        }
	nodeList.add(ptypenamelstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AOneActive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActive pactiveNode1;
        {
            // Block
        TActivetok tactivetokNode2;
        tactivetokNode2 = (TActivetok)nodeArrayList1.get(0);

        pactiveNode1 = new AOneActive(tactivetokNode2);
        }
	nodeList.add(pactiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AManyActive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActive pactiveNode1;
        {
            // Block
        TActivetok tactivetokNode2;
        TLBracket tlbracketNode3;
        PConst pconstNode4;
        TRBracket trbracketNode5;
        tactivetokNode2 = (TActivetok)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pconstNode4 = (PConst)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        pactiveNode1 = new AManyActive(tactivetokNode2, tlbracketNode3, pconstNode4, trbracketNode5);
        }
	nodeList.add(pactiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce APriority */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPriority ppriorityNode1;
        {
            // Block
        TPrioritytok tprioritytokNode2;
        PConst pconstNode3;
        tprioritytokNode2 = (TPrioritytok)nodeArrayList1.get(0);
        pconstNode3 = (PConst)nodeArrayList2.get(0);

        ppriorityNode1 = new APriority(tprioritytokNode2, pconstNode3);
        }
	nodeList.add(ppriorityNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AEnabler */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEnabler penablerNode1;
        {
            // Block
        TProvided tprovidedNode2;
        TLParenthese tlparentheseNode3;
        PExpr pexprNode4;
        TRParenthese trparentheseNode5;
        tprovidedNode2 = (TProvided)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        penablerNode1 = new AEnabler(tprovidedNode2, tlparentheseNode3, pexprNode4, trparentheseNode5);
        }
	nodeList.add(penablerNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AHiddenVisible */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVisible pvisibleNode1;
        {
            // Block
        THidden thiddenNode2;
        thiddenNode2 = (THidden)nodeArrayList1.get(0);

        pvisibleNode1 = new AHiddenVisible(thiddenNode2);
        }
	nodeList.add(pvisibleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AShowVisible */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVisible pvisibleNode1;
        {
            // Block
        TShow tshowNode2;
        tshowNode2 = (TShow)nodeArrayList1.get(0);

        pvisibleNode1 = new AShowVisible(tshowNode2);
        }
	nodeList.add(pvisibleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ANullSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PSequence psequenceNode1;
        {
            // Block

        psequenceNode1 = new ANullSequence();
        }
	nodeList.add(psequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AOneSequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSequence psequenceNode1;
        {
            // Block
        PStep pstepNode2;
        pstepNode2 = (PStep)nodeArrayList1.get(0);

        psequenceNode1 = new AOneSequence(pstepNode2);
        }
	nodeList.add(psequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AManySequence */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSequence psequenceNode1;
        {
            // Block
        PStep pstepNode2;
        TSeparator tseparatorNode3;
        PSequence psequenceNode4;
        pstepNode2 = (PStep)nodeArrayList1.get(0);
        tseparatorNode3 = (TSeparator)nodeArrayList2.get(0);
        psequenceNode4 = (PSequence)nodeArrayList3.get(0);

        psequenceNode1 = new AManySequence(pstepNode2, tseparatorNode3, psequenceNode4);
        }
	nodeList.add(psequenceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ADeclarationStep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStep pstepNode1;
        {
            // Block
        POneDecl ponedeclNode2;
        ponedeclNode2 = (POneDecl)nodeArrayList1.get(0);

        pstepNode1 = new ADeclarationStep(ponedeclNode2);
        }
	nodeList.add(pstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AStmntStep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStep pstepNode1;
        {
            // Block
        PStmnt pstmntNode2;
        pstmntNode2 = (PStmnt)nodeArrayList1.get(0);

        pstepNode1 = new AStmntStep(pstmntNode2);
        }
	nodeList.add(pstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AUnlessStep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStep pstepNode1;
        {
            // Block
        PStmnt pstmntNode2;
        TUnless tunlessNode3;
        PStmnt pstmntNode4;
        pstmntNode2 = (PStmnt)nodeArrayList1.get(0);
        tunlessNode3 = (TUnless)nodeArrayList2.get(0);
        pstmntNode4 = (PStmnt)nodeArrayList3.get(0);

        pstepNode1 = new AUnlessStep(pstmntNode2, tunlessNode3, pstmntNode4);
        }
	nodeList.add(pstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AExreceiveStep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStep pstepNode1;
        {
            // Block
        TXr txrNode2;
        PVarreflst pvarreflstNode3;
        txrNode2 = (TXr)nodeArrayList1.get(0);
        pvarreflstNode3 = (PVarreflst)nodeArrayList2.get(0);

        pstepNode1 = new AExreceiveStep(txrNode2, pvarreflstNode3);
        }
	nodeList.add(pstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AExsendStep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStep pstepNode1;
        {
            // Block
        TXs txsNode2;
        PVarreflst pvarreflstNode3;
        txsNode2 = (TXs)nodeArrayList1.get(0);
        pvarreflstNode3 = (PVarreflst)nodeArrayList2.get(0);

        pstepNode1 = new AExsendStep(txsNode2, pvarreflstNode3);
        }
	nodeList.add(pstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AOneVarreflst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarreflst pvarreflstNode1;
        {
            // Block
        PVarref pvarrefNode2;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);

        pvarreflstNode1 = new AOneVarreflst(pvarrefNode2);
        }
	nodeList.add(pvarreflstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AManyVarreflst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarreflst pvarreflstNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TComma tcommaNode3;
        PVarreflst pvarreflstNode4;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pvarreflstNode4 = (PVarreflst)nodeArrayList3.get(0);

        pvarreflstNode1 = new AManyVarreflst(pvarrefNode2, tcommaNode3, pvarreflstNode4);
        }
	nodeList.add(pvarreflstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AAsingleivar1Ivar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvar pivarNode1;
        {
            // Block
        TName tnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pivarNode1 = new ASingleIvar(tnameNode2, null);
        }
	nodeList.add(pivarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AAsingleivar2Ivar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvar pivarNode1;
        {
            // Block
        TName tnameNode2;
        PIvarassignment pivarassignmentNode3;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        pivarassignmentNode3 = (PIvarassignment)nodeArrayList2.get(0);

        pivarNode1 = new ASingleIvar(tnameNode2, pivarassignmentNode3);
        }
	nodeList.add(pivarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AAarrayivar1Ivar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvar pivarNode1;
        {
            // Block
        TName tnameNode2;
        TLBracket tlbracketNode3;
        PConst pconstNode4;
        TRBracket trbracketNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pconstNode4 = (PConst)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        pivarNode1 = new AArrayIvar(tnameNode2, tlbracketNode3, pconstNode4, trbracketNode5, null);
        }
	nodeList.add(pivarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AAarrayivar2Ivar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvar pivarNode1;
        {
            // Block
        TName tnameNode2;
        TLBracket tlbracketNode3;
        PConst pconstNode4;
        TRBracket trbracketNode5;
        PIvarassignment pivarassignmentNode6;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pconstNode4 = (PConst)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);
        pivarassignmentNode6 = (PIvarassignment)nodeArrayList5.get(0);

        pivarNode1 = new AArrayIvar(tnameNode2, tlbracketNode3, pconstNode4, trbracketNode5, pivarassignmentNode6);
        }
	nodeList.add(pivarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AVariableIvarassignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvarassignment pivarassignmentNode1;
        {
            // Block
        TAssign tassignNode2;
        PExpr pexprNode3;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pivarassignmentNode1 = new AVariableIvarassignment(tassignNode2, pexprNode3);
        }
	nodeList.add(pivarassignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AChannelIvarassignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIvarassignment pivarassignmentNode1;
        {
            // Block
        TAssign tassignNode2;
        TLBracket tlbracketNode3;
        PConst pconstNode4;
        TRBracket trbracketNode5;
        TOf tofNode6;
        TLBrace tlbraceNode7;
        PTypenamelst ptypenamelstNode8;
        TRBrace trbraceNode9;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pconstNode4 = (PConst)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);
        tofNode6 = (TOf)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        ptypenamelstNode8 = (PTypenamelst)nodeArrayList7.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList8.get(0);

        pivarassignmentNode1 = new AChannelIvarassignment(tassignNode2, tlbracketNode3, pconstNode4, trbracketNode5, tofNode6, tlbraceNode7, ptypenamelstNode8, trbraceNode9);
        }
	nodeList.add(pivarassignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AAsinglevarref1Varref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarref pvarrefNode1;
        {
            // Block
        TName tnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        pvarrefNode1 = new ASingleVarref(tnameNode2, null);
        }
	nodeList.add(pvarrefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AAsinglevarref2Varref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarref pvarrefNode1;
        {
            // Block
        TName tnameNode2;
        PArrayref parrayrefNode3;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        parrayrefNode3 = (PArrayref)nodeArrayList2.get(0);

        pvarrefNode1 = new ASingleVarref(tnameNode2, parrayrefNode3);
        }
	nodeList.add(pvarrefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AArecordvarref1Varref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarref pvarrefNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TDot tdotNode3;
        TName tnameNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);

        pvarrefNode1 = new ARecordVarref(pvarrefNode2, tdotNode3, tnameNode4, null);
        }
	nodeList.add(pvarrefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AArecordvarref2Varref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarref pvarrefNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TDot tdotNode3;
        TName tnameNode4;
        PArrayref parrayrefNode5;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        parrayrefNode5 = (PArrayref)nodeArrayList4.get(0);

        pvarrefNode1 = new ARecordVarref(pvarrefNode2, tdotNode3, tnameNode4, parrayrefNode5);
        }
	nodeList.add(pvarrefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AArrayref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayref parrayrefNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpr pexprNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        parrayrefNode1 = new AArrayref(tlbracketNode2, pexprNode3, trbracketNode4);
        }
	nodeList.add(parrayrefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce ARecordref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecordref precordrefNode1;
        {
            // Block
        TDot tdotNode2;
        PVarref pvarrefNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        pvarrefNode3 = (PVarref)nodeArrayList2.get(0);

        precordrefNode1 = new ARecordref(tdotNode2, pvarrefNode3);
        }
	nodeList.add(precordrefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AFifoSend */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSend psendNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TBang tbangNode3;
        PSendArgs psendargsNode4;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tbangNode3 = (TBang)nodeArrayList2.get(0);
        psendargsNode4 = (PSendArgs)nodeArrayList3.get(0);

        psendNode1 = new AFifoSend(pvarrefNode2, tbangNode3, psendargsNode4);
        }
	nodeList.add(psendNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ASortedSend */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSend psendNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TBangBang tbangbangNode3;
        PSendArgs psendargsNode4;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tbangbangNode3 = (TBangBang)nodeArrayList2.get(0);
        psendargsNode4 = (PSendArgs)nodeArrayList3.get(0);

        psendNode1 = new ASortedSend(pvarrefNode2, tbangbangNode3, psendargsNode4);
        }
	nodeList.add(psendNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce AFifoReceive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReceive preceiveNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TQuery tqueryNode3;
        PRecvArgs precvargsNode4;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tqueryNode3 = (TQuery)nodeArrayList2.get(0);
        precvargsNode4 = (PRecvArgs)nodeArrayList3.get(0);

        preceiveNode1 = new AFifoReceive(pvarrefNode2, tqueryNode3, precvargsNode4);
        }
	nodeList.add(preceiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ARandomReceive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReceive preceiveNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TQueryQuery tqueryqueryNode3;
        PRecvArgs precvargsNode4;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tqueryqueryNode3 = (TQueryQuery)nodeArrayList2.get(0);
        precvargsNode4 = (PRecvArgs)nodeArrayList3.get(0);

        preceiveNode1 = new ARandomReceive(pvarrefNode2, tqueryqueryNode3, precvargsNode4);
        }
	nodeList.add(preceiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AFifopollReceive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReceive preceiveNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TQuery tqueryNode3;
        TLt tltNode4;
        PRecvArgs precvargsNode5;
        TGt tgtNode6;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tqueryNode3 = (TQuery)nodeArrayList2.get(0);
        tltNode4 = (TLt)nodeArrayList3.get(0);
        precvargsNode5 = (PRecvArgs)nodeArrayList4.get(0);
        tgtNode6 = (TGt)nodeArrayList5.get(0);

        preceiveNode1 = new AFifopollReceive(pvarrefNode2, tqueryNode3, tltNode4, precvargsNode5, tgtNode6);
        }
	nodeList.add(preceiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ARandompollReceive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReceive preceiveNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TQueryQuery tqueryqueryNode3;
        TLt tltNode4;
        PRecvArgs precvargsNode5;
        TGt tgtNode6;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tqueryqueryNode3 = (TQueryQuery)nodeArrayList2.get(0);
        tltNode4 = (TLt)nodeArrayList3.get(0);
        precvargsNode5 = (PRecvArgs)nodeArrayList4.get(0);
        tgtNode6 = (TGt)nodeArrayList5.get(0);

        preceiveNode1 = new ARandompollReceive(pvarrefNode2, tqueryqueryNode3, tltNode4, precvargsNode5, tgtNode6);
        }
	nodeList.add(preceiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce AFifoRecvPoll */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvPoll precvpollNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TQuery tqueryNode3;
        TLBracket tlbracketNode4;
        PRecvArgs precvargsNode5;
        TRBracket trbracketNode6;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tqueryNode3 = (TQuery)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        precvargsNode5 = (PRecvArgs)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);

        precvpollNode1 = new AFifoRecvPoll(pvarrefNode2, tqueryNode3, tlbracketNode4, precvargsNode5, trbracketNode6);
        }
	nodeList.add(precvpollNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ARandomRecvPoll */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvPoll precvpollNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TQueryQuery tqueryqueryNode3;
        TLBracket tlbracketNode4;
        PRecvArgs precvargsNode5;
        TRBracket trbracketNode6;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tqueryqueryNode3 = (TQueryQuery)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        precvargsNode5 = (PRecvArgs)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);

        precvpollNode1 = new ARandomRecvPoll(pvarrefNode2, tqueryqueryNode3, tlbracketNode4, precvargsNode5, trbracketNode6);
        }
	nodeList.add(precvpollNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AListSendArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSendArgs psendargsNode1;
        {
            // Block
        PArgLst parglstNode2;
        parglstNode2 = (PArgLst)nodeArrayList1.get(0);

        psendargsNode1 = new AListSendArgs(parglstNode2);
        }
	nodeList.add(psendargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce AHeadedlistSendArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSendArgs psendargsNode1;
        {
            // Block
        PExpr pexprNode2;
        TLParenthese tlparentheseNode3;
        PArgLst parglstNode4;
        TRParenthese trparentheseNode5;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        parglstNode4 = (PArgLst)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        psendargsNode1 = new AHeadedlistSendArgs(pexprNode2, tlparentheseNode3, parglstNode4, trparentheseNode5);
        }
	nodeList.add(psendargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce AOneArgLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgLst parglstNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        parglstNode1 = new AOneArgLst(pexprNode2);
        }
	nodeList.add(parglstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce AManyArgLst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgLst parglstNode1;
        {
            // Block
        PExpr pexprNode2;
        TComma tcommaNode3;
        PArgLst parglstNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        parglstNode4 = (PArgLst)nodeArrayList3.get(0);

        parglstNode1 = new AManyArgLst(pexprNode2, tcommaNode3, parglstNode4);
        }
	nodeList.add(parglstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce AOneRecvArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvArgs precvargsNode1;
        {
            // Block
        PRecvArg precvargNode2;
        precvargNode2 = (PRecvArg)nodeArrayList1.get(0);

        precvargsNode1 = new AOneRecvArgs(precvargNode2);
        }
	nodeList.add(precvargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce AManyRecvArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvArgs precvargsNode1;
        {
            // Block
        PRecvArg precvargNode2;
        TComma tcommaNode3;
        PRecvArgs precvargsNode4;
        precvargNode2 = (PRecvArg)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        precvargsNode4 = (PRecvArgs)nodeArrayList3.get(0);

        precvargsNode1 = new AManyRecvArgs(precvargNode2, tcommaNode3, precvargsNode4);
        }
	nodeList.add(precvargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce AManyheadedRecvArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvArgs precvargsNode1;
        {
            // Block
        PRecvArg precvargNode2;
        TLParenthese tlparentheseNode3;
        PRecvArgs precvargsNode4;
        TRParenthese trparentheseNode5;
        precvargNode2 = (PRecvArg)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        precvargsNode4 = (PRecvArgs)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        precvargsNode1 = new AManyheadedRecvArgs(precvargNode2, tlparentheseNode3, precvargsNode4, trparentheseNode5);
        }
	nodeList.add(precvargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce AVarRecvArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvArg precvargNode1;
        {
            // Block
        PVarref pvarrefNode2;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);

        precvargNode1 = new AVarRecvArg(pvarrefNode2);
        }
	nodeList.add(precvargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce AEvalRecvArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvArg precvargNode1;
        {
            // Block
        TEval tevalNode2;
        TLParenthese tlparentheseNode3;
        PExpr pexprNode4;
        TRParenthese trparentheseNode5;
        tevalNode2 = (TEval)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        precvargNode1 = new AEvalRecvArg(tevalNode2, tlparentheseNode3, pexprNode4, trparentheseNode5);
        }
	nodeList.add(precvargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce AConstRecvArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRecvArg precvargNode1;
        {
            // Block
        PConst pconstNode2;
        pconstNode2 = (PConst)nodeArrayList1.get(0);

        precvargNode1 = new AConstRecvArg(pconstNode2);
        }
	nodeList.add(precvargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce AAssignmentAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        passignmentNode1 = new AAssignmentAssignment(pvarrefNode2, tassignNode3, pexprNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce AIncrementAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TPlusPlus tplusplusNode3;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tplusplusNode3 = (TPlusPlus)nodeArrayList2.get(0);

        passignmentNode1 = new AIncrementAssignment(pvarrefNode2, tplusplusNode3);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce ADecrementAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PVarref pvarrefNode2;
        TMinusMinus tminusminusNode3;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);
        tminusminusNode3 = (TMinusMinus)nodeArrayList2.get(0);

        passignmentNode1 = new ADecrementAssignment(pvarrefNode2, tminusminusNode3);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce AIfStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TIf tifNode2;
        POptions poptionsNode3;
        TFi tfiNode4;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        poptionsNode3 = (POptions)nodeArrayList2.get(0);
        tfiNode4 = (TFi)nodeArrayList3.get(0);

        pstmntNode1 = new AIfStmnt(tifNode2, poptionsNode3, tfiNode4);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ADoStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TDo tdoNode2;
        POptions poptionsNode3;
        TOd todNode4;
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        poptionsNode3 = (POptions)nodeArrayList2.get(0);
        todNode4 = (TOd)nodeArrayList3.get(0);

        pstmntNode1 = new ADoStmnt(tdoNode2, poptionsNode3, todNode4);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce AAtomicStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TAtomic tatomicNode2;
        TLBrace tlbraceNode3;
        PSequence psequenceNode4;
        TRBrace trbraceNode5;
        tatomicNode2 = (TAtomic)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        psequenceNode4 = (PSequence)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pstmntNode1 = new AAtomicStmnt(tatomicNode2, tlbraceNode3, psequenceNode4, trbraceNode5);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce ADstepStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TDStep tdstepNode2;
        TLBrace tlbraceNode3;
        PSequence psequenceNode4;
        TRBrace trbraceNode5;
        tdstepNode2 = (TDStep)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        psequenceNode4 = (PSequence)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pstmntNode1 = new ADstepStmnt(tdstepNode2, tlbraceNode3, psequenceNode4, trbraceNode5);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce ABracesStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PSequence psequenceNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        psequenceNode3 = (PSequence)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pstmntNode1 = new ABracesStmnt(tlbraceNode2, psequenceNode3, trbraceNode4);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce ASendStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        PSend psendNode2;
        psendNode2 = (PSend)nodeArrayList1.get(0);

        pstmntNode1 = new ASendStmnt(psendNode2);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new117() /* reduce AReceiveStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        PReceive preceiveNode2;
        preceiveNode2 = (PReceive)nodeArrayList1.get(0);

        pstmntNode1 = new AReceiveStmnt(preceiveNode2);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new118() /* reduce AAssignStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstmntNode1 = new AAssignStmnt(passignmentNode2);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new119() /* reduce AElseStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TElse telseNode2;
        telseNode2 = (TElse)nodeArrayList1.get(0);

        pstmntNode1 = new AElseStmnt(telseNode2);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new120() /* reduce ABreakStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TBreak tbreakNode2;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);

        pstmntNode1 = new ABreakStmnt(tbreakNode2);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new121() /* reduce AGotoStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TGoto tgotoNode2;
        TName tnameNode3;
        tgotoNode2 = (TGoto)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);

        pstmntNode1 = new AGotoStmnt(tgotoNode2, tnameNode3);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new122() /* reduce ALabelStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TName tnameNode2;
        TColon tcolonNode3;
        PStmnt pstmntNode4;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pstmntNode4 = (PStmnt)nodeArrayList3.get(0);

        pstmntNode1 = new ALabelStmnt(tnameNode2, tcolonNode3, pstmntNode4);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new123() /* reduce APrintStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TPrint tprintNode2;
        TLParenthese tlparentheseNode3;
        TString tstringNode4;
        TRParenthese trparentheseNode5;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        tstringNode4 = (TString)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pstmntNode1 = new APrintStmnt(tprintNode2, tlparentheseNode3, tstringNode4, trparentheseNode5);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new124() /* reduce APrintwithargsStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TPrint tprintNode2;
        TLParenthese tlparentheseNode3;
        TString tstringNode4;
        TComma tcommaNode5;
        PArgLst parglstNode6;
        TRParenthese trparentheseNode7;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        tstringNode4 = (TString)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        parglstNode6 = (PArgLst)nodeArrayList5.get(0);
        trparentheseNode7 = (TRParenthese)nodeArrayList6.get(0);

        pstmntNode1 = new APrintwithargsStmnt(tprintNode2, tlparentheseNode3, tstringNode4, tcommaNode5, parglstNode6, trparentheseNode7);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new125() /* reduce AAssertStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TAssert tassertNode2;
        PExpr pexprNode3;
        tassertNode2 = (TAssert)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pstmntNode1 = new AAssertStmnt(tassertNode2, pexprNode3);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new126() /* reduce AExpressionStmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pstmntNode1 = new AExpressionStmnt(pexprNode2);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new127() /* reduce AAinlinestmnt1Stmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TName tnameNode2;
        TLParenthese tlparentheseNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRParenthese trparentheseNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList3.get(0);

        pstmntNode1 = new AInlineStmnt(tnameNode2, tlparentheseNode3, null, trparentheseNode5);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new128() /* reduce AAinlinestmnt2Stmnt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmnt pstmntNode1;
        {
            // Block
        TName tnameNode2;
        TLParenthese tlparentheseNode3;
        PExprLst pexprlstNode4;
        TRParenthese trparentheseNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexprlstNode4 = (PExprLst)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pstmntNode1 = new AInlineStmnt(tnameNode2, tlparentheseNode3, pexprlstNode4, trparentheseNode5);
        }
	nodeList.add(pstmntNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new129() /* reduce AAnormaloptions1Options */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POptions poptionsNode1;
        {
            // Block
        TColonColon tcoloncolonNode2;
        PSequence psequenceNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tcoloncolonNode2 = (TColonColon)nodeArrayList1.get(0);
        psequenceNode3 = (PSequence)nodeArrayList2.get(0);

        poptionsNode1 = new ANormalOptions(tcoloncolonNode2, psequenceNode3, null);
        }
	nodeList.add(poptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new130() /* reduce AAnormaloptions2Options */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POptions poptionsNode1;
        {
            // Block
        TColonColon tcoloncolonNode2;
        PSequence psequenceNode3;
        POptions poptionsNode4;
        tcoloncolonNode2 = (TColonColon)nodeArrayList1.get(0);
        psequenceNode3 = (PSequence)nodeArrayList2.get(0);
        poptionsNode4 = (POptions)nodeArrayList3.get(0);

        poptionsNode1 = new ANormalOptions(tcoloncolonNode2, psequenceNode3, poptionsNode4);
        }
	nodeList.add(poptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new131() /* reduce AAtemplateoptions1Options */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POptions poptionsNode1;
        {
            // Block
        TColonColon tcoloncolonNode2;
        TFor tforNode3;
        TName tnameNode4;
        TOver toverNode5;
        TName tnameNode6;
        TLBrace tlbraceNode7;
        PSequence psequenceNode8;
        TRBrace trbraceNode9;
        @SuppressWarnings("unused") Object nullNode10 = null;
        tcoloncolonNode2 = (TColonColon)nodeArrayList1.get(0);
        tforNode3 = (TFor)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        toverNode5 = (TOver)nodeArrayList4.get(0);
        tnameNode6 = (TName)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        psequenceNode8 = (PSequence)nodeArrayList7.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList8.get(0);

        poptionsNode1 = new ATemplateOptions(tcoloncolonNode2, tforNode3, tnameNode4, toverNode5, tnameNode6, tlbraceNode7, psequenceNode8, trbraceNode9, null);
        }
	nodeList.add(poptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new132() /* reduce AAtemplateoptions2Options */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POptions poptionsNode1;
        {
            // Block
        TColonColon tcoloncolonNode2;
        TFor tforNode3;
        TName tnameNode4;
        TOver toverNode5;
        TName tnameNode6;
        TLBrace tlbraceNode7;
        PSequence psequenceNode8;
        TRBrace trbraceNode9;
        POptions poptionsNode10;
        tcoloncolonNode2 = (TColonColon)nodeArrayList1.get(0);
        tforNode3 = (TFor)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        toverNode5 = (TOver)nodeArrayList4.get(0);
        tnameNode6 = (TName)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        psequenceNode8 = (PSequence)nodeArrayList7.get(0);
        trbraceNode9 = (TRBrace)nodeArrayList8.get(0);
        poptionsNode10 = (POptions)nodeArrayList9.get(0);

        poptionsNode1 = new ATemplateOptions(tcoloncolonNode2, tforNode3, tnameNode4, toverNode5, tnameNode6, tlbraceNode7, psequenceNode8, trbraceNode9, poptionsNode10);
        }
	nodeList.add(poptionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new133() /* reduce AParentheseFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLParenthese tlparentheseNode2;
        PExpr pexprNode3;
        TRParenthese trparentheseNode4;
        tlparentheseNode2 = (TLParenthese)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparentheseNode4 = (TRParenthese)nodeArrayList3.get(0);

        pfactorNode1 = new AParentheseFactor(tlparentheseNode2, pexprNode3, trparentheseNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new134() /* reduce ALengthFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLen tlenNode2;
        TLParenthese tlparentheseNode3;
        PVarref pvarrefNode4;
        TRParenthese trparentheseNode5;
        tlenNode2 = (TLen)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pvarrefNode4 = (PVarref)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pfactorNode1 = new ALengthFactor(tlenNode2, tlparentheseNode3, pvarrefNode4, trparentheseNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new135() /* reduce ARecvPollFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PRecvPoll precvpollNode2;
        precvpollNode2 = (PRecvPoll)nodeArrayList1.get(0);

        pfactorNode1 = new ARecvPollFactor(precvpollNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new136() /* reduce AVarrefFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PVarref pvarrefNode2;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);

        pfactorNode1 = new AVarrefFactor(pvarrefNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new137() /* reduce AConstFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PConst pconstNode2;
        pconstNode2 = (PConst)nodeArrayList1.get(0);

        pfactorNode1 = new AConstFactor(pconstNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new138() /* reduce ATimeoutFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TTimeout ttimeoutNode2;
        ttimeoutNode2 = (TTimeout)nodeArrayList1.get(0);

        pfactorNode1 = new ATimeoutFactor(ttimeoutNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new139() /* reduce ANonprogressFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNp tnpNode2;
        tnpNode2 = (TNp)nodeArrayList1.get(0);

        pfactorNode1 = new ANonprogressFactor(tnpNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new140() /* reduce AEnabledFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TEnabled tenabledNode2;
        TLParenthese tlparentheseNode3;
        PExpr pexprNode4;
        TRParenthese trparentheseNode5;
        tenabledNode2 = (TEnabled)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pfactorNode1 = new AEnabledFactor(tenabledNode2, tlparentheseNode3, pexprNode4, trparentheseNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new141() /* reduce APcValueFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TPcValue tpcvalueNode2;
        TLParenthese tlparentheseNode3;
        PExpr pexprNode4;
        TRParenthese trparentheseNode5;
        tpcvalueNode2 = (TPcValue)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pfactorNode1 = new APcValueFactor(tpcvalueNode2, tlparentheseNode3, pexprNode4, trparentheseNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new142() /* reduce ARemoterefFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TName tnameNode2;
        TLBracket tlbracketNode3;
        PExpr pexprNode4;
        TRBracket trbracketNode5;
        TAt tatNode6;
        TName tnameNode7;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);
        tatNode6 = (TAt)nodeArrayList5.get(0);
        tnameNode7 = (TName)nodeArrayList6.get(0);

        pfactorNode1 = new ARemoterefFactor(tnameNode2, tlbracketNode3, pexprNode4, trbracketNode5, tatNode6, tnameNode7);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new143() /* reduce AArunfactor1Factor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRun trunNode2;
        TName tnameNode3;
        TLParenthese tlparentheseNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRParenthese trparentheseNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        trunNode2 = (TRun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparentheseNode4 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode6 = (TRParenthese)nodeArrayList4.get(0);

        pfactorNode1 = new ARunFactor(trunNode2, tnameNode3, tlparentheseNode4, null, trparentheseNode6, null);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new144() /* reduce AArunfactor2Factor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRun trunNode2;
        TName tnameNode3;
        TLParenthese tlparentheseNode4;
        PArgLst parglstNode5;
        TRParenthese trparentheseNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        trunNode2 = (TRun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparentheseNode4 = (TLParenthese)nodeArrayList3.get(0);
        parglstNode5 = (PArgLst)nodeArrayList4.get(0);
        trparentheseNode6 = (TRParenthese)nodeArrayList5.get(0);

        pfactorNode1 = new ARunFactor(trunNode2, tnameNode3, tlparentheseNode4, parglstNode5, trparentheseNode6, null);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new145() /* reduce AArunfactor3Factor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRun trunNode2;
        TName tnameNode3;
        TLParenthese tlparentheseNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRParenthese trparentheseNode6;
        PPriority ppriorityNode7;
        trunNode2 = (TRun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparentheseNode4 = (TLParenthese)nodeArrayList3.get(0);
        trparentheseNode6 = (TRParenthese)nodeArrayList4.get(0);
        ppriorityNode7 = (PPriority)nodeArrayList5.get(0);

        pfactorNode1 = new ARunFactor(trunNode2, tnameNode3, tlparentheseNode4, null, trparentheseNode6, ppriorityNode7);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new146() /* reduce AArunfactor4Factor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRun trunNode2;
        TName tnameNode3;
        TLParenthese tlparentheseNode4;
        PArgLst parglstNode5;
        TRParenthese trparentheseNode6;
        PPriority ppriorityNode7;
        trunNode2 = (TRun)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlparentheseNode4 = (TLParenthese)nodeArrayList3.get(0);
        parglstNode5 = (PArgLst)nodeArrayList4.get(0);
        trparentheseNode6 = (TRParenthese)nodeArrayList5.get(0);
        ppriorityNode7 = (PPriority)nodeArrayList6.get(0);

        pfactorNode1 = new ARunFactor(trunNode2, tnameNode3, tlparentheseNode4, parglstNode5, trparentheseNode6, ppriorityNode7);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new147() /* reduce AChanopFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TChanop tchanopNode2;
        TLParenthese tlparentheseNode3;
        PVarref pvarrefNode4;
        TRParenthese trparentheseNode5;
        tchanopNode2 = (TChanop)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pvarrefNode4 = (PVarref)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pfactorNode1 = new AChanopFactor(tchanopNode2, tlparentheseNode3, pvarrefNode4, trparentheseNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new148() /* reduce ASimpleUnExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnExpr punexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        punexprNode1 = new ASimpleUnExpr(pfactorNode2);
        }
	nodeList.add(punexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new149() /* reduce ANotUnExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnExpr punexprNode1;
        {
            // Block
        TBang tbangNode2;
        PFactor pfactorNode3;
        tbangNode2 = (TBang)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        punexprNode1 = new ANotUnExpr(tbangNode2, pfactorNode3);
        }
	nodeList.add(punexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new150() /* reduce AComplementUnExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnExpr punexprNode1;
        {
            // Block
        TComplement tcomplementNode2;
        PFactor pfactorNode3;
        tcomplementNode2 = (TComplement)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        punexprNode1 = new AComplementUnExpr(tcomplementNode2, pfactorNode3);
        }
	nodeList.add(punexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new151() /* reduce ASimpleMultExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultExpr pmultexprNode1;
        {
            // Block
        PUnExpr punexprNode2;
        punexprNode2 = (PUnExpr)nodeArrayList1.get(0);

        pmultexprNode1 = new ASimpleMultExpr(punexprNode2);
        }
	nodeList.add(pmultexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new152() /* reduce ACompoundMultExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultExpr pmultexprNode1;
        {
            // Block
        PUnExpr punexprNode2;
        TMultop tmultopNode3;
        PMultExpr pmultexprNode4;
        punexprNode2 = (PUnExpr)nodeArrayList1.get(0);
        tmultopNode3 = (TMultop)nodeArrayList2.get(0);
        pmultexprNode4 = (PMultExpr)nodeArrayList3.get(0);

        pmultexprNode1 = new ACompoundMultExpr(punexprNode2, tmultopNode3, pmultexprNode4);
        }
	nodeList.add(pmultexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new153() /* reduce ASimpleAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAddExpr paddexprNode1;
        {
            // Block
        PMultExpr pmultexprNode2;
        pmultexprNode2 = (PMultExpr)nodeArrayList1.get(0);

        paddexprNode1 = new ASimpleAddExpr(pmultexprNode2);
        }
	nodeList.add(paddexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new154() /* reduce ACompoundplusAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAddExpr paddexprNode1;
        {
            // Block
        PMultExpr pmultexprNode2;
        TPlus tplusNode3;
        PAddExpr paddexprNode4;
        pmultexprNode2 = (PMultExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        paddexprNode4 = (PAddExpr)nodeArrayList3.get(0);

        paddexprNode1 = new ACompoundplusAddExpr(pmultexprNode2, tplusNode3, paddexprNode4);
        }
	nodeList.add(paddexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new155() /* reduce ACompoundminusAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAddExpr paddexprNode1;
        {
            // Block
        PMultExpr pmultexprNode2;
        TMinus tminusNode3;
        PAddExpr paddexprNode4;
        pmultexprNode2 = (PMultExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        paddexprNode4 = (PAddExpr)nodeArrayList3.get(0);

        paddexprNode1 = new ACompoundminusAddExpr(pmultexprNode2, tminusNode3, paddexprNode4);
        }
	nodeList.add(paddexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new156() /* reduce ASimpleShiftExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShiftExpr pshiftexprNode1;
        {
            // Block
        PAddExpr paddexprNode2;
        paddexprNode2 = (PAddExpr)nodeArrayList1.get(0);

        pshiftexprNode1 = new ASimpleShiftExpr(paddexprNode2);
        }
	nodeList.add(pshiftexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new157() /* reduce ACompoundShiftExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShiftExpr pshiftexprNode1;
        {
            // Block
        PAddExpr paddexprNode2;
        TShiftop tshiftopNode3;
        PShiftExpr pshiftexprNode4;
        paddexprNode2 = (PAddExpr)nodeArrayList1.get(0);
        tshiftopNode3 = (TShiftop)nodeArrayList2.get(0);
        pshiftexprNode4 = (PShiftExpr)nodeArrayList3.get(0);

        pshiftexprNode1 = new ACompoundShiftExpr(paddexprNode2, tshiftopNode3, pshiftexprNode4);
        }
	nodeList.add(pshiftexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new158() /* reduce ASimpleRelExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelExpr prelexprNode1;
        {
            // Block
        PShiftExpr pshiftexprNode2;
        pshiftexprNode2 = (PShiftExpr)nodeArrayList1.get(0);

        prelexprNode1 = new ASimpleRelExpr(pshiftexprNode2);
        }
	nodeList.add(prelexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new159() /* reduce ACompoundrelopRelExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelExpr prelexprNode1;
        {
            // Block
        PShiftExpr pshiftexprNode2;
        TRelop trelopNode3;
        PRelExpr prelexprNode4;
        pshiftexprNode2 = (PShiftExpr)nodeArrayList1.get(0);
        trelopNode3 = (TRelop)nodeArrayList2.get(0);
        prelexprNode4 = (PRelExpr)nodeArrayList3.get(0);

        prelexprNode1 = new ACompoundrelopRelExpr(pshiftexprNode2, trelopNode3, prelexprNode4);
        }
	nodeList.add(prelexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new160() /* reduce ACompoundgtRelExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelExpr prelexprNode1;
        {
            // Block
        PShiftExpr pshiftexprNode2;
        TGt tgtNode3;
        PRelExpr prelexprNode4;
        pshiftexprNode2 = (PShiftExpr)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        prelexprNode4 = (PRelExpr)nodeArrayList3.get(0);

        prelexprNode1 = new ACompoundgtRelExpr(pshiftexprNode2, tgtNode3, prelexprNode4);
        }
	nodeList.add(prelexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new161() /* reduce ACompoundltRelExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelExpr prelexprNode1;
        {
            // Block
        PShiftExpr pshiftexprNode2;
        TLt tltNode3;
        PRelExpr prelexprNode4;
        pshiftexprNode2 = (PShiftExpr)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        prelexprNode4 = (PRelExpr)nodeArrayList3.get(0);

        prelexprNode1 = new ACompoundltRelExpr(pshiftexprNode2, tltNode3, prelexprNode4);
        }
	nodeList.add(prelexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new162() /* reduce ASimpleEqExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEqExpr peqexprNode1;
        {
            // Block
        PRelExpr prelexprNode2;
        prelexprNode2 = (PRelExpr)nodeArrayList1.get(0);

        peqexprNode1 = new ASimpleEqExpr(prelexprNode2);
        }
	nodeList.add(peqexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new163() /* reduce ACompoundEqExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEqExpr peqexprNode1;
        {
            // Block
        PRelExpr prelexprNode2;
        TEqop teqopNode3;
        PEqExpr peqexprNode4;
        prelexprNode2 = (PRelExpr)nodeArrayList1.get(0);
        teqopNode3 = (TEqop)nodeArrayList2.get(0);
        peqexprNode4 = (PEqExpr)nodeArrayList3.get(0);

        peqexprNode1 = new ACompoundEqExpr(prelexprNode2, teqopNode3, peqexprNode4);
        }
	nodeList.add(peqexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new164() /* reduce ASimpleBitandExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBitandExpr pbitandexprNode1;
        {
            // Block
        PEqExpr peqexprNode2;
        peqexprNode2 = (PEqExpr)nodeArrayList1.get(0);

        pbitandexprNode1 = new ASimpleBitandExpr(peqexprNode2);
        }
	nodeList.add(pbitandexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new165() /* reduce ACompoundBitandExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBitandExpr pbitandexprNode1;
        {
            // Block
        PEqExpr peqexprNode2;
        TBitand tbitandNode3;
        PBitandExpr pbitandexprNode4;
        peqexprNode2 = (PEqExpr)nodeArrayList1.get(0);
        tbitandNode3 = (TBitand)nodeArrayList2.get(0);
        pbitandexprNode4 = (PBitandExpr)nodeArrayList3.get(0);

        pbitandexprNode1 = new ACompoundBitandExpr(peqexprNode2, tbitandNode3, pbitandexprNode4);
        }
	nodeList.add(pbitandexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new166() /* reduce ASimpleBitxorExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBitxorExpr pbitxorexprNode1;
        {
            // Block
        PBitandExpr pbitandexprNode2;
        pbitandexprNode2 = (PBitandExpr)nodeArrayList1.get(0);

        pbitxorexprNode1 = new ASimpleBitxorExpr(pbitandexprNode2);
        }
	nodeList.add(pbitxorexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new167() /* reduce ACompoundBitxorExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBitxorExpr pbitxorexprNode1;
        {
            // Block
        PBitandExpr pbitandexprNode2;
        TBitxor tbitxorNode3;
        PBitxorExpr pbitxorexprNode4;
        pbitandexprNode2 = (PBitandExpr)nodeArrayList1.get(0);
        tbitxorNode3 = (TBitxor)nodeArrayList2.get(0);
        pbitxorexprNode4 = (PBitxorExpr)nodeArrayList3.get(0);

        pbitxorexprNode1 = new ACompoundBitxorExpr(pbitandexprNode2, tbitxorNode3, pbitxorexprNode4);
        }
	nodeList.add(pbitxorexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new168() /* reduce ASimpleBitorExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBitorExpr pbitorexprNode1;
        {
            // Block
        PBitxorExpr pbitxorexprNode2;
        pbitxorexprNode2 = (PBitxorExpr)nodeArrayList1.get(0);

        pbitorexprNode1 = new ASimpleBitorExpr(pbitxorexprNode2);
        }
	nodeList.add(pbitorexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new169() /* reduce ACompoundBitorExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBitorExpr pbitorexprNode1;
        {
            // Block
        PBitxorExpr pbitxorexprNode2;
        TBitor tbitorNode3;
        PBitorExpr pbitorexprNode4;
        pbitxorexprNode2 = (PBitxorExpr)nodeArrayList1.get(0);
        tbitorNode3 = (TBitor)nodeArrayList2.get(0);
        pbitorexprNode4 = (PBitorExpr)nodeArrayList3.get(0);

        pbitorexprNode1 = new ACompoundBitorExpr(pbitxorexprNode2, tbitorNode3, pbitorexprNode4);
        }
	nodeList.add(pbitorexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new170() /* reduce ASimpleAndExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndExpr pandexprNode1;
        {
            // Block
        PBitorExpr pbitorexprNode2;
        pbitorexprNode2 = (PBitorExpr)nodeArrayList1.get(0);

        pandexprNode1 = new ASimpleAndExpr(pbitorexprNode2);
        }
	nodeList.add(pandexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new171() /* reduce ACompoundAndExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndExpr pandexprNode1;
        {
            // Block
        PBitorExpr pbitorexprNode2;
        TAnd tandNode3;
        PAndExpr pandexprNode4;
        pbitorexprNode2 = (PBitorExpr)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pandexprNode4 = (PAndExpr)nodeArrayList3.get(0);

        pandexprNode1 = new ACompoundAndExpr(pbitorexprNode2, tandNode3, pandexprNode4);
        }
	nodeList.add(pandexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new172() /* reduce ASimpleOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POrExpr porexprNode1;
        {
            // Block
        PAndExpr pandexprNode2;
        pandexprNode2 = (PAndExpr)nodeArrayList1.get(0);

        porexprNode1 = new ASimpleOrExpr(pandexprNode2);
        }
	nodeList.add(porexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new173() /* reduce ACompoundOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POrExpr porexprNode1;
        {
            // Block
        PAndExpr pandexprNode2;
        TOr torNode3;
        POrExpr porexprNode4;
        pandexprNode2 = (PAndExpr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        porexprNode4 = (POrExpr)nodeArrayList3.get(0);

        porexprNode1 = new ACompoundOrExpr(pandexprNode2, torNode3, porexprNode4);
        }
	nodeList.add(porexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new174() /* reduce ASimpleExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        POrExpr porexprNode2;
        porexprNode2 = (POrExpr)nodeArrayList1.get(0);

        pexprNode1 = new ASimpleExpr(porexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new175() /* reduce AConditionalExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLParenthese tlparentheseNode2;
        POrExpr porexprNode3;
        TRightarrow trightarrowNode4;
        POrExpr porexprNode5;
        TColon tcolonNode6;
        POrExpr porexprNode7;
        TRParenthese trparentheseNode8;
        tlparentheseNode2 = (TLParenthese)nodeArrayList1.get(0);
        porexprNode3 = (POrExpr)nodeArrayList2.get(0);
        trightarrowNode4 = (TRightarrow)nodeArrayList3.get(0);
        porexprNode5 = (POrExpr)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        porexprNode7 = (POrExpr)nodeArrayList6.get(0);
        trparentheseNode8 = (TRParenthese)nodeArrayList7.get(0);

        pexprNode1 = new AConditionalExpr(tlparentheseNode2, porexprNode3, trightarrowNode4, porexprNode5, tcolonNode6, porexprNode7, trparentheseNode8);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new176() /* reduce ATrueConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pconstNode1 = new ATrueConst(ttrueNode2);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new177() /* reduce AFalseConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pconstNode1 = new AFalseConst(tfalseNode2);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new178() /* reduce ASkipConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TSkip tskipNode2;
        tskipNode2 = (TSkip)nodeArrayList1.get(0);

        pconstNode1 = new ASkipConst(tskipNode2);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new179() /* reduce AAnumberconst1Const */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TNumber tnumberNode3;
        tnumberNode3 = (TNumber)nodeArrayList1.get(0);

        pconstNode1 = new ANumberConst(null, tnumberNode3);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new180() /* reduce AAnumberconst2Const */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TMinus tminusNode2;
        TNumber tnumberNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        pconstNode1 = new ANumberConst(tminusNode2, tnumberNode3);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new181() /* reduce APidConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TProcessid tprocessidNode2;
        tprocessidNode2 = (TProcessid)nodeArrayList1.get(0);

        pconstNode1 = new APidConst(tprocessidNode2);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new182() /* reduce AUnderscoreConst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TUnderscore tunderscoreNode2;
        tunderscoreNode2 = (TUnderscore)nodeArrayList1.get(0);

        pconstNode1 = new AUnderscoreConst(tunderscoreNode2);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new183() /* reduce ATerminal$Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PModule pmoduleNode1;
        pmoduleNode1 = (PModule)nodeArrayList1.get(0);
	if(pmoduleNode1 != null)
	{
	  listNode2.add(pmoduleNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new184() /* reduce ANonTerminal$Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PModule pmoduleNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoduleNode2 != null)
	{
	  listNode3.add(pmoduleNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {22, SHIFT, 1}, {37, SHIFT, 2}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {54, SHIFT, 7}, {56, SHIFT, 8}, {57, SHIFT, 9}, {58, SHIFT, 10}, {60, SHIFT, 11}, {61, SHIFT, 12}, {62, SHIFT, 13}, {67, SHIFT, 14}, {71, SHIFT, 15}, {74, SHIFT, 16}, {75, SHIFT, 17}, {78, SHIFT, 18}, {80, SHIFT, 19}, {87, SHIFT, 20}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 62}, {20, SHIFT, 36}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 8}, {18, SHIFT, 37}, {69, SHIFT, 38}, },
			{{-1, ERROR, 9}, {87, SHIFT, 40}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, {18, SHIFT, 41}, {25, SHIFT, 42}, },
			{{-1, ERROR, 12}, {18, SHIFT, 43}, },
			{{-1, ERROR, 13}, {18, SHIFT, 44}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 15}, {87, SHIFT, 45}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 18}, {18, SHIFT, 46}, },
			{{-1, ERROR, 19}, {87, SHIFT, 47}, },
			{{-1, REDUCE, 59}, {84, SHIFT, 48}, },
			{{-1, ERROR, 21}, {90, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 183}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 32}, {87, SHIFT, 49}, },
			{{-1, ERROR, 33}, {71, SHIFT, 52}, },
			{{-1, ERROR, 34}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {87, SHIFT, 54}, },
			{{-1, REDUCE, 0}, {22, SHIFT, 1}, {37, SHIFT, 2}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {54, SHIFT, 7}, {56, SHIFT, 8}, {57, SHIFT, 9}, {58, SHIFT, 10}, {60, SHIFT, 11}, {61, SHIFT, 12}, {62, SHIFT, 13}, {67, SHIFT, 14}, {71, SHIFT, 15}, {74, SHIFT, 16}, {75, SHIFT, 17}, {78, SHIFT, 18}, {80, SHIFT, 19}, {87, SHIFT, 54}, },
			{{-1, ERROR, 36}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 38}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, },
			{{-1, ERROR, 39}, {18, SHIFT, 112}, },
			{{-1, ERROR, 40}, {16, SHIFT, 113}, },
			{{-1, ERROR, 41}, {87, SHIFT, 114}, },
			{{-1, ERROR, 42}, {18, SHIFT, 116}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 45}, {16, SHIFT, 119}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 47}, {18, SHIFT, 121}, },
			{{-1, ERROR, 48}, {27, SHIFT, 122}, },
			{{-1, REDUCE, 78}, {20, SHIFT, 123}, {25, SHIFT, 124}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 49}, {23, SHIFT, 126}, },
			{{-1, ERROR, 52}, {87, SHIFT, 127}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 55}, {87, SHIFT, 49}, },
			{{-1, REDUCE, 184}, },
			{{-1, REDUCE, 179}, },
			{{-1, ERROR, 58}, {0, SHIFT, 129}, },
			{{-1, REDUCE, 182}, },
			{{-1, REDUCE, 177}, },
			{{-1, REDUCE, 181}, },
			{{-1, REDUCE, 178}, },
			{{-1, REDUCE, 176}, },
			{{-1, ERROR, 64}, {21, SHIFT, 130}, },
			{{-1, ERROR, 65}, {0, SHIFT, 57}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 66}, {0, SHIFT, 57}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 67}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 69}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 70}, {18, SHIFT, 140}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 72}, {16, SHIFT, 141}, },
			{{-1, ERROR, 73}, {18, SHIFT, 142}, },
			{{-1, ERROR, 74}, {26, SHIFT, 143}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 76}, {16, SHIFT, 145}, },
			{{-1, ERROR, 77}, {87, SHIFT, 146}, },
			{{-1, ERROR, 78}, {26, SHIFT, 143}, },
			{{-1, ERROR, 79}, {16, SHIFT, 148}, },
			{{-1, REDUCE, 139}, },
			{{-1, ERROR, 81}, {16, SHIFT, 149}, },
			{{-1, ERROR, 82}, {16, SHIFT, 150}, },
			{{-1, ERROR, 83}, {87, SHIFT, 151}, },
			{{-1, REDUCE, 138}, },
			{{-1, ERROR, 85}, {87, SHIFT, 152}, },
			{{-1, ERROR, 86}, {87, SHIFT, 152}, },
			{{-1, REDUCE, 84}, {16, SHIFT, 156}, {20, SHIFT, 157}, {27, SHIFT, 158}, {87, REDUCE, 59}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 89}, {19, SHIFT, 160}, },
			{{-1, REDUCE, 69}, {22, SHIFT, 161}, },
			{{-1, REDUCE, 136}, {1, SHIFT, 162}, {24, SHIFT, 163}, {25, SHIFT, 164}, {28, SHIFT, 165}, {29, SHIFT, 166}, {31, SHIFT, 167}, {32, SHIFT, 168}, {33, SHIFT, 169}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 72}, {81, SHIFT, 170}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 151}, {3, SHIFT, 171}, },
			{{-1, REDUCE, 153}, {4, SHIFT, 172}, {5, SHIFT, 173}, },
			{{-1, REDUCE, 156}, {6, SHIFT, 174}, },
			{{-1, REDUCE, 158}, {13, SHIFT, 175}, {14, SHIFT, 176}, {15, SHIFT, 177}, },
			{{-1, REDUCE, 162}, {7, SHIFT, 178}, },
			{{-1, REDUCE, 164}, {8, SHIFT, 179}, },
			{{-1, REDUCE, 166}, {10, SHIFT, 180}, },
			{{-1, REDUCE, 168}, {9, SHIFT, 181}, },
			{{-1, REDUCE, 170}, {11, SHIFT, 182}, },
			{{-1, REDUCE, 172}, {12, SHIFT, 183}, },
			{{-1, REDUCE, 174}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 113}, {17, SHIFT, 185}, {87, SHIFT, 114}, },
			{{-1, REDUCE, 40}, {23, SHIFT, 187}, },
			{{-1, ERROR, 115}, {19, SHIFT, 188}, },
			{{-1, ERROR, 116}, {87, SHIFT, 114}, },
			{{-1, ERROR, 117}, {19, SHIFT, 190}, },
			{{-1, ERROR, 118}, {19, SHIFT, 191}, },
			{{-1, ERROR, 119}, {17, SHIFT, 192}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {54, SHIFT, 7}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {75, SHIFT, 17}, {87, SHIFT, 54}, },
			{{-1, ERROR, 120}, {19, SHIFT, 195}, },
			{{-1, REDUCE, 44}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {54, SHIFT, 7}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {75, SHIFT, 17}, {87, SHIFT, 54}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 123}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, },
			{{-1, ERROR, 124}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {20, SHIFT, 200}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 126}, {87, SHIFT, 49}, },
			{{-1, ERROR, 127}, {16, SHIFT, 203}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 180}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 131}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 84}, {20, SHIFT, 157}, },
			{{-1, REDUCE, 136}, {24, SHIFT, 163}, {32, SHIFT, 204}, {33, SHIFT, 205}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 174}, {30, SHIFT, 206}, },
			{{-1, ERROR, 137}, {17, SHIFT, 207}, },
			{{-1, ERROR, 138}, {19, SHIFT, 208}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 141}, {87, SHIFT, 152}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {85, SHIFT, 212}, {87, SHIFT, 87}, },
			{{-1, ERROR, 144}, {64, SHIFT, 214}, },
			{{-1, ERROR, 145}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 147}, {52, SHIFT, 216}, },
			{{-1, ERROR, 148}, {87, SHIFT, 152}, },
			{{-1, ERROR, 149}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 150}, {89, SHIFT, 219}, },
			{{-1, ERROR, 151}, {16, SHIFT, 220}, },
			{{-1, REDUCE, 84}, {20, SHIFT, 221}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 76}, {23, SHIFT, 222}, {24, SHIFT, 163}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 156}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {17, SHIFT, 223}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 157}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 158}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {42, SHIFT, 71}, {44, SHIFT, 72}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {55, SHIFT, 78}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 227}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 162}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 163}, {87, SHIFT, 233}, },
			{{-1, ERROR, 164}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 167}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 168}, {0, SHIFT, 57}, {5, SHIFT, 58}, {13, SHIFT, 236}, {20, SHIFT, 237}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, ERROR, 169}, {0, SHIFT, 57}, {5, SHIFT, 58}, {13, SHIFT, 243}, {20, SHIFT, 244}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, ERROR, 170}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {42, SHIFT, 71}, {44, SHIFT, 72}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {55, SHIFT, 78}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 227}, },
			{{-1, ERROR, 171}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 172}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 173}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 174}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 175}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 176}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 177}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 178}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 179}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 180}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 181}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 182}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 183}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 184}, {19, SHIFT, 260}, },
			{{-1, ERROR, 185}, {18, SHIFT, 261}, },
			{{-1, ERROR, 186}, {17, SHIFT, 262}, },
			{{-1, ERROR, 187}, {87, SHIFT, 114}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 189}, {19, SHIFT, 264}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 192}, {18, SHIFT, 265}, {69, SHIFT, 38}, {72, SHIFT, 266}, },
			{{-1, ERROR, 193}, {17, SHIFT, 269}, },
			{{-1, REDUCE, 28}, {22, SHIFT, 270}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 196}, {19, SHIFT, 271}, },
			{{-1, REDUCE, 45}, {22, SHIFT, 272}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 199}, {21, SHIFT, 273}, },
			{{-1, ERROR, 200}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 203}, {17, SHIFT, 275}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {54, SHIFT, 7}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {75, SHIFT, 17}, {87, SHIFT, 54}, },
			{{-1, ERROR, 204}, {20, SHIFT, 237}, },
			{{-1, ERROR, 205}, {20, SHIFT, 244}, },
			{{-1, ERROR, 206}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 115}, },
			{{-1, ERROR, 209}, {19, SHIFT, 278}, },
			{{-1, ERROR, 210}, {17, SHIFT, 279}, {24, SHIFT, 163}, },
			{{-1, ERROR, 211}, {19, SHIFT, 280}, },
			{{-1, ERROR, 212}, {87, SHIFT, 281}, },
			{{-1, REDUCE, 129}, {26, SHIFT, 143}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 215}, {17, SHIFT, 283}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 217}, {17, SHIFT, 284}, {24, SHIFT, 163}, },
			{{-1, ERROR, 218}, {17, SHIFT, 285}, },
			{{-1, ERROR, 219}, {17, SHIFT, 286}, {23, SHIFT, 287}, },
			{{-1, ERROR, 220}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {17, SHIFT, 288}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 221}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 222}, {87, SHIFT, 152}, },
			{{-1, REDUCE, 127}, },
			{{-1, ERROR, 224}, {17, SHIFT, 293}, },
			{{-1, REDUCE, 42}, {23, SHIFT, 294}, },
			{{-1, ERROR, 226}, {21, SHIFT, 295}, },
			{{-1, REDUCE, 84}, {16, SHIFT, 156}, {20, SHIFT, 157}, {27, SHIFT, 158}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 100}, {16, SHIFT, 296}, {23, SHIFT, 297}, },
			{{-1, REDUCE, 86}, {20, SHIFT, 221}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 236}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, ERROR, 237}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, ERROR, 238}, {16, SHIFT, 301}, },
			{{-1, REDUCE, 105}, {24, SHIFT, 163}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 102}, {16, SHIFT, 302}, {23, SHIFT, 303}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 243}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, ERROR, 244}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 152}, },
			{{-1, REDUCE, 154}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 165}, },
			{{-1, REDUCE, 167}, },
			{{-1, REDUCE, 169}, },
			{{-1, REDUCE, 171}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 262}, {18, SHIFT, 307}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 266}, {16, SHIFT, 309}, },
			{{-1, ERROR, 267}, {18, SHIFT, 310}, {72, SHIFT, 266}, },
			{{-1, ERROR, 268}, {18, SHIFT, 312}, },
			{{-1, ERROR, 269}, {18, SHIFT, 313}, {69, SHIFT, 38}, {72, SHIFT, 266}, },
			{{-1, ERROR, 270}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {54, SHIFT, 7}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {75, SHIFT, 17}, {87, SHIFT, 54}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 44}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {54, SHIFT, 7}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {75, SHIFT, 17}, {87, SHIFT, 54}, },
			{{-1, REDUCE, 80}, {25, SHIFT, 124}, },
			{{-1, ERROR, 274}, {21, SHIFT, 319}, },
			{{-1, ERROR, 275}, {18, SHIFT, 320}, {69, SHIFT, 38}, {72, SHIFT, 266}, },
			{{-1, ERROR, 276}, {17, SHIFT, 323}, },
			{{-1, ERROR, 277}, {27, SHIFT, 324}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 281}, {86, SHIFT, 325}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 287}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 143}, {69, SHIFT, 38}, },
			{{-1, ERROR, 289}, {17, SHIFT, 328}, },
			{{-1, REDUCE, 100}, {23, SHIFT, 297}, },
			{{-1, ERROR, 291}, {21, SHIFT, 329}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 128}, },
			{{-1, ERROR, 294}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 88}, {36, SHIFT, 331}, },
			{{-1, ERROR, 296}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 297}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 299}, {14, SHIFT, 334}, },
			{{-1, ERROR, 300}, {21, SHIFT, 335}, },
			{{-1, ERROR, 301}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 302}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, ERROR, 303}, {0, SHIFT, 57}, {5, SHIFT, 58}, {34, SHIFT, 59}, {50, SHIFT, 238}, {51, SHIFT, 60}, {70, SHIFT, 61}, {76, SHIFT, 62}, {79, SHIFT, 63}, {87, SHIFT, 152}, },
			{{-1, ERROR, 304}, {14, SHIFT, 339}, },
			{{-1, ERROR, 305}, {21, SHIFT, 340}, },
			{{-1, ERROR, 306}, {19, SHIFT, 341}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 308}, {19, SHIFT, 343}, },
			{{-1, ERROR, 309}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 311}, {18, SHIFT, 346}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 314}, {18, SHIFT, 349}, {72, SHIFT, 266}, },
			{{-1, ERROR, 315}, {18, SHIFT, 351}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 319}, {65, SHIFT, 352}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 321}, {18, SHIFT, 354}, {72, SHIFT, 266}, },
			{{-1, ERROR, 322}, {18, SHIFT, 356}, },
			{{-1, ERROR, 323}, {18, SHIFT, 357}, {69, SHIFT, 38}, {72, SHIFT, 266}, },
			{{-1, ERROR, 324}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 131}, {34, SHIFT, 59}, {44, SHIFT, 72}, {49, SHIFT, 76}, {51, SHIFT, 60}, {59, SHIFT, 79}, {63, SHIFT, 80}, {66, SHIFT, 81}, {70, SHIFT, 61}, {73, SHIFT, 83}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {87, SHIFT, 132}, },
			{{-1, ERROR, 325}, {87, SHIFT, 361}, },
			{{-1, ERROR, 326}, {17, SHIFT, 362}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 144}, {69, SHIFT, 38}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 331}, {87, SHIFT, 364}, },
			{{-1, ERROR, 332}, {17, SHIFT, 365}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 336}, {17, SHIFT, 366}, },
			{{-1, ERROR, 337}, {17, SHIFT, 367}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 342}, {19, SHIFT, 368}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 344}, {17, SHIFT, 369}, },
			{{-1, ERROR, 345}, {19, SHIFT, 370}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 347}, {19, SHIFT, 372}, },
			{{-1, ERROR, 348}, {19, SHIFT, 373}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 350}, {18, SHIFT, 375}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 352}, {18, SHIFT, 377}, },
			{{-1, ERROR, 353}, {19, SHIFT, 378}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 355}, {18, SHIFT, 380}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 358}, {18, SHIFT, 383}, {72, SHIFT, 266}, },
			{{-1, ERROR, 359}, {18, SHIFT, 385}, },
			{{-1, ERROR, 360}, {17, SHIFT, 386}, },
			{{-1, ERROR, 361}, {18, SHIFT, 387}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 371}, {19, SHIFT, 388}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 374}, {19, SHIFT, 389}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 376}, {19, SHIFT, 391}, },
			{{-1, ERROR, 377}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {87, SHIFT, 54}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 379}, {19, SHIFT, 394}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 381}, {19, SHIFT, 396}, },
			{{-1, ERROR, 382}, {19, SHIFT, 397}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 384}, {18, SHIFT, 399}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 390}, {19, SHIFT, 402}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 60}, {23, SHIFT, 403}, },
			{{-1, ERROR, 393}, {19, SHIFT, 404}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 395}, {19, SHIFT, 405}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 398}, {19, SHIFT, 406}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 57}, {1, SHIFT, 65}, {2, SHIFT, 66}, {5, SHIFT, 58}, {16, SHIFT, 67}, {18, SHIFT, 68}, {34, SHIFT, 59}, {38, SHIFT, 69}, {39, SHIFT, 70}, {40, SHIFT, 3}, {41, SHIFT, 4}, {42, SHIFT, 71}, {43, SHIFT, 5}, {44, SHIFT, 72}, {45, SHIFT, 6}, {46, SHIFT, 73}, {47, SHIFT, 74}, {48, SHIFT, 75}, {49, SHIFT, 76}, {51, SHIFT, 60}, {53, SHIFT, 77}, {54, SHIFT, 7}, {55, SHIFT, 78}, {58, SHIFT, 10}, {59, SHIFT, 79}, {60, SHIFT, 53}, {63, SHIFT, 80}, {66, SHIFT, 81}, {67, SHIFT, 14}, {68, SHIFT, 82}, {70, SHIFT, 61}, {73, SHIFT, 83}, {74, SHIFT, 16}, {75, SHIFT, 17}, {76, SHIFT, 62}, {77, SHIFT, 84}, {79, SHIFT, 63}, {82, SHIFT, 85}, {83, SHIFT, 86}, {87, SHIFT, 87}, },
			{{-1, ERROR, 400}, {19, SHIFT, 408}, },
			{{-1, ERROR, 401}, {19, SHIFT, 409}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 403}, {40, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {45, SHIFT, 6}, {58, SHIFT, 10}, {60, SHIFT, 53}, {67, SHIFT, 14}, {74, SHIFT, 16}, {87, SHIFT, 54}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 407}, {19, SHIFT, 411}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 131}, {26, SHIFT, 143}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 132}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 23}, {35, 56}, },
			{{-1, 24}, },
			{{-1, 193}, {203, 276}, {270, 316}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 115}, {113, 186}, {116, 189}, {187, 263}, },
			{{-1, 224}, {294, 330}, },
			{{-1, 196}, {272, 317}, },
			{{-1, 88}, {0, 31}, {35, 31}, {119, 194}, {121, 197}, {203, 194}, {270, 194}, {272, 197}, },
			{{-1, 50}, {55, 128}, {126, 202}, },
			{{-1, 32}, {34, 55}, {377, 392}, {403, 392}, },
			{{-1, 393}, {403, 410}, },
			{{-1, 33}, },
			{{-1, 39}, {192, 267}, {269, 314}, {275, 321}, {288, 327}, {323, 358}, {328, 363}, },
			{{-1, 268}, {267, 311}, {269, 315}, {275, 322}, {314, 350}, {321, 355}, {323, 359}, {358, 384}, },
			{{-1, 34}, },
			{{-1, 89}, {43, 117}, {44, 118}, {46, 120}, {68, 138}, {112, 184}, {122, 198}, {140, 209}, {142, 211}, {143, 213}, {161, 229}, {261, 306}, {265, 308}, {307, 342}, {310, 345}, {312, 347}, {313, 348}, {320, 353}, {346, 371}, {349, 374}, {351, 376}, {354, 379}, {356, 381}, {357, 382}, {375, 390}, {380, 395}, {383, 398}, {385, 400}, {387, 401}, {399, 407}, },
			{{-1, 90}, },
			{{-1, 153}, {86, 155}, {222, 292}, },
			{{-1, 51}, },
			{{-1, 125}, {273, 318}, },
			{{-1, 133}, {37, 91}, {43, 91}, {44, 91}, {46, 91}, {68, 91}, {85, 154}, {86, 154}, {112, 91}, {122, 91}, {140, 91}, {141, 210}, {142, 91}, {143, 91}, {148, 217}, {158, 91}, {161, 91}, {168, 239}, {169, 239}, {170, 91}, {222, 154}, {236, 239}, {237, 239}, {243, 239}, {244, 239}, {261, 91}, {265, 91}, {302, 239}, {303, 239}, {307, 91}, {310, 91}, {312, 91}, {313, 91}, {320, 91}, {346, 91}, {349, 91}, {351, 91}, {354, 91}, {356, 91}, {357, 91}, {375, 91}, {380, 91}, {383, 91}, {385, 91}, {387, 91}, {399, 91}, },
			{{-1, 159}, {233, 298}, },
			{{-1, -1}, },
			{{-1, 92}, },
			{{-1, 93}, },
			{{-1, 94}, },
			{{-1, 230}, {167, 235}, },
			{{-1, 231}, {220, 289}, {287, 326}, {296, 332}, {297, 333}, },
			{{-1, 240}, {169, 245}, {236, 299}, {237, 300}, {243, 304}, {244, 305}, {302, 337}, {303, 338}, },
			{{-1, 241}, },
			{{-1, 95}, },
			{{-1, 96}, {158, 228}, {170, 246}, },
			{{-1, 144}, {78, 147}, {213, 282}, {409, 412}, },
			{{-1, 97}, {65, 134}, {66, 135}, },
			{{-1, 98}, },
			{{-1, 99}, {171, 247}, },
			{{-1, 100}, {172, 248}, {173, 249}, },
			{{-1, 101}, {174, 250}, },
			{{-1, 102}, {175, 251}, {176, 252}, {177, 253}, },
			{{-1, 103}, {178, 254}, },
			{{-1, 104}, {179, 255}, },
			{{-1, 105}, {180, 256}, },
			{{-1, 106}, {181, 257}, },
			{{-1, 107}, {182, 258}, },
			{{-1, 108}, {67, 136}, {183, 259}, {206, 277}, {324, 360}, },
			{{-1, 109}, {67, 137}, {69, 139}, {124, 201}, {131, 137}, {145, 215}, {149, 218}, {156, 225}, {157, 226}, {162, 232}, {164, 234}, {167, 232}, {220, 290}, {221, 291}, {287, 290}, {294, 225}, {296, 290}, {297, 290}, {301, 336}, {309, 344}, },
			{{-1, 110}, {36, 64}, {38, 111}, {123, 199}, {168, 242}, {169, 242}, {200, 274}, {236, 242}, {237, 242}, {243, 242}, {244, 242}, {302, 242}, {303, 242}, },
			{{-1, 35}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: separator, 'active', 'bit', 'bool', 'byte', 'chan', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', name",
			"expecting: separator, 'active', 'bit', 'bool', 'byte', 'chan', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', name, EOF",
			"expecting: '[', 'proctype'",
			"expecting: '}', ',', name",
			"expecting: 'bit', 'bool', 'byte', 'chan', 'int', 'mtype', 'pid', 'short', name",
			"expecting: '{', 'priority'",
			"expecting: name",
			"expecting: '{', '=', name",
			"expecting: '{'",
			"expecting: 'template', name",
			"expecting: EOF",
			"expecting: 'proctype'",
			"expecting: number, '-', '_', 'false', '_pid', 'skip', 'true'",
			"expecting: number, '!', '~', '-', '(', '{', '}', '_', 'assert', 'atomic', 'bit', 'bool', 'break', 'byte', chanop, 'chan', 'd_step', 'do', 'else', 'enabled', 'false', 'goto', 'hidden', 'if', 'int', 'len', 'mtype', 'np_', 'pc_value', 'pid', print, '_pid', 'run', 'short', 'show', 'skip', 'timeout', 'true', 'xr', 'xs', name",
			"expecting: '('",
			"expecting: ':'",
			"expecting: ')', '}', '[', separator, ',', '=', '::', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', name, EOF",
			"expecting: ')', '}', separator, '::', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', name, EOF",
			"expecting: ')', '}', separator, ',', '::', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', name, EOF",
			"expecting: multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '{', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'provided', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: number",
			"expecting: ']'",
			"expecting: number, '-', '(', '_', chanop, 'enabled', 'false', 'len', 'np_', 'pc_value', '_pid', 'run', 'skip', 'timeout', 'true', name",
			"expecting: number, '!', '~', '-', '(', '_', chanop, 'enabled', 'false', 'len', 'np_', 'pc_value', '_pid', 'run', 'skip', 'timeout', 'true', name",
			"expecting: '}', separator, '::', 'fi', 'od', 'unless', EOF",
			"expecting: '::'",
			"expecting: multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '!', multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', '}', '[', separator, '.', '=', '::', ':', '++', '--', '!!', '??', '?', 'fi', 'od', 'unless', name, EOF",
			"expecting: '}', separator, '::', 'fi', 'od', EOF",
			"expecting: '}'",
			"expecting: '!', multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '}', separator, '.', '=', '::', '++', '--', '!!', '??', '?', 'fi', 'od', 'unless', EOF",
			"expecting: '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: eqop, '&', '|', '^', '&&', '||', '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '&', '|', '^', '&&', '||', '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '|', '^', '&&', '||', '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '|', '&&', '||', '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '&&', '||', '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '||', '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '(', ')', '}', ']', separator, ',', '::', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: ')', name",
			"expecting: ')', '}', ','",
			"expecting: ')', 'bit', 'bool', 'byte', 'chan', 'hidden', 'int', 'mtype', 'pid', 'short', 'show', name",
			"expecting: '}', 'bit', 'bool', 'byte', 'chan', 'hidden', 'int', 'mtype', 'pid', 'short', 'show', name",
			"expecting: number, '!', '~', '-', '(', '{', '_', 'assert', 'atomic', 'bit', 'bool', 'break', 'byte', chanop, 'chan', 'd_step', 'do', 'else', 'enabled', 'false', 'goto', 'hidden', 'if', 'int', 'len', 'mtype', 'np_', 'pc_value', 'pid', print, '_pid', 'run', 'short', 'show', 'skip', 'timeout', 'true', 'xr', 'xs', name, EOF",
			"expecting: number, '!', '~', '-', '(', '[', '_', chanop, 'enabled', 'false', 'len', 'np_', 'pc_value', '_pid', 'run', 'skip', 'timeout', 'true', name",
			"expecting: multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', '[', ']', separator, ',', '.', '::', ':', '->', '??', '?', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '.', '::', ':', '->', '??', '?', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: ')', '->'",
			"expecting: ')'",
			"expecting: number, '!', '~', '-', '(', '{', '::', '_', 'assert', 'atomic', 'bit', 'bool', 'break', 'byte', chanop, 'chan', 'd_step', 'do', 'else', 'enabled', 'false', 'fi', 'goto', 'hidden', 'if', 'int', 'len', 'mtype', 'np_', 'od', 'pc_value', 'pid', print, '_pid', 'run', 'short', 'show', 'skip', 'timeout', 'true', 'xr', 'xs', 'for', name",
			"expecting: 'od'",
			"expecting: 'fi'",
			"expecting: string",
			"expecting: '>', '(', ')', '}', '[', ']', separator, ',', '.', '::', 'fi', 'od', 'unless', EOF",
			"expecting: '}', separator, ',', '.', '::', 'fi', 'od', EOF",
			"expecting: number, '!', '~', '-', '(', ')', '_', chanop, 'enabled', 'false', 'len', 'np_', 'pc_value', '_pid', 'run', 'skip', 'timeout', 'true', name",
			"expecting: number, '!', '~', '-', '(', '{', '_', 'assert', 'atomic', 'break', chanop, 'd_step', 'do', 'else', 'enabled', 'false', 'goto', 'if', 'len', 'np_', 'pc_value', print, '_pid', 'run', 'skip', 'timeout', 'true', name",
			"expecting: '!', multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '.', '=', '::', ':', '++', '--', '->', '!!', '??', '?', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: number, '!', '~', '-', '(', '{', '}', '::', '_', 'assert', 'atomic', 'bit', 'bool', 'break', 'byte', chanop, 'chan', 'd_step', 'do', 'else', 'enabled', 'false', 'fi', 'goto', 'hidden', 'if', 'int', 'len', 'mtype', 'np_', 'od', 'pc_value', 'pid', print, '_pid', 'run', 'short', 'show', 'skip', 'timeout', 'true', 'xr', 'xs', name, EOF",
			"expecting: number, '-', '<', '[', '_', 'eval', 'false', '_pid', 'skip', 'true', name",
			"expecting: '{', 'priority', 'provided'",
			"expecting: ')', separator",
			"expecting: '}', separator",
			"expecting: '['",
			"expecting: ')', '.'",
			"expecting: '::', 'fi', 'od'",
			"expecting: ')', ','",
			"expecting: '!', multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', '}', '[', separator, '.', '=', '::', ':', '++', '--', '!!', '??', '?', 'fi', 'od', 'unless', EOF",
			"expecting: '}', '::', 'fi', 'od', EOF",
			"expecting: '(', '}', separator, ',', '::', 'fi', 'od', 'unless', EOF",
			"expecting: '!', multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', '[', ']', separator, ',', '.', '=', '::', ':', '++', '--', '->', '!!', '??', '?', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: number, '-', '_', 'eval', 'false', '_pid', 'skip', 'true', name",
			"expecting: '>', '(', ')', '}', ']', separator, ',', '.', '::', 'fi', 'od', 'unless', EOF",
			"expecting: '>', '(', ')', '}', ']', separator, ',', '::', 'fi', 'od', 'unless', EOF",
			"expecting: '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: ')', '}'",
			"expecting: '{', 'provided'",
			"expecting: 'bit', 'bool', 'byte', 'chan', 'hidden', 'int', 'mtype', 'pid', 'short', 'show', name",
			"expecting: ')', '}', separator, ',', '=', '::', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', name, EOF",
			"expecting: 'over'",
			"expecting: 'fi', 'od'",
			"expecting: multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '::', ':', '->', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'priority', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: ')', '}', separator, ',', '::', 'fi', 'od', 'unless', EOF",
			"expecting: '!', multop, '+', '-', shiftop, eqop, '&', '|', '^', '&&', '||', '<', '>', relop, '(', ')', '}', ']', separator, ',', '.', '=', '::', ':', '++', '--', '->', '!!', '??', '?', '@', 'active', 'bit', 'bool', 'byte', 'chan', 'fi', 'hidden', 'init', 'inline', 'int', 'mtype', 'never', 'notrace', 'od', 'pid', 'proctype', 'short', 'show', 'trace', 'typedef', 'unless', name, EOF",
			"expecting: '>'",
			"expecting: 'of'",
			"expecting: ')', '}', separator, '::', 'fi', 'od', 'unless', EOF",
			"expecting: '>', ')', '}', ']', separator, '::', 'fi', 'od', 'unless', EOF",
			"expecting: '}', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 3, 7, 8, 8, 3, 6, 3, 4, 8, 6, 9, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 11, 4, 1, 12, 13, 12, 8, 14, 6, 8, 13, 13, 14, 13, 8, 15, 16, 17, 18, 6, 3, 3, 6, 1, 19, 20, 19, 19, 19, 19, 19, 21, 22, 22, 23, 13, 23, 8, 24, 14, 8, 25, 24, 14, 6, 25, 14, 26, 14, 14, 6, 26, 6, 6, 27, 28, 29, 28, 30, 24, 24, 26, 24, 24, 26, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 24, 26, 19, 13, 41, 42, 29, 6, 29, 29, 43, 29, 44, 45, 12, 46, 18, 6, 14, 17, 19, 11, 23, 47, 48, 26, 26, 49, 50, 29, 24, 13, 6, 13, 51, 52, 23, 24, 53, 6, 23, 54, 14, 55, 28, 56, 28, 57, 23, 58, 59, 1, 60, 23, 6, 23, 24, 24, 23, 61, 61, 58, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 29, 8, 50, 6, 1, 29, 1, 1, 62, 50, 63, 1, 29, 64, 10, 21, 12, 18, 17, 43, 65, 65, 23, 26, 24, 29, 66, 29, 6, 67, 24, 50, 24, 66, 50, 68, 57, 23, 6, 24, 50, 68, 21, 69, 24, 70, 24, 24, 71, 72, 24, 24, 73, 73, 14, 74, 24, 75, 75, 73, 73, 24, 28, 31, 32, 32, 33, 34, 34, 34, 35, 36, 37, 38, 39, 76, 1, 13, 8, 77, 1, 13, 14, 78, 8, 62, 79, 1, 44, 80, 21, 62, 50, 15, 24, 26, 24, 81, 82, 26, 26, 26, 24, 23, 83, 50, 84, 21, 28, 24, 23, 85, 23, 23, 59, 86, 21, 23, 73, 73, 86, 21, 29, 13, 29, 23, 13, 8, 13, 13, 78, 8, 50, 29, 18, 87, 13, 78, 8, 62, 23, 6, 50, 26, 83, 59, 50, 6, 50, 88, 24, 26, 50, 50, 89, 24, 26, 1, 29, 1, 50, 29, 13, 29, 29, 13, 8, 13, 8, 29, 13, 8, 13, 13, 78, 8, 50, 8, 24, 26, 26, 24, 75, 89, 1, 8, 1, 29, 1, 1, 29, 13, 29, 4, 1, 29, 13, 29, 29, 13, 8, 13, 40, 13, 1, 1, 29, 1, 90, 29, 1, 29, 1, 1, 29, 13, 29, 29, 1, 4, 18, 1, 1, 29, 1, 67, 29, 1, 82, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
