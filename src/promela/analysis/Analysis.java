/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.analysis;

import src.promela.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseANormalSpec(ANormalSpec node);
    void caseATemplateSpec(ATemplateSpec node);
    void caseATemplate(ATemplate node);
    void caseAUtypeModule(AUtypeModule node);
    void caseAMtypeModule(AMtypeModule node);
    void caseAVarschansModule(AVarschansModule node);
    void caseAProctypeModule(AProctypeModule node);
    void caseAInitModule(AInitModule node);
    void caseANeverModule(ANeverModule node);
    void caseATraceModule(ATraceModule node);
    void caseAInlineModule(AInlineModule node);
    void caseAProctype(AProctype node);
    void caseAInit(AInit node);
    void caseANever(ANever node);
    void caseATraceTrace(ATraceTrace node);
    void caseANotraceTrace(ANotraceTrace node);
    void caseAUtype(AUtype node);
    void caseAMtype(AMtype node);
    void caseAInline(AInline node);
    void caseAOneNameLst(AOneNameLst node);
    void caseAManyNameLst(AManyNameLst node);
    void caseAOneExprLst(AOneExprLst node);
    void caseAManyExprLst(AManyExprLst node);
    void caseAOneDeclLst(AOneDeclLst node);
    void caseAManyDeclLst(AManyDeclLst node);
    void caseAOneDecl(AOneDecl node);
    void caseAOneIvarLst(AOneIvarLst node);
    void caseAManyIvarLst(AManyIvarLst node);
    void caseABitTypename(ABitTypename node);
    void caseABoolTypename(ABoolTypename node);
    void caseAByteTypename(AByteTypename node);
    void caseAPidTypename(APidTypename node);
    void caseAShortTypename(AShortTypename node);
    void caseAIntTypename(AIntTypename node);
    void caseAMtypeTypename(AMtypeTypename node);
    void caseAChanTypename(AChanTypename node);
    void caseAUnameTypename(AUnameTypename node);
    void caseAOneTypenamelst(AOneTypenamelst node);
    void caseAManyTypenamelst(AManyTypenamelst node);
    void caseAOneActive(AOneActive node);
    void caseAManyActive(AManyActive node);
    void caseAPriority(APriority node);
    void caseAEnabler(AEnabler node);
    void caseAHiddenVisible(AHiddenVisible node);
    void caseAShowVisible(AShowVisible node);
    void caseANullSequence(ANullSequence node);
    void caseAOneSequence(AOneSequence node);
    void caseAManySequence(AManySequence node);
    void caseADeclarationStep(ADeclarationStep node);
    void caseAStmntStep(AStmntStep node);
    void caseAUnlessStep(AUnlessStep node);
    void caseAExreceiveStep(AExreceiveStep node);
    void caseAExsendStep(AExsendStep node);
    void caseAOneVarreflst(AOneVarreflst node);
    void caseAManyVarreflst(AManyVarreflst node);
    void caseASingleIvar(ASingleIvar node);
    void caseAArrayIvar(AArrayIvar node);
    void caseAVariableIvarassignment(AVariableIvarassignment node);
    void caseAChannelIvarassignment(AChannelIvarassignment node);
    void caseASingleVarref(ASingleVarref node);
    void caseARecordVarref(ARecordVarref node);
    void caseAArrayref(AArrayref node);
    void caseARecordref(ARecordref node);
    void caseAFifoSend(AFifoSend node);
    void caseASortedSend(ASortedSend node);
    void caseAFifoReceive(AFifoReceive node);
    void caseARandomReceive(ARandomReceive node);
    void caseAFifopollReceive(AFifopollReceive node);
    void caseARandompollReceive(ARandompollReceive node);
    void caseAFifoRecvPoll(AFifoRecvPoll node);
    void caseARandomRecvPoll(ARandomRecvPoll node);
    void caseAListSendArgs(AListSendArgs node);
    void caseAHeadedlistSendArgs(AHeadedlistSendArgs node);
    void caseAOneArgLst(AOneArgLst node);
    void caseAManyArgLst(AManyArgLst node);
    void caseAOneRecvArgs(AOneRecvArgs node);
    void caseAManyRecvArgs(AManyRecvArgs node);
    void caseAManyheadedRecvArgs(AManyheadedRecvArgs node);
    void caseAVarRecvArg(AVarRecvArg node);
    void caseAEvalRecvArg(AEvalRecvArg node);
    void caseAConstRecvArg(AConstRecvArg node);
    void caseAAssignmentAssignment(AAssignmentAssignment node);
    void caseAIncrementAssignment(AIncrementAssignment node);
    void caseADecrementAssignment(ADecrementAssignment node);
    void caseAIfStmnt(AIfStmnt node);
    void caseADoStmnt(ADoStmnt node);
    void caseAAtomicStmnt(AAtomicStmnt node);
    void caseADstepStmnt(ADstepStmnt node);
    void caseABracesStmnt(ABracesStmnt node);
    void caseASendStmnt(ASendStmnt node);
    void caseAReceiveStmnt(AReceiveStmnt node);
    void caseAAssignStmnt(AAssignStmnt node);
    void caseAElseStmnt(AElseStmnt node);
    void caseABreakStmnt(ABreakStmnt node);
    void caseAGotoStmnt(AGotoStmnt node);
    void caseALabelStmnt(ALabelStmnt node);
    void caseAPrintStmnt(APrintStmnt node);
    void caseAPrintwithargsStmnt(APrintwithargsStmnt node);
    void caseAAssertStmnt(AAssertStmnt node);
    void caseAExpressionStmnt(AExpressionStmnt node);
    void caseAInlineStmnt(AInlineStmnt node);
    void caseANormalOptions(ANormalOptions node);
    void caseATemplateOptions(ATemplateOptions node);
    void caseAParentheseFactor(AParentheseFactor node);
    void caseALengthFactor(ALengthFactor node);
    void caseARecvPollFactor(ARecvPollFactor node);
    void caseAVarrefFactor(AVarrefFactor node);
    void caseAConstFactor(AConstFactor node);
    void caseATimeoutFactor(ATimeoutFactor node);
    void caseANonprogressFactor(ANonprogressFactor node);
    void caseAEnabledFactor(AEnabledFactor node);
    void caseAPcValueFactor(APcValueFactor node);
    void caseARemoterefFactor(ARemoterefFactor node);
    void caseARunFactor(ARunFactor node);
    void caseAChanopFactor(AChanopFactor node);
    void caseASimpleUnExpr(ASimpleUnExpr node);
    void caseANotUnExpr(ANotUnExpr node);
    void caseAComplementUnExpr(AComplementUnExpr node);
    void caseASimpleMultExpr(ASimpleMultExpr node);
    void caseACompoundMultExpr(ACompoundMultExpr node);
    void caseASimpleAddExpr(ASimpleAddExpr node);
    void caseACompoundplusAddExpr(ACompoundplusAddExpr node);
    void caseACompoundminusAddExpr(ACompoundminusAddExpr node);
    void caseASimpleShiftExpr(ASimpleShiftExpr node);
    void caseACompoundShiftExpr(ACompoundShiftExpr node);
    void caseASimpleRelExpr(ASimpleRelExpr node);
    void caseACompoundrelopRelExpr(ACompoundrelopRelExpr node);
    void caseACompoundgtRelExpr(ACompoundgtRelExpr node);
    void caseACompoundltRelExpr(ACompoundltRelExpr node);
    void caseASimpleEqExpr(ASimpleEqExpr node);
    void caseACompoundEqExpr(ACompoundEqExpr node);
    void caseASimpleBitandExpr(ASimpleBitandExpr node);
    void caseACompoundBitandExpr(ACompoundBitandExpr node);
    void caseASimpleBitxorExpr(ASimpleBitxorExpr node);
    void caseACompoundBitxorExpr(ACompoundBitxorExpr node);
    void caseASimpleBitorExpr(ASimpleBitorExpr node);
    void caseACompoundBitorExpr(ACompoundBitorExpr node);
    void caseASimpleAndExpr(ASimpleAndExpr node);
    void caseACompoundAndExpr(ACompoundAndExpr node);
    void caseASimpleOrExpr(ASimpleOrExpr node);
    void caseACompoundOrExpr(ACompoundOrExpr node);
    void caseASimpleExpr(ASimpleExpr node);
    void caseAConditionalExpr(AConditionalExpr node);
    void caseATrueConst(ATrueConst node);
    void caseAFalseConst(AFalseConst node);
    void caseASkipConst(ASkipConst node);
    void caseANumberConst(ANumberConst node);
    void caseAPidConst(APidConst node);
    void caseAUnderscoreConst(AUnderscoreConst node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTTraditionalComment(TTraditionalComment node);
    void caseTEndOfLineComment(TEndOfLineComment node);
    void caseTNumber(TNumber node);
    void caseTBang(TBang node);
    void caseTComplement(TComplement node);
    void caseTMultop(TMultop node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTShiftop(TShiftop node);
    void caseTEqop(TEqop node);
    void caseTBitand(TBitand node);
    void caseTBitor(TBitor node);
    void caseTBitxor(TBitxor node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTRelop(TRelop node);
    void caseTLParenthese(TLParenthese node);
    void caseTRParenthese(TRParenthese node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTSeparator(TSeparator node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTColonColon(TColonColon node);
    void caseTColon(TColon node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTRightarrow(TRightarrow node);
    void caseTBangBang(TBangBang node);
    void caseTQueryQuery(TQueryQuery node);
    void caseTQuery(TQuery node);
    void caseTUnderscore(TUnderscore node);
    void caseTQuotes(TQuotes node);
    void caseTAt(TAt node);
    void caseTActivetok(TActivetok node);
    void caseTAssert(TAssert node);
    void caseTAtomic(TAtomic node);
    void caseTBit(TBit node);
    void caseTBool(TBool node);
    void caseTBreak(TBreak node);
    void caseTByte(TByte node);
    void caseTChanop(TChanop node);
    void caseTChan(TChan node);
    void caseTDStep(TDStep node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTEnabled(TEnabled node);
    void caseTEval(TEval node);
    void caseTFalse(TFalse node);
    void caseTFi(TFi node);
    void caseTGoto(TGoto node);
    void caseTHidden(THidden node);
    void caseTIf(TIf node);
    void caseTInittok(TInittok node);
    void caseTInlinetok(TInlinetok node);
    void caseTInt(TInt node);
    void caseTLen(TLen node);
    void caseTMtypetok(TMtypetok node);
    void caseTNevertok(TNevertok node);
    void caseTNotrace(TNotrace node);
    void caseTNp(TNp node);
    void caseTOd(TOd node);
    void caseTOf(TOf node);
    void caseTPcValue(TPcValue node);
    void caseTPid(TPid node);
    void caseTPrint(TPrint node);
    void caseTPrioritytok(TPrioritytok node);
    void caseTProcessid(TProcessid node);
    void caseTProctypetok(TProctypetok node);
    void caseTProvided(TProvided node);
    void caseTRun(TRun node);
    void caseTShort(TShort node);
    void caseTShow(TShow node);
    void caseTSkip(TSkip node);
    void caseTTimeout(TTimeout node);
    void caseTTracetok(TTracetok node);
    void caseTTrue(TTrue node);
    void caseTTypedef(TTypedef node);
    void caseTUnless(TUnless node);
    void caseTXr(TXr node);
    void caseTXs(TXs node);
    void caseTTemplatetok(TTemplatetok node);
    void caseTFor(TFor node);
    void caseTOver(TOver node);
    void caseTName(TName node);
    void caseTByteliteral(TByteliteral node);
    void caseTString(TString node);
    void caseEOF(EOF node);
}
