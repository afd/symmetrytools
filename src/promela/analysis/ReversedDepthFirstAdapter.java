/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.analysis;

import java.util.*;
import src.promela.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPSpec().apply(this);
        outStart(node);
    }

    public void inANormalSpec(ANormalSpec node)
    {
        defaultIn(node);
    }

    public void outANormalSpec(ANormalSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalSpec(ANormalSpec node)
    {
        inANormalSpec(node);
        {
            List<PModule> copy = new ArrayList<PModule>(node.getModule());
            Collections.reverse(copy);
            for(PModule e : copy)
            {
                e.apply(this);
            }
        }
        outANormalSpec(node);
    }

    public void inATemplateSpec(ATemplateSpec node)
    {
        defaultIn(node);
    }

    public void outATemplateSpec(ATemplateSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATemplateSpec(ATemplateSpec node)
    {
        inATemplateSpec(node);
        if(node.getTemplate() != null)
        {
            node.getTemplate().apply(this);
        }
        outATemplateSpec(node);
    }

    public void inATemplate(ATemplate node)
    {
        defaultIn(node);
    }

    public void outATemplate(ATemplate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATemplate(ATemplate node)
    {
        inATemplate(node);
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTemplatetok() != null)
        {
            node.getTemplatetok().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outATemplate(node);
    }

    public void inAUtypeModule(AUtypeModule node)
    {
        defaultIn(node);
    }

    public void outAUtypeModule(AUtypeModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUtypeModule(AUtypeModule node)
    {
        inAUtypeModule(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getUtype() != null)
        {
            node.getUtype().apply(this);
        }
        outAUtypeModule(node);
    }

    public void inAMtypeModule(AMtypeModule node)
    {
        defaultIn(node);
    }

    public void outAMtypeModule(AMtypeModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMtypeModule(AMtypeModule node)
    {
        inAMtypeModule(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getMtype() != null)
        {
            node.getMtype().apply(this);
        }
        outAMtypeModule(node);
    }

    public void inAVarschansModule(AVarschansModule node)
    {
        defaultIn(node);
    }

    public void outAVarschansModule(AVarschansModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarschansModule(AVarschansModule node)
    {
        inAVarschansModule(node);
        if(node.getDeclLst() != null)
        {
            node.getDeclLst().apply(this);
        }
        outAVarschansModule(node);
    }

    public void inAProctypeModule(AProctypeModule node)
    {
        defaultIn(node);
    }

    public void outAProctypeModule(AProctypeModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProctypeModule(AProctypeModule node)
    {
        inAProctypeModule(node);
        if(node.getProctype() != null)
        {
            node.getProctype().apply(this);
        }
        outAProctypeModule(node);
    }

    public void inAInitModule(AInitModule node)
    {
        defaultIn(node);
    }

    public void outAInitModule(AInitModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitModule(AInitModule node)
    {
        inAInitModule(node);
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        outAInitModule(node);
    }

    public void inANeverModule(ANeverModule node)
    {
        defaultIn(node);
    }

    public void outANeverModule(ANeverModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeverModule(ANeverModule node)
    {
        inANeverModule(node);
        if(node.getNever() != null)
        {
            node.getNever().apply(this);
        }
        outANeverModule(node);
    }

    public void inATraceModule(ATraceModule node)
    {
        defaultIn(node);
    }

    public void outATraceModule(ATraceModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATraceModule(ATraceModule node)
    {
        inATraceModule(node);
        if(node.getTrace() != null)
        {
            node.getTrace().apply(this);
        }
        outATraceModule(node);
    }

    public void inAInlineModule(AInlineModule node)
    {
        defaultIn(node);
    }

    public void outAInlineModule(AInlineModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInlineModule(AInlineModule node)
    {
        inAInlineModule(node);
        if(node.getInline() != null)
        {
            node.getInline().apply(this);
        }
        outAInlineModule(node);
    }

    public void inAProctype(AProctype node)
    {
        defaultIn(node);
    }

    public void outAProctype(AProctype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProctype(AProctype node)
    {
        inAProctype(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getEnabler() != null)
        {
            node.getEnabler().apply(this);
        }
        if(node.getPriority() != null)
        {
            node.getPriority().apply(this);
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getDeclLst() != null)
        {
            node.getDeclLst().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getProctypetok() != null)
        {
            node.getProctypetok().apply(this);
        }
        if(node.getActive() != null)
        {
            node.getActive().apply(this);
        }
        outAProctype(node);
    }

    public void inAInit(AInit node)
    {
        defaultIn(node);
    }

    public void outAInit(AInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInit(AInit node)
    {
        inAInit(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getPriority() != null)
        {
            node.getPriority().apply(this);
        }
        if(node.getInittok() != null)
        {
            node.getInittok().apply(this);
        }
        outAInit(node);
    }

    public void inANever(ANever node)
    {
        defaultIn(node);
    }

    public void outANever(ANever node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANever(ANever node)
    {
        inANever(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getNevertok() != null)
        {
            node.getNevertok().apply(this);
        }
        outANever(node);
    }

    public void inATraceTrace(ATraceTrace node)
    {
        defaultIn(node);
    }

    public void outATraceTrace(ATraceTrace node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATraceTrace(ATraceTrace node)
    {
        inATraceTrace(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getTracetok() != null)
        {
            node.getTracetok().apply(this);
        }
        outATraceTrace(node);
    }

    public void inANotraceTrace(ANotraceTrace node)
    {
        defaultIn(node);
    }

    public void outANotraceTrace(ANotraceTrace node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotraceTrace(ANotraceTrace node)
    {
        inANotraceTrace(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getNotrace() != null)
        {
            node.getNotrace().apply(this);
        }
        outANotraceTrace(node);
    }

    public void inAUtype(AUtype node)
    {
        defaultIn(node);
    }

    public void outAUtype(AUtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUtype(AUtype node)
    {
        inAUtype(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getDeclLst() != null)
        {
            node.getDeclLst().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getTypedef() != null)
        {
            node.getTypedef().apply(this);
        }
        outAUtype(node);
    }

    public void inAMtype(AMtype node)
    {
        defaultIn(node);
    }

    public void outAMtype(AMtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMtype(AMtype node)
    {
        inAMtype(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getNameLst() != null)
        {
            node.getNameLst().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getMtypetok() != null)
        {
            node.getMtypetok().apply(this);
        }
        outAMtype(node);
    }

    public void inAInline(AInline node)
    {
        defaultIn(node);
    }

    public void outAInline(AInline node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInline(AInline node)
    {
        inAInline(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getNameLst() != null)
        {
            node.getNameLst().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getInlinetok() != null)
        {
            node.getInlinetok().apply(this);
        }
        outAInline(node);
    }

    public void inAOneNameLst(AOneNameLst node)
    {
        defaultIn(node);
    }

    public void outAOneNameLst(AOneNameLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneNameLst(AOneNameLst node)
    {
        inAOneNameLst(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAOneNameLst(node);
    }

    public void inAManyNameLst(AManyNameLst node)
    {
        defaultIn(node);
    }

    public void outAManyNameLst(AManyNameLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyNameLst(AManyNameLst node)
    {
        inAManyNameLst(node);
        if(node.getNameLst() != null)
        {
            node.getNameLst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAManyNameLst(node);
    }

    public void inAOneExprLst(AOneExprLst node)
    {
        defaultIn(node);
    }

    public void outAOneExprLst(AOneExprLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneExprLst(AOneExprLst node)
    {
        inAOneExprLst(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOneExprLst(node);
    }

    public void inAManyExprLst(AManyExprLst node)
    {
        defaultIn(node);
    }

    public void outAManyExprLst(AManyExprLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyExprLst(AManyExprLst node)
    {
        inAManyExprLst(node);
        if(node.getExprLst() != null)
        {
            node.getExprLst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAManyExprLst(node);
    }

    public void inAOneDeclLst(AOneDeclLst node)
    {
        defaultIn(node);
    }

    public void outAOneDeclLst(AOneDeclLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneDeclLst(AOneDeclLst node)
    {
        inAOneDeclLst(node);
        if(node.getOneDecl() != null)
        {
            node.getOneDecl().apply(this);
        }
        outAOneDeclLst(node);
    }

    public void inAManyDeclLst(AManyDeclLst node)
    {
        defaultIn(node);
    }

    public void outAManyDeclLst(AManyDeclLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyDeclLst(AManyDeclLst node)
    {
        inAManyDeclLst(node);
        if(node.getDeclLst() != null)
        {
            node.getDeclLst().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getOneDecl() != null)
        {
            node.getOneDecl().apply(this);
        }
        outAManyDeclLst(node);
    }

    public void inAOneDecl(AOneDecl node)
    {
        defaultIn(node);
    }

    public void outAOneDecl(AOneDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneDecl(AOneDecl node)
    {
        inAOneDecl(node);
        if(node.getIvarLst() != null)
        {
            node.getIvarLst().apply(this);
        }
        if(node.getTypename() != null)
        {
            node.getTypename().apply(this);
        }
        if(node.getVisible() != null)
        {
            node.getVisible().apply(this);
        }
        outAOneDecl(node);
    }

    public void inAOneIvarLst(AOneIvarLst node)
    {
        defaultIn(node);
    }

    public void outAOneIvarLst(AOneIvarLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneIvarLst(AOneIvarLst node)
    {
        inAOneIvarLst(node);
        if(node.getIvar() != null)
        {
            node.getIvar().apply(this);
        }
        outAOneIvarLst(node);
    }

    public void inAManyIvarLst(AManyIvarLst node)
    {
        defaultIn(node);
    }

    public void outAManyIvarLst(AManyIvarLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyIvarLst(AManyIvarLst node)
    {
        inAManyIvarLst(node);
        if(node.getIvarLst() != null)
        {
            node.getIvarLst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIvar() != null)
        {
            node.getIvar().apply(this);
        }
        outAManyIvarLst(node);
    }

    public void inABitTypename(ABitTypename node)
    {
        defaultIn(node);
    }

    public void outABitTypename(ABitTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitTypename(ABitTypename node)
    {
        inABitTypename(node);
        if(node.getBit() != null)
        {
            node.getBit().apply(this);
        }
        outABitTypename(node);
    }

    public void inABoolTypename(ABoolTypename node)
    {
        defaultIn(node);
    }

    public void outABoolTypename(ABoolTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTypename(ABoolTypename node)
    {
        inABoolTypename(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTypename(node);
    }

    public void inAByteTypename(AByteTypename node)
    {
        defaultIn(node);
    }

    public void outAByteTypename(AByteTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteTypename(AByteTypename node)
    {
        inAByteTypename(node);
        if(node.getByte() != null)
        {
            node.getByte().apply(this);
        }
        outAByteTypename(node);
    }

    public void inAPidTypename(APidTypename node)
    {
        defaultIn(node);
    }

    public void outAPidTypename(APidTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPidTypename(APidTypename node)
    {
        inAPidTypename(node);
        if(node.getPid() != null)
        {
            node.getPid().apply(this);
        }
        outAPidTypename(node);
    }

    public void inAShortTypename(AShortTypename node)
    {
        defaultIn(node);
    }

    public void outAShortTypename(AShortTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortTypename(AShortTypename node)
    {
        inAShortTypename(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortTypename(node);
    }

    public void inAIntTypename(AIntTypename node)
    {
        defaultIn(node);
    }

    public void outAIntTypename(AIntTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypename(AIntTypename node)
    {
        inAIntTypename(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypename(node);
    }

    public void inAMtypeTypename(AMtypeTypename node)
    {
        defaultIn(node);
    }

    public void outAMtypeTypename(AMtypeTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMtypeTypename(AMtypeTypename node)
    {
        inAMtypeTypename(node);
        if(node.getMtypetok() != null)
        {
            node.getMtypetok().apply(this);
        }
        outAMtypeTypename(node);
    }

    public void inAChanTypename(AChanTypename node)
    {
        defaultIn(node);
    }

    public void outAChanTypename(AChanTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChanTypename(AChanTypename node)
    {
        inAChanTypename(node);
        if(node.getChan() != null)
        {
            node.getChan().apply(this);
        }
        outAChanTypename(node);
    }

    public void inAUnameTypename(AUnameTypename node)
    {
        defaultIn(node);
    }

    public void outAUnameTypename(AUnameTypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnameTypename(AUnameTypename node)
    {
        inAUnameTypename(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAUnameTypename(node);
    }

    public void inAOneTypenamelst(AOneTypenamelst node)
    {
        defaultIn(node);
    }

    public void outAOneTypenamelst(AOneTypenamelst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneTypenamelst(AOneTypenamelst node)
    {
        inAOneTypenamelst(node);
        if(node.getTypename() != null)
        {
            node.getTypename().apply(this);
        }
        outAOneTypenamelst(node);
    }

    public void inAManyTypenamelst(AManyTypenamelst node)
    {
        defaultIn(node);
    }

    public void outAManyTypenamelst(AManyTypenamelst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyTypenamelst(AManyTypenamelst node)
    {
        inAManyTypenamelst(node);
        if(node.getTypenamelst() != null)
        {
            node.getTypenamelst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypename() != null)
        {
            node.getTypename().apply(this);
        }
        outAManyTypenamelst(node);
    }

    public void inAOneActive(AOneActive node)
    {
        defaultIn(node);
    }

    public void outAOneActive(AOneActive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneActive(AOneActive node)
    {
        inAOneActive(node);
        if(node.getActivetok() != null)
        {
            node.getActivetok().apply(this);
        }
        outAOneActive(node);
    }

    public void inAManyActive(AManyActive node)
    {
        defaultIn(node);
    }

    public void outAManyActive(AManyActive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyActive(AManyActive node)
    {
        inAManyActive(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getActivetok() != null)
        {
            node.getActivetok().apply(this);
        }
        outAManyActive(node);
    }

    public void inAPriority(APriority node)
    {
        defaultIn(node);
    }

    public void outAPriority(APriority node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPriority(APriority node)
    {
        inAPriority(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getPrioritytok() != null)
        {
            node.getPrioritytok().apply(this);
        }
        outAPriority(node);
    }

    public void inAEnabler(AEnabler node)
    {
        defaultIn(node);
    }

    public void outAEnabler(AEnabler node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnabler(AEnabler node)
    {
        inAEnabler(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getProvided() != null)
        {
            node.getProvided().apply(this);
        }
        outAEnabler(node);
    }

    public void inAHiddenVisible(AHiddenVisible node)
    {
        defaultIn(node);
    }

    public void outAHiddenVisible(AHiddenVisible node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHiddenVisible(AHiddenVisible node)
    {
        inAHiddenVisible(node);
        if(node.getHidden() != null)
        {
            node.getHidden().apply(this);
        }
        outAHiddenVisible(node);
    }

    public void inAShowVisible(AShowVisible node)
    {
        defaultIn(node);
    }

    public void outAShowVisible(AShowVisible node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowVisible(AShowVisible node)
    {
        inAShowVisible(node);
        if(node.getShow() != null)
        {
            node.getShow().apply(this);
        }
        outAShowVisible(node);
    }

    public void inANullSequence(ANullSequence node)
    {
        defaultIn(node);
    }

    public void outANullSequence(ANullSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullSequence(ANullSequence node)
    {
        inANullSequence(node);
        outANullSequence(node);
    }

    public void inAOneSequence(AOneSequence node)
    {
        defaultIn(node);
    }

    public void outAOneSequence(AOneSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneSequence(AOneSequence node)
    {
        inAOneSequence(node);
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        outAOneSequence(node);
    }

    public void inAManySequence(AManySequence node)
    {
        defaultIn(node);
    }

    public void outAManySequence(AManySequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManySequence(AManySequence node)
    {
        inAManySequence(node);
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        outAManySequence(node);
    }

    public void inADeclarationStep(ADeclarationStep node)
    {
        defaultIn(node);
    }

    public void outADeclarationStep(ADeclarationStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationStep(ADeclarationStep node)
    {
        inADeclarationStep(node);
        if(node.getOneDecl() != null)
        {
            node.getOneDecl().apply(this);
        }
        outADeclarationStep(node);
    }

    public void inAStmntStep(AStmntStep node)
    {
        defaultIn(node);
    }

    public void outAStmntStep(AStmntStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmntStep(AStmntStep node)
    {
        inAStmntStep(node);
        if(node.getStmnt() != null)
        {
            node.getStmnt().apply(this);
        }
        outAStmntStep(node);
    }

    public void inAUnlessStep(AUnlessStep node)
    {
        defaultIn(node);
    }

    public void outAUnlessStep(AUnlessStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnlessStep(AUnlessStep node)
    {
        inAUnlessStep(node);
        if(node.getEscape() != null)
        {
            node.getEscape().apply(this);
        }
        if(node.getUnless() != null)
        {
            node.getUnless().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        outAUnlessStep(node);
    }

    public void inAExreceiveStep(AExreceiveStep node)
    {
        defaultIn(node);
    }

    public void outAExreceiveStep(AExreceiveStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExreceiveStep(AExreceiveStep node)
    {
        inAExreceiveStep(node);
        if(node.getVarreflst() != null)
        {
            node.getVarreflst().apply(this);
        }
        if(node.getXr() != null)
        {
            node.getXr().apply(this);
        }
        outAExreceiveStep(node);
    }

    public void inAExsendStep(AExsendStep node)
    {
        defaultIn(node);
    }

    public void outAExsendStep(AExsendStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExsendStep(AExsendStep node)
    {
        inAExsendStep(node);
        if(node.getVarreflst() != null)
        {
            node.getVarreflst().apply(this);
        }
        if(node.getXs() != null)
        {
            node.getXs().apply(this);
        }
        outAExsendStep(node);
    }

    public void inAOneVarreflst(AOneVarreflst node)
    {
        defaultIn(node);
    }

    public void outAOneVarreflst(AOneVarreflst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneVarreflst(AOneVarreflst node)
    {
        inAOneVarreflst(node);
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAOneVarreflst(node);
    }

    public void inAManyVarreflst(AManyVarreflst node)
    {
        defaultIn(node);
    }

    public void outAManyVarreflst(AManyVarreflst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyVarreflst(AManyVarreflst node)
    {
        inAManyVarreflst(node);
        if(node.getVarreflst() != null)
        {
            node.getVarreflst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAManyVarreflst(node);
    }

    public void inASingleIvar(ASingleIvar node)
    {
        defaultIn(node);
    }

    public void outASingleIvar(ASingleIvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleIvar(ASingleIvar node)
    {
        inASingleIvar(node);
        if(node.getIvarassignment() != null)
        {
            node.getIvarassignment().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASingleIvar(node);
    }

    public void inAArrayIvar(AArrayIvar node)
    {
        defaultIn(node);
    }

    public void outAArrayIvar(AArrayIvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayIvar(AArrayIvar node)
    {
        inAArrayIvar(node);
        if(node.getIvarassignment() != null)
        {
            node.getIvarassignment().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAArrayIvar(node);
    }

    public void inAVariableIvarassignment(AVariableIvarassignment node)
    {
        defaultIn(node);
    }

    public void outAVariableIvarassignment(AVariableIvarassignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableIvarassignment(AVariableIvarassignment node)
    {
        inAVariableIvarassignment(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAVariableIvarassignment(node);
    }

    public void inAChannelIvarassignment(AChannelIvarassignment node)
    {
        defaultIn(node);
    }

    public void outAChannelIvarassignment(AChannelIvarassignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChannelIvarassignment(AChannelIvarassignment node)
    {
        inAChannelIvarassignment(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getTypenamelst() != null)
        {
            node.getTypenamelst().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAChannelIvarassignment(node);
    }

    public void inASingleVarref(ASingleVarref node)
    {
        defaultIn(node);
    }

    public void outASingleVarref(ASingleVarref node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleVarref(ASingleVarref node)
    {
        inASingleVarref(node);
        if(node.getArrayref() != null)
        {
            node.getArrayref().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASingleVarref(node);
    }

    public void inARecordVarref(ARecordVarref node)
    {
        defaultIn(node);
    }

    public void outARecordVarref(ARecordVarref node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecordVarref(ARecordVarref node)
    {
        inARecordVarref(node);
        if(node.getArrayref() != null)
        {
            node.getArrayref().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outARecordVarref(node);
    }

    public void inAArrayref(AArrayref node)
    {
        defaultIn(node);
    }

    public void outAArrayref(AArrayref node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayref(AArrayref node)
    {
        inAArrayref(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayref(node);
    }

    public void inARecordref(ARecordref node)
    {
        defaultIn(node);
    }

    public void outARecordref(ARecordref node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecordref(ARecordref node)
    {
        inARecordref(node);
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outARecordref(node);
    }

    public void inAFifoSend(AFifoSend node)
    {
        defaultIn(node);
    }

    public void outAFifoSend(AFifoSend node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFifoSend(AFifoSend node)
    {
        inAFifoSend(node);
        if(node.getSendArgs() != null)
        {
            node.getSendArgs().apply(this);
        }
        if(node.getBang() != null)
        {
            node.getBang().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAFifoSend(node);
    }

    public void inASortedSend(ASortedSend node)
    {
        defaultIn(node);
    }

    public void outASortedSend(ASortedSend node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASortedSend(ASortedSend node)
    {
        inASortedSend(node);
        if(node.getSendArgs() != null)
        {
            node.getSendArgs().apply(this);
        }
        if(node.getBangBang() != null)
        {
            node.getBangBang().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outASortedSend(node);
    }

    public void inAFifoReceive(AFifoReceive node)
    {
        defaultIn(node);
    }

    public void outAFifoReceive(AFifoReceive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFifoReceive(AFifoReceive node)
    {
        inAFifoReceive(node);
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAFifoReceive(node);
    }

    public void inARandomReceive(ARandomReceive node)
    {
        defaultIn(node);
    }

    public void outARandomReceive(ARandomReceive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARandomReceive(ARandomReceive node)
    {
        inARandomReceive(node);
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getQueryQuery() != null)
        {
            node.getQueryQuery().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outARandomReceive(node);
    }

    public void inAFifopollReceive(AFifopollReceive node)
    {
        defaultIn(node);
    }

    public void outAFifopollReceive(AFifopollReceive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFifopollReceive(AFifopollReceive node)
    {
        inAFifopollReceive(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAFifopollReceive(node);
    }

    public void inARandompollReceive(ARandompollReceive node)
    {
        defaultIn(node);
    }

    public void outARandompollReceive(ARandompollReceive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARandompollReceive(ARandompollReceive node)
    {
        inARandompollReceive(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getQueryQuery() != null)
        {
            node.getQueryQuery().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outARandompollReceive(node);
    }

    public void inAFifoRecvPoll(AFifoRecvPoll node)
    {
        defaultIn(node);
    }

    public void outAFifoRecvPoll(AFifoRecvPoll node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFifoRecvPoll(AFifoRecvPoll node)
    {
        inAFifoRecvPoll(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAFifoRecvPoll(node);
    }

    public void inARandomRecvPoll(ARandomRecvPoll node)
    {
        defaultIn(node);
    }

    public void outARandomRecvPoll(ARandomRecvPoll node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARandomRecvPoll(ARandomRecvPoll node)
    {
        inARandomRecvPoll(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getQueryQuery() != null)
        {
            node.getQueryQuery().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outARandomRecvPoll(node);
    }

    public void inAListSendArgs(AListSendArgs node)
    {
        defaultIn(node);
    }

    public void outAListSendArgs(AListSendArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListSendArgs(AListSendArgs node)
    {
        inAListSendArgs(node);
        if(node.getArgLst() != null)
        {
            node.getArgLst().apply(this);
        }
        outAListSendArgs(node);
    }

    public void inAHeadedlistSendArgs(AHeadedlistSendArgs node)
    {
        defaultIn(node);
    }

    public void outAHeadedlistSendArgs(AHeadedlistSendArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeadedlistSendArgs(AHeadedlistSendArgs node)
    {
        inAHeadedlistSendArgs(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getArgLst() != null)
        {
            node.getArgLst().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAHeadedlistSendArgs(node);
    }

    public void inAOneArgLst(AOneArgLst node)
    {
        defaultIn(node);
    }

    public void outAOneArgLst(AOneArgLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneArgLst(AOneArgLst node)
    {
        inAOneArgLst(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOneArgLst(node);
    }

    public void inAManyArgLst(AManyArgLst node)
    {
        defaultIn(node);
    }

    public void outAManyArgLst(AManyArgLst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyArgLst(AManyArgLst node)
    {
        inAManyArgLst(node);
        if(node.getArgLst() != null)
        {
            node.getArgLst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAManyArgLst(node);
    }

    public void inAOneRecvArgs(AOneRecvArgs node)
    {
        defaultIn(node);
    }

    public void outAOneRecvArgs(AOneRecvArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneRecvArgs(AOneRecvArgs node)
    {
        inAOneRecvArgs(node);
        if(node.getRecvArg() != null)
        {
            node.getRecvArg().apply(this);
        }
        outAOneRecvArgs(node);
    }

    public void inAManyRecvArgs(AManyRecvArgs node)
    {
        defaultIn(node);
    }

    public void outAManyRecvArgs(AManyRecvArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyRecvArgs(AManyRecvArgs node)
    {
        inAManyRecvArgs(node);
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRecvArg() != null)
        {
            node.getRecvArg().apply(this);
        }
        outAManyRecvArgs(node);
    }

    public void inAManyheadedRecvArgs(AManyheadedRecvArgs node)
    {
        defaultIn(node);
    }

    public void outAManyheadedRecvArgs(AManyheadedRecvArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyheadedRecvArgs(AManyheadedRecvArgs node)
    {
        inAManyheadedRecvArgs(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getRecvArgs() != null)
        {
            node.getRecvArgs().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getRecvArg() != null)
        {
            node.getRecvArg().apply(this);
        }
        outAManyheadedRecvArgs(node);
    }

    public void inAVarRecvArg(AVarRecvArg node)
    {
        defaultIn(node);
    }

    public void outAVarRecvArg(AVarRecvArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarRecvArg(AVarRecvArg node)
    {
        inAVarRecvArg(node);
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAVarRecvArg(node);
    }

    public void inAEvalRecvArg(AEvalRecvArg node)
    {
        defaultIn(node);
    }

    public void outAEvalRecvArg(AEvalRecvArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEvalRecvArg(AEvalRecvArg node)
    {
        inAEvalRecvArg(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getEval() != null)
        {
            node.getEval().apply(this);
        }
        outAEvalRecvArg(node);
    }

    public void inAConstRecvArg(AConstRecvArg node)
    {
        defaultIn(node);
    }

    public void outAConstRecvArg(AConstRecvArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstRecvArg(AConstRecvArg node)
    {
        inAConstRecvArg(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstRecvArg(node);
    }

    public void inAAssignmentAssignment(AAssignmentAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignmentAssignment(AAssignmentAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentAssignment(AAssignmentAssignment node)
    {
        inAAssignmentAssignment(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAAssignmentAssignment(node);
    }

    public void inAIncrementAssignment(AIncrementAssignment node)
    {
        defaultIn(node);
    }

    public void outAIncrementAssignment(AIncrementAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementAssignment(AIncrementAssignment node)
    {
        inAIncrementAssignment(node);
        if(node.getPlusPlus() != null)
        {
            node.getPlusPlus().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAIncrementAssignment(node);
    }

    public void inADecrementAssignment(ADecrementAssignment node)
    {
        defaultIn(node);
    }

    public void outADecrementAssignment(ADecrementAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrementAssignment(ADecrementAssignment node)
    {
        inADecrementAssignment(node);
        if(node.getMinusMinus() != null)
        {
            node.getMinusMinus().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outADecrementAssignment(node);
    }

    public void inAIfStmnt(AIfStmnt node)
    {
        defaultIn(node);
    }

    public void outAIfStmnt(AIfStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmnt(AIfStmnt node)
    {
        inAIfStmnt(node);
        if(node.getFi() != null)
        {
            node.getFi().apply(this);
        }
        if(node.getOptions() != null)
        {
            node.getOptions().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStmnt(node);
    }

    public void inADoStmnt(ADoStmnt node)
    {
        defaultIn(node);
    }

    public void outADoStmnt(ADoStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoStmnt(ADoStmnt node)
    {
        inADoStmnt(node);
        if(node.getOd() != null)
        {
            node.getOd().apply(this);
        }
        if(node.getOptions() != null)
        {
            node.getOptions().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outADoStmnt(node);
    }

    public void inAAtomicStmnt(AAtomicStmnt node)
    {
        defaultIn(node);
    }

    public void outAAtomicStmnt(AAtomicStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtomicStmnt(AAtomicStmnt node)
    {
        inAAtomicStmnt(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getAtomic() != null)
        {
            node.getAtomic().apply(this);
        }
        outAAtomicStmnt(node);
    }

    public void inADstepStmnt(ADstepStmnt node)
    {
        defaultIn(node);
    }

    public void outADstepStmnt(ADstepStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADstepStmnt(ADstepStmnt node)
    {
        inADstepStmnt(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getDStep() != null)
        {
            node.getDStep().apply(this);
        }
        outADstepStmnt(node);
    }

    public void inABracesStmnt(ABracesStmnt node)
    {
        defaultIn(node);
    }

    public void outABracesStmnt(ABracesStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABracesStmnt(ABracesStmnt node)
    {
        inABracesStmnt(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABracesStmnt(node);
    }

    public void inASendStmnt(ASendStmnt node)
    {
        defaultIn(node);
    }

    public void outASendStmnt(ASendStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASendStmnt(ASendStmnt node)
    {
        inASendStmnt(node);
        if(node.getSend() != null)
        {
            node.getSend().apply(this);
        }
        outASendStmnt(node);
    }

    public void inAReceiveStmnt(AReceiveStmnt node)
    {
        defaultIn(node);
    }

    public void outAReceiveStmnt(AReceiveStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReceiveStmnt(AReceiveStmnt node)
    {
        inAReceiveStmnt(node);
        if(node.getReceive() != null)
        {
            node.getReceive().apply(this);
        }
        outAReceiveStmnt(node);
    }

    public void inAAssignStmnt(AAssignStmnt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmnt(AAssignStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmnt(AAssignStmnt node)
    {
        inAAssignStmnt(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignStmnt(node);
    }

    public void inAElseStmnt(AElseStmnt node)
    {
        defaultIn(node);
    }

    public void outAElseStmnt(AElseStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStmnt(AElseStmnt node)
    {
        inAElseStmnt(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseStmnt(node);
    }

    public void inABreakStmnt(ABreakStmnt node)
    {
        defaultIn(node);
    }

    public void outABreakStmnt(ABreakStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStmnt(ABreakStmnt node)
    {
        inABreakStmnt(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakStmnt(node);
    }

    public void inAGotoStmnt(AGotoStmnt node)
    {
        defaultIn(node);
    }

    public void outAGotoStmnt(AGotoStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoStmnt(AGotoStmnt node)
    {
        inAGotoStmnt(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        outAGotoStmnt(node);
    }

    public void inALabelStmnt(ALabelStmnt node)
    {
        defaultIn(node);
    }

    public void outALabelStmnt(ALabelStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelStmnt(ALabelStmnt node)
    {
        inALabelStmnt(node);
        if(node.getStmnt() != null)
        {
            node.getStmnt().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outALabelStmnt(node);
    }

    public void inAPrintStmnt(APrintStmnt node)
    {
        defaultIn(node);
    }

    public void outAPrintStmnt(APrintStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStmnt(APrintStmnt node)
    {
        inAPrintStmnt(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintStmnt(node);
    }

    public void inAPrintwithargsStmnt(APrintwithargsStmnt node)
    {
        defaultIn(node);
    }

    public void outAPrintwithargsStmnt(APrintwithargsStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintwithargsStmnt(APrintwithargsStmnt node)
    {
        inAPrintwithargsStmnt(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getArgLst() != null)
        {
            node.getArgLst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintwithargsStmnt(node);
    }

    public void inAAssertStmnt(AAssertStmnt node)
    {
        defaultIn(node);
    }

    public void outAAssertStmnt(AAssertStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertStmnt(AAssertStmnt node)
    {
        inAAssertStmnt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        outAAssertStmnt(node);
    }

    public void inAExpressionStmnt(AExpressionStmnt node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmnt(AExpressionStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmnt(AExpressionStmnt node)
    {
        inAExpressionStmnt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpressionStmnt(node);
    }

    public void inAInlineStmnt(AInlineStmnt node)
    {
        defaultIn(node);
    }

    public void outAInlineStmnt(AInlineStmnt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInlineStmnt(AInlineStmnt node)
    {
        inAInlineStmnt(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getExprLst() != null)
        {
            node.getExprLst().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAInlineStmnt(node);
    }

    public void inANormalOptions(ANormalOptions node)
    {
        defaultIn(node);
    }

    public void outANormalOptions(ANormalOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalOptions(ANormalOptions node)
    {
        inANormalOptions(node);
        if(node.getOptions() != null)
        {
            node.getOptions().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getColonColon() != null)
        {
            node.getColonColon().apply(this);
        }
        outANormalOptions(node);
    }

    public void inATemplateOptions(ATemplateOptions node)
    {
        defaultIn(node);
    }

    public void outATemplateOptions(ATemplateOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATemplateOptions(ATemplateOptions node)
    {
        inATemplateOptions(node);
        if(node.getOptions() != null)
        {
            node.getOptions().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getProctype() != null)
        {
            node.getProctype().apply(this);
        }
        if(node.getOver() != null)
        {
            node.getOver().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getColonColon() != null)
        {
            node.getColonColon().apply(this);
        }
        outATemplateOptions(node);
    }

    public void inAParentheseFactor(AParentheseFactor node)
    {
        defaultIn(node);
    }

    public void outAParentheseFactor(AParentheseFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentheseFactor(AParentheseFactor node)
    {
        inAParentheseFactor(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        outAParentheseFactor(node);
    }

    public void inALengthFactor(ALengthFactor node)
    {
        defaultIn(node);
    }

    public void outALengthFactor(ALengthFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALengthFactor(ALengthFactor node)
    {
        inALengthFactor(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        outALengthFactor(node);
    }

    public void inARecvPollFactor(ARecvPollFactor node)
    {
        defaultIn(node);
    }

    public void outARecvPollFactor(ARecvPollFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecvPollFactor(ARecvPollFactor node)
    {
        inARecvPollFactor(node);
        if(node.getRecvPoll() != null)
        {
            node.getRecvPoll().apply(this);
        }
        outARecvPollFactor(node);
    }

    public void inAVarrefFactor(AVarrefFactor node)
    {
        defaultIn(node);
    }

    public void outAVarrefFactor(AVarrefFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarrefFactor(AVarrefFactor node)
    {
        inAVarrefFactor(node);
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAVarrefFactor(node);
    }

    public void inAConstFactor(AConstFactor node)
    {
        defaultIn(node);
    }

    public void outAConstFactor(AConstFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstFactor(AConstFactor node)
    {
        inAConstFactor(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstFactor(node);
    }

    public void inATimeoutFactor(ATimeoutFactor node)
    {
        defaultIn(node);
    }

    public void outATimeoutFactor(ATimeoutFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeoutFactor(ATimeoutFactor node)
    {
        inATimeoutFactor(node);
        if(node.getTimeout() != null)
        {
            node.getTimeout().apply(this);
        }
        outATimeoutFactor(node);
    }

    public void inANonprogressFactor(ANonprogressFactor node)
    {
        defaultIn(node);
    }

    public void outANonprogressFactor(ANonprogressFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonprogressFactor(ANonprogressFactor node)
    {
        inANonprogressFactor(node);
        if(node.getNp() != null)
        {
            node.getNp().apply(this);
        }
        outANonprogressFactor(node);
    }

    public void inAEnabledFactor(AEnabledFactor node)
    {
        defaultIn(node);
    }

    public void outAEnabledFactor(AEnabledFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnabledFactor(AEnabledFactor node)
    {
        inAEnabledFactor(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getEnabled() != null)
        {
            node.getEnabled().apply(this);
        }
        outAEnabledFactor(node);
    }

    public void inAPcValueFactor(APcValueFactor node)
    {
        defaultIn(node);
    }

    public void outAPcValueFactor(APcValueFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPcValueFactor(APcValueFactor node)
    {
        inAPcValueFactor(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getPcValue() != null)
        {
            node.getPcValue().apply(this);
        }
        outAPcValueFactor(node);
    }

    public void inARemoterefFactor(ARemoterefFactor node)
    {
        defaultIn(node);
    }

    public void outARemoterefFactor(ARemoterefFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoterefFactor(ARemoterefFactor node)
    {
        inARemoterefFactor(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getAt() != null)
        {
            node.getAt().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getProcess() != null)
        {
            node.getProcess().apply(this);
        }
        outARemoterefFactor(node);
    }

    public void inARunFactor(ARunFactor node)
    {
        defaultIn(node);
    }

    public void outARunFactor(ARunFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARunFactor(ARunFactor node)
    {
        inARunFactor(node);
        if(node.getPriority() != null)
        {
            node.getPriority().apply(this);
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getArgLst() != null)
        {
            node.getArgLst().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRun() != null)
        {
            node.getRun().apply(this);
        }
        outARunFactor(node);
    }

    public void inAChanopFactor(AChanopFactor node)
    {
        defaultIn(node);
    }

    public void outAChanopFactor(AChanopFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChanopFactor(AChanopFactor node)
    {
        inAChanopFactor(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getChanop() != null)
        {
            node.getChanop().apply(this);
        }
        outAChanopFactor(node);
    }

    public void inASimpleUnExpr(ASimpleUnExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleUnExpr(ASimpleUnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleUnExpr(ASimpleUnExpr node)
    {
        inASimpleUnExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASimpleUnExpr(node);
    }

    public void inANotUnExpr(ANotUnExpr node)
    {
        defaultIn(node);
    }

    public void outANotUnExpr(ANotUnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnExpr(ANotUnExpr node)
    {
        inANotUnExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getBang() != null)
        {
            node.getBang().apply(this);
        }
        outANotUnExpr(node);
    }

    public void inAComplementUnExpr(AComplementUnExpr node)
    {
        defaultIn(node);
    }

    public void outAComplementUnExpr(AComplementUnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplementUnExpr(AComplementUnExpr node)
    {
        inAComplementUnExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getComplement() != null)
        {
            node.getComplement().apply(this);
        }
        outAComplementUnExpr(node);
    }

    public void inASimpleMultExpr(ASimpleMultExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleMultExpr(ASimpleMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMultExpr(ASimpleMultExpr node)
    {
        inASimpleMultExpr(node);
        if(node.getUnExpr() != null)
        {
            node.getUnExpr().apply(this);
        }
        outASimpleMultExpr(node);
    }

    public void inACompoundMultExpr(ACompoundMultExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundMultExpr(ACompoundMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundMultExpr(ACompoundMultExpr node)
    {
        inACompoundMultExpr(node);
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        if(node.getMultop() != null)
        {
            node.getMultop().apply(this);
        }
        if(node.getUnExpr() != null)
        {
            node.getUnExpr().apply(this);
        }
        outACompoundMultExpr(node);
    }

    public void inASimpleAddExpr(ASimpleAddExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleAddExpr(ASimpleAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAddExpr(ASimpleAddExpr node)
    {
        inASimpleAddExpr(node);
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        outASimpleAddExpr(node);
    }

    public void inACompoundplusAddExpr(ACompoundplusAddExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundplusAddExpr(ACompoundplusAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundplusAddExpr(ACompoundplusAddExpr node)
    {
        inACompoundplusAddExpr(node);
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        outACompoundplusAddExpr(node);
    }

    public void inACompoundminusAddExpr(ACompoundminusAddExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundminusAddExpr(ACompoundminusAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundminusAddExpr(ACompoundminusAddExpr node)
    {
        inACompoundminusAddExpr(node);
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        outACompoundminusAddExpr(node);
    }

    public void inASimpleShiftExpr(ASimpleShiftExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleShiftExpr(ASimpleShiftExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleShiftExpr(ASimpleShiftExpr node)
    {
        inASimpleShiftExpr(node);
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        outASimpleShiftExpr(node);
    }

    public void inACompoundShiftExpr(ACompoundShiftExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundShiftExpr(ACompoundShiftExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundShiftExpr(ACompoundShiftExpr node)
    {
        inACompoundShiftExpr(node);
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        if(node.getShiftop() != null)
        {
            node.getShiftop().apply(this);
        }
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        outACompoundShiftExpr(node);
    }

    public void inASimpleRelExpr(ASimpleRelExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleRelExpr(ASimpleRelExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleRelExpr(ASimpleRelExpr node)
    {
        inASimpleRelExpr(node);
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        outASimpleRelExpr(node);
    }

    public void inACompoundrelopRelExpr(ACompoundrelopRelExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundrelopRelExpr(ACompoundrelopRelExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundrelopRelExpr(ACompoundrelopRelExpr node)
    {
        inACompoundrelopRelExpr(node);
        if(node.getRelExpr() != null)
        {
            node.getRelExpr().apply(this);
        }
        if(node.getRelop() != null)
        {
            node.getRelop().apply(this);
        }
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        outACompoundrelopRelExpr(node);
    }

    public void inACompoundgtRelExpr(ACompoundgtRelExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundgtRelExpr(ACompoundgtRelExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundgtRelExpr(ACompoundgtRelExpr node)
    {
        inACompoundgtRelExpr(node);
        if(node.getRelExpr() != null)
        {
            node.getRelExpr().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        outACompoundgtRelExpr(node);
    }

    public void inACompoundltRelExpr(ACompoundltRelExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundltRelExpr(ACompoundltRelExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundltRelExpr(ACompoundltRelExpr node)
    {
        inACompoundltRelExpr(node);
        if(node.getRelExpr() != null)
        {
            node.getRelExpr().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        outACompoundltRelExpr(node);
    }

    public void inASimpleEqExpr(ASimpleEqExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleEqExpr(ASimpleEqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleEqExpr(ASimpleEqExpr node)
    {
        inASimpleEqExpr(node);
        if(node.getRelExpr() != null)
        {
            node.getRelExpr().apply(this);
        }
        outASimpleEqExpr(node);
    }

    public void inACompoundEqExpr(ACompoundEqExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundEqExpr(ACompoundEqExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundEqExpr(ACompoundEqExpr node)
    {
        inACompoundEqExpr(node);
        if(node.getEqExpr() != null)
        {
            node.getEqExpr().apply(this);
        }
        if(node.getEqop() != null)
        {
            node.getEqop().apply(this);
        }
        if(node.getRelExpr() != null)
        {
            node.getRelExpr().apply(this);
        }
        outACompoundEqExpr(node);
    }

    public void inASimpleBitandExpr(ASimpleBitandExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleBitandExpr(ASimpleBitandExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleBitandExpr(ASimpleBitandExpr node)
    {
        inASimpleBitandExpr(node);
        if(node.getEqExpr() != null)
        {
            node.getEqExpr().apply(this);
        }
        outASimpleBitandExpr(node);
    }

    public void inACompoundBitandExpr(ACompoundBitandExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundBitandExpr(ACompoundBitandExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundBitandExpr(ACompoundBitandExpr node)
    {
        inACompoundBitandExpr(node);
        if(node.getBitandExpr() != null)
        {
            node.getBitandExpr().apply(this);
        }
        if(node.getBitand() != null)
        {
            node.getBitand().apply(this);
        }
        if(node.getEqExpr() != null)
        {
            node.getEqExpr().apply(this);
        }
        outACompoundBitandExpr(node);
    }

    public void inASimpleBitxorExpr(ASimpleBitxorExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleBitxorExpr(ASimpleBitxorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleBitxorExpr(ASimpleBitxorExpr node)
    {
        inASimpleBitxorExpr(node);
        if(node.getBitandExpr() != null)
        {
            node.getBitandExpr().apply(this);
        }
        outASimpleBitxorExpr(node);
    }

    public void inACompoundBitxorExpr(ACompoundBitxorExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundBitxorExpr(ACompoundBitxorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundBitxorExpr(ACompoundBitxorExpr node)
    {
        inACompoundBitxorExpr(node);
        if(node.getBitxorExpr() != null)
        {
            node.getBitxorExpr().apply(this);
        }
        if(node.getBitxor() != null)
        {
            node.getBitxor().apply(this);
        }
        if(node.getBitandExpr() != null)
        {
            node.getBitandExpr().apply(this);
        }
        outACompoundBitxorExpr(node);
    }

    public void inASimpleBitorExpr(ASimpleBitorExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleBitorExpr(ASimpleBitorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleBitorExpr(ASimpleBitorExpr node)
    {
        inASimpleBitorExpr(node);
        if(node.getBitxorExpr() != null)
        {
            node.getBitxorExpr().apply(this);
        }
        outASimpleBitorExpr(node);
    }

    public void inACompoundBitorExpr(ACompoundBitorExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundBitorExpr(ACompoundBitorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundBitorExpr(ACompoundBitorExpr node)
    {
        inACompoundBitorExpr(node);
        if(node.getBitorExpr() != null)
        {
            node.getBitorExpr().apply(this);
        }
        if(node.getBitor() != null)
        {
            node.getBitor().apply(this);
        }
        if(node.getBitxorExpr() != null)
        {
            node.getBitxorExpr().apply(this);
        }
        outACompoundBitorExpr(node);
    }

    public void inASimpleAndExpr(ASimpleAndExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleAndExpr(ASimpleAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAndExpr(ASimpleAndExpr node)
    {
        inASimpleAndExpr(node);
        if(node.getBitorExpr() != null)
        {
            node.getBitorExpr().apply(this);
        }
        outASimpleAndExpr(node);
    }

    public void inACompoundAndExpr(ACompoundAndExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundAndExpr(ACompoundAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundAndExpr(ACompoundAndExpr node)
    {
        inACompoundAndExpr(node);
        if(node.getAndExpr() != null)
        {
            node.getAndExpr().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getBitorExpr() != null)
        {
            node.getBitorExpr().apply(this);
        }
        outACompoundAndExpr(node);
    }

    public void inASimpleOrExpr(ASimpleOrExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleOrExpr(ASimpleOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleOrExpr(ASimpleOrExpr node)
    {
        inASimpleOrExpr(node);
        if(node.getAndExpr() != null)
        {
            node.getAndExpr().apply(this);
        }
        outASimpleOrExpr(node);
    }

    public void inACompoundOrExpr(ACompoundOrExpr node)
    {
        defaultIn(node);
    }

    public void outACompoundOrExpr(ACompoundOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundOrExpr(ACompoundOrExpr node)
    {
        inACompoundOrExpr(node);
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getAndExpr() != null)
        {
            node.getAndExpr().apply(this);
        }
        outACompoundOrExpr(node);
    }

    public void inASimpleExpr(ASimpleExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleExpr(ASimpleExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpr(ASimpleExpr node)
    {
        inASimpleExpr(node);
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        outASimpleExpr(node);
    }

    public void inAConditionalExpr(AConditionalExpr node)
    {
        defaultIn(node);
    }

    public void outAConditionalExpr(AConditionalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalExpr(AConditionalExpr node)
    {
        inAConditionalExpr(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRightarrow() != null)
        {
            node.getRightarrow().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        outAConditionalExpr(node);
    }

    public void inATrueConst(ATrueConst node)
    {
        defaultIn(node);
    }

    public void outATrueConst(ATrueConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueConst(ATrueConst node)
    {
        inATrueConst(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueConst(node);
    }

    public void inAFalseConst(AFalseConst node)
    {
        defaultIn(node);
    }

    public void outAFalseConst(AFalseConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseConst(AFalseConst node)
    {
        inAFalseConst(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseConst(node);
    }

    public void inASkipConst(ASkipConst node)
    {
        defaultIn(node);
    }

    public void outASkipConst(ASkipConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASkipConst(ASkipConst node)
    {
        inASkipConst(node);
        if(node.getSkip() != null)
        {
            node.getSkip().apply(this);
        }
        outASkipConst(node);
    }

    public void inANumberConst(ANumberConst node)
    {
        defaultIn(node);
    }

    public void outANumberConst(ANumberConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberConst(ANumberConst node)
    {
        inANumberConst(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANumberConst(node);
    }

    public void inAPidConst(APidConst node)
    {
        defaultIn(node);
    }

    public void outAPidConst(APidConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPidConst(APidConst node)
    {
        inAPidConst(node);
        if(node.getProcessid() != null)
        {
            node.getProcessid().apply(this);
        }
        outAPidConst(node);
    }

    public void inAUnderscoreConst(AUnderscoreConst node)
    {
        defaultIn(node);
    }

    public void outAUnderscoreConst(AUnderscoreConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnderscoreConst(AUnderscoreConst node)
    {
        inAUnderscoreConst(node);
        if(node.getUnderscore() != null)
        {
            node.getUnderscore().apply(this);
        }
        outAUnderscoreConst(node);
    }
}
