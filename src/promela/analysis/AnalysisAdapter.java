/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.analysis;

import java.util.*;
import src.promela.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseANormalSpec(ANormalSpec node)
    {
        defaultCase(node);
    }

    public void caseATemplateSpec(ATemplateSpec node)
    {
        defaultCase(node);
    }

    public void caseATemplate(ATemplate node)
    {
        defaultCase(node);
    }

    public void caseAUtypeModule(AUtypeModule node)
    {
        defaultCase(node);
    }

    public void caseAMtypeModule(AMtypeModule node)
    {
        defaultCase(node);
    }

    public void caseAVarschansModule(AVarschansModule node)
    {
        defaultCase(node);
    }

    public void caseAProctypeModule(AProctypeModule node)
    {
        defaultCase(node);
    }

    public void caseAInitModule(AInitModule node)
    {
        defaultCase(node);
    }

    public void caseANeverModule(ANeverModule node)
    {
        defaultCase(node);
    }

    public void caseATraceModule(ATraceModule node)
    {
        defaultCase(node);
    }

    public void caseAInlineModule(AInlineModule node)
    {
        defaultCase(node);
    }

    public void caseAProctype(AProctype node)
    {
        defaultCase(node);
    }

    public void caseAInit(AInit node)
    {
        defaultCase(node);
    }

    public void caseANever(ANever node)
    {
        defaultCase(node);
    }

    public void caseATraceTrace(ATraceTrace node)
    {
        defaultCase(node);
    }

    public void caseANotraceTrace(ANotraceTrace node)
    {
        defaultCase(node);
    }

    public void caseAUtype(AUtype node)
    {
        defaultCase(node);
    }

    public void caseAMtype(AMtype node)
    {
        defaultCase(node);
    }

    public void caseAInline(AInline node)
    {
        defaultCase(node);
    }

    public void caseAOneNameLst(AOneNameLst node)
    {
        defaultCase(node);
    }

    public void caseAManyNameLst(AManyNameLst node)
    {
        defaultCase(node);
    }

    public void caseAOneExprLst(AOneExprLst node)
    {
        defaultCase(node);
    }

    public void caseAManyExprLst(AManyExprLst node)
    {
        defaultCase(node);
    }

    public void caseAOneDeclLst(AOneDeclLst node)
    {
        defaultCase(node);
    }

    public void caseAManyDeclLst(AManyDeclLst node)
    {
        defaultCase(node);
    }

    public void caseAOneDecl(AOneDecl node)
    {
        defaultCase(node);
    }

    public void caseAOneIvarLst(AOneIvarLst node)
    {
        defaultCase(node);
    }

    public void caseAManyIvarLst(AManyIvarLst node)
    {
        defaultCase(node);
    }

    public void caseABitTypename(ABitTypename node)
    {
        defaultCase(node);
    }

    public void caseABoolTypename(ABoolTypename node)
    {
        defaultCase(node);
    }

    public void caseAByteTypename(AByteTypename node)
    {
        defaultCase(node);
    }

    public void caseAPidTypename(APidTypename node)
    {
        defaultCase(node);
    }

    public void caseAShortTypename(AShortTypename node)
    {
        defaultCase(node);
    }

    public void caseAIntTypename(AIntTypename node)
    {
        defaultCase(node);
    }

    public void caseAMtypeTypename(AMtypeTypename node)
    {
        defaultCase(node);
    }

    public void caseAChanTypename(AChanTypename node)
    {
        defaultCase(node);
    }

    public void caseAUnameTypename(AUnameTypename node)
    {
        defaultCase(node);
    }

    public void caseAOneTypenamelst(AOneTypenamelst node)
    {
        defaultCase(node);
    }

    public void caseAManyTypenamelst(AManyTypenamelst node)
    {
        defaultCase(node);
    }

    public void caseAOneActive(AOneActive node)
    {
        defaultCase(node);
    }

    public void caseAManyActive(AManyActive node)
    {
        defaultCase(node);
    }

    public void caseAPriority(APriority node)
    {
        defaultCase(node);
    }

    public void caseAEnabler(AEnabler node)
    {
        defaultCase(node);
    }

    public void caseAHiddenVisible(AHiddenVisible node)
    {
        defaultCase(node);
    }

    public void caseAShowVisible(AShowVisible node)
    {
        defaultCase(node);
    }

    public void caseANullSequence(ANullSequence node)
    {
        defaultCase(node);
    }

    public void caseAOneSequence(AOneSequence node)
    {
        defaultCase(node);
    }

    public void caseAManySequence(AManySequence node)
    {
        defaultCase(node);
    }

    public void caseADeclarationStep(ADeclarationStep node)
    {
        defaultCase(node);
    }

    public void caseAStmntStep(AStmntStep node)
    {
        defaultCase(node);
    }

    public void caseAUnlessStep(AUnlessStep node)
    {
        defaultCase(node);
    }

    public void caseAExreceiveStep(AExreceiveStep node)
    {
        defaultCase(node);
    }

    public void caseAExsendStep(AExsendStep node)
    {
        defaultCase(node);
    }

    public void caseAOneVarreflst(AOneVarreflst node)
    {
        defaultCase(node);
    }

    public void caseAManyVarreflst(AManyVarreflst node)
    {
        defaultCase(node);
    }

    public void caseASingleIvar(ASingleIvar node)
    {
        defaultCase(node);
    }

    public void caseAArrayIvar(AArrayIvar node)
    {
        defaultCase(node);
    }

    public void caseAVariableIvarassignment(AVariableIvarassignment node)
    {
        defaultCase(node);
    }

    public void caseAChannelIvarassignment(AChannelIvarassignment node)
    {
        defaultCase(node);
    }

    public void caseASingleVarref(ASingleVarref node)
    {
        defaultCase(node);
    }

    public void caseARecordVarref(ARecordVarref node)
    {
        defaultCase(node);
    }

    public void caseAArrayref(AArrayref node)
    {
        defaultCase(node);
    }

    public void caseARecordref(ARecordref node)
    {
        defaultCase(node);
    }

    public void caseAFifoSend(AFifoSend node)
    {
        defaultCase(node);
    }

    public void caseASortedSend(ASortedSend node)
    {
        defaultCase(node);
    }

    public void caseAFifoReceive(AFifoReceive node)
    {
        defaultCase(node);
    }

    public void caseARandomReceive(ARandomReceive node)
    {
        defaultCase(node);
    }

    public void caseAFifopollReceive(AFifopollReceive node)
    {
        defaultCase(node);
    }

    public void caseARandompollReceive(ARandompollReceive node)
    {
        defaultCase(node);
    }

    public void caseAFifoRecvPoll(AFifoRecvPoll node)
    {
        defaultCase(node);
    }

    public void caseARandomRecvPoll(ARandomRecvPoll node)
    {
        defaultCase(node);
    }

    public void caseAListSendArgs(AListSendArgs node)
    {
        defaultCase(node);
    }

    public void caseAHeadedlistSendArgs(AHeadedlistSendArgs node)
    {
        defaultCase(node);
    }

    public void caseAOneArgLst(AOneArgLst node)
    {
        defaultCase(node);
    }

    public void caseAManyArgLst(AManyArgLst node)
    {
        defaultCase(node);
    }

    public void caseAOneRecvArgs(AOneRecvArgs node)
    {
        defaultCase(node);
    }

    public void caseAManyRecvArgs(AManyRecvArgs node)
    {
        defaultCase(node);
    }

    public void caseAManyheadedRecvArgs(AManyheadedRecvArgs node)
    {
        defaultCase(node);
    }

    public void caseAVarRecvArg(AVarRecvArg node)
    {
        defaultCase(node);
    }

    public void caseAEvalRecvArg(AEvalRecvArg node)
    {
        defaultCase(node);
    }

    public void caseAConstRecvArg(AConstRecvArg node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentAssignment(AAssignmentAssignment node)
    {
        defaultCase(node);
    }

    public void caseAIncrementAssignment(AIncrementAssignment node)
    {
        defaultCase(node);
    }

    public void caseADecrementAssignment(ADecrementAssignment node)
    {
        defaultCase(node);
    }

    public void caseAIfStmnt(AIfStmnt node)
    {
        defaultCase(node);
    }

    public void caseADoStmnt(ADoStmnt node)
    {
        defaultCase(node);
    }

    public void caseAAtomicStmnt(AAtomicStmnt node)
    {
        defaultCase(node);
    }

    public void caseADstepStmnt(ADstepStmnt node)
    {
        defaultCase(node);
    }

    public void caseABracesStmnt(ABracesStmnt node)
    {
        defaultCase(node);
    }

    public void caseASendStmnt(ASendStmnt node)
    {
        defaultCase(node);
    }

    public void caseAReceiveStmnt(AReceiveStmnt node)
    {
        defaultCase(node);
    }

    public void caseAAssignStmnt(AAssignStmnt node)
    {
        defaultCase(node);
    }

    public void caseAElseStmnt(AElseStmnt node)
    {
        defaultCase(node);
    }

    public void caseABreakStmnt(ABreakStmnt node)
    {
        defaultCase(node);
    }

    public void caseAGotoStmnt(AGotoStmnt node)
    {
        defaultCase(node);
    }

    public void caseALabelStmnt(ALabelStmnt node)
    {
        defaultCase(node);
    }

    public void caseAPrintStmnt(APrintStmnt node)
    {
        defaultCase(node);
    }

    public void caseAPrintwithargsStmnt(APrintwithargsStmnt node)
    {
        defaultCase(node);
    }

    public void caseAAssertStmnt(AAssertStmnt node)
    {
        defaultCase(node);
    }

    public void caseAExpressionStmnt(AExpressionStmnt node)
    {
        defaultCase(node);
    }

    public void caseAInlineStmnt(AInlineStmnt node)
    {
        defaultCase(node);
    }

    public void caseANormalOptions(ANormalOptions node)
    {
        defaultCase(node);
    }

    public void caseATemplateOptions(ATemplateOptions node)
    {
        defaultCase(node);
    }

    public void caseAParentheseFactor(AParentheseFactor node)
    {
        defaultCase(node);
    }

    public void caseALengthFactor(ALengthFactor node)
    {
        defaultCase(node);
    }

    public void caseARecvPollFactor(ARecvPollFactor node)
    {
        defaultCase(node);
    }

    public void caseAVarrefFactor(AVarrefFactor node)
    {
        defaultCase(node);
    }

    public void caseAConstFactor(AConstFactor node)
    {
        defaultCase(node);
    }

    public void caseATimeoutFactor(ATimeoutFactor node)
    {
        defaultCase(node);
    }

    public void caseANonprogressFactor(ANonprogressFactor node)
    {
        defaultCase(node);
    }

    public void caseAEnabledFactor(AEnabledFactor node)
    {
        defaultCase(node);
    }

    public void caseAPcValueFactor(APcValueFactor node)
    {
        defaultCase(node);
    }

    public void caseARemoterefFactor(ARemoterefFactor node)
    {
        defaultCase(node);
    }

    public void caseARunFactor(ARunFactor node)
    {
        defaultCase(node);
    }

    public void caseAChanopFactor(AChanopFactor node)
    {
        defaultCase(node);
    }

    public void caseASimpleUnExpr(ASimpleUnExpr node)
    {
        defaultCase(node);
    }

    public void caseANotUnExpr(ANotUnExpr node)
    {
        defaultCase(node);
    }

    public void caseAComplementUnExpr(AComplementUnExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleMultExpr(ASimpleMultExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundMultExpr(ACompoundMultExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleAddExpr(ASimpleAddExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundplusAddExpr(ACompoundplusAddExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundminusAddExpr(ACompoundminusAddExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleShiftExpr(ASimpleShiftExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundShiftExpr(ACompoundShiftExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleRelExpr(ASimpleRelExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundrelopRelExpr(ACompoundrelopRelExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundgtRelExpr(ACompoundgtRelExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundltRelExpr(ACompoundltRelExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleEqExpr(ASimpleEqExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundEqExpr(ACompoundEqExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleBitandExpr(ASimpleBitandExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundBitandExpr(ACompoundBitandExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleBitxorExpr(ASimpleBitxorExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundBitxorExpr(ACompoundBitxorExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleBitorExpr(ASimpleBitorExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundBitorExpr(ACompoundBitorExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleAndExpr(ASimpleAndExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundAndExpr(ACompoundAndExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleOrExpr(ASimpleOrExpr node)
    {
        defaultCase(node);
    }

    public void caseACompoundOrExpr(ACompoundOrExpr node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpr(ASimpleExpr node)
    {
        defaultCase(node);
    }

    public void caseAConditionalExpr(AConditionalExpr node)
    {
        defaultCase(node);
    }

    public void caseATrueConst(ATrueConst node)
    {
        defaultCase(node);
    }

    public void caseAFalseConst(AFalseConst node)
    {
        defaultCase(node);
    }

    public void caseASkipConst(ASkipConst node)
    {
        defaultCase(node);
    }

    public void caseANumberConst(ANumberConst node)
    {
        defaultCase(node);
    }

    public void caseAPidConst(APidConst node)
    {
        defaultCase(node);
    }

    public void caseAUnderscoreConst(AUnderscoreConst node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTTraditionalComment(TTraditionalComment node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTBang(TBang node)
    {
        defaultCase(node);
    }

    public void caseTComplement(TComplement node)
    {
        defaultCase(node);
    }

    public void caseTMultop(TMultop node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTShiftop(TShiftop node)
    {
        defaultCase(node);
    }

    public void caseTEqop(TEqop node)
    {
        defaultCase(node);
    }

    public void caseTBitand(TBitand node)
    {
        defaultCase(node);
    }

    public void caseTBitor(TBitor node)
    {
        defaultCase(node);
    }

    public void caseTBitxor(TBitxor node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTRelop(TRelop node)
    {
        defaultCase(node);
    }

    public void caseTLParenthese(TLParenthese node)
    {
        defaultCase(node);
    }

    public void caseTRParenthese(TRParenthese node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTSeparator(TSeparator node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTColonColon(TColonColon node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    public void caseTRightarrow(TRightarrow node)
    {
        defaultCase(node);
    }

    public void caseTBangBang(TBangBang node)
    {
        defaultCase(node);
    }

    public void caseTQueryQuery(TQueryQuery node)
    {
        defaultCase(node);
    }

    public void caseTQuery(TQuery node)
    {
        defaultCase(node);
    }

    public void caseTUnderscore(TUnderscore node)
    {
        defaultCase(node);
    }

    public void caseTQuotes(TQuotes node)
    {
        defaultCase(node);
    }

    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    public void caseTActivetok(TActivetok node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTAtomic(TAtomic node)
    {
        defaultCase(node);
    }

    public void caseTBit(TBit node)
    {
        defaultCase(node);
    }

    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    public void caseTByte(TByte node)
    {
        defaultCase(node);
    }

    public void caseTChanop(TChanop node)
    {
        defaultCase(node);
    }

    public void caseTChan(TChan node)
    {
        defaultCase(node);
    }

    public void caseTDStep(TDStep node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEnabled(TEnabled node)
    {
        defaultCase(node);
    }

    public void caseTEval(TEval node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFi(TFi node)
    {
        defaultCase(node);
    }

    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    public void caseTHidden(THidden node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTInittok(TInittok node)
    {
        defaultCase(node);
    }

    public void caseTInlinetok(TInlinetok node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTMtypetok(TMtypetok node)
    {
        defaultCase(node);
    }

    public void caseTNevertok(TNevertok node)
    {
        defaultCase(node);
    }

    public void caseTNotrace(TNotrace node)
    {
        defaultCase(node);
    }

    public void caseTNp(TNp node)
    {
        defaultCase(node);
    }

    public void caseTOd(TOd node)
    {
        defaultCase(node);
    }

    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    public void caseTPcValue(TPcValue node)
    {
        defaultCase(node);
    }

    public void caseTPid(TPid node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTPrioritytok(TPrioritytok node)
    {
        defaultCase(node);
    }

    public void caseTProcessid(TProcessid node)
    {
        defaultCase(node);
    }

    public void caseTProctypetok(TProctypetok node)
    {
        defaultCase(node);
    }

    public void caseTProvided(TProvided node)
    {
        defaultCase(node);
    }

    public void caseTRun(TRun node)
    {
        defaultCase(node);
    }

    public void caseTShort(TShort node)
    {
        defaultCase(node);
    }

    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    public void caseTSkip(TSkip node)
    {
        defaultCase(node);
    }

    public void caseTTimeout(TTimeout node)
    {
        defaultCase(node);
    }

    public void caseTTracetok(TTracetok node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTTypedef(TTypedef node)
    {
        defaultCase(node);
    }

    public void caseTUnless(TUnless node)
    {
        defaultCase(node);
    }

    public void caseTXr(TXr node)
    {
        defaultCase(node);
    }

    public void caseTXs(TXs node)
    {
        defaultCase(node);
    }

    public void caseTTemplatetok(TTemplatetok node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTOver(TOver node)
    {
        defaultCase(node);
    }

    public void caseTName(TName node)
    {
        defaultCase(node);
    }

    public void caseTByteliteral(TByteliteral node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
