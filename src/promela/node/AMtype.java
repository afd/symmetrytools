/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AMtype extends PMtype
{
    private TMtypetok _mtypetok_;
    private TAssign _assign_;
    private TLBrace _lBrace_;
    private PNameLst _nameLst_;
    private TRBrace _rBrace_;

    public AMtype()
    {
        // Constructor
    }

    public AMtype(
        @SuppressWarnings("hiding") TMtypetok _mtypetok_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PNameLst _nameLst_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setMtypetok(_mtypetok_);

        setAssign(_assign_);

        setLBrace(_lBrace_);

        setNameLst(_nameLst_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new AMtype(
            cloneNode(this._mtypetok_),
            cloneNode(this._assign_),
            cloneNode(this._lBrace_),
            cloneNode(this._nameLst_),
            cloneNode(this._rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMtype(this);
    }

    public TMtypetok getMtypetok()
    {
        return this._mtypetok_;
    }

    public void setMtypetok(TMtypetok node)
    {
        if(this._mtypetok_ != null)
        {
            this._mtypetok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mtypetok_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PNameLst getNameLst()
    {
        return this._nameLst_;
    }

    public void setNameLst(PNameLst node)
    {
        if(this._nameLst_ != null)
        {
            this._nameLst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nameLst_ = node;
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mtypetok_)
            + toString(this._assign_)
            + toString(this._lBrace_)
            + toString(this._nameLst_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mtypetok_ == child)
        {
            this._mtypetok_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._nameLst_ == child)
        {
            this._nameLst_ = null;
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mtypetok_ == oldChild)
        {
            setMtypetok((TMtypetok) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._nameLst_ == oldChild)
        {
            setNameLst((PNameLst) newChild);
            return;
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
