/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ATemplateOptions extends POptions
{
    private TColonColon _colonColon_;
    private TFor _for_;
    private TName _variable_;
    private TOver _over_;
    private TName _proctype_;
    private TLBrace _lBrace_;
    private PSequence _sequence_;
    private TRBrace _rBrace_;
    private POptions _options_;

    public ATemplateOptions()
    {
        // Constructor
    }

    public ATemplateOptions(
        @SuppressWarnings("hiding") TColonColon _colonColon_,
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") TName _variable_,
        @SuppressWarnings("hiding") TOver _over_,
        @SuppressWarnings("hiding") TName _proctype_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PSequence _sequence_,
        @SuppressWarnings("hiding") TRBrace _rBrace_,
        @SuppressWarnings("hiding") POptions _options_)
    {
        // Constructor
        setColonColon(_colonColon_);

        setFor(_for_);

        setVariable(_variable_);

        setOver(_over_);

        setProctype(_proctype_);

        setLBrace(_lBrace_);

        setSequence(_sequence_);

        setRBrace(_rBrace_);

        setOptions(_options_);

    }

    @Override
    public Object clone()
    {
        return new ATemplateOptions(
            cloneNode(this._colonColon_),
            cloneNode(this._for_),
            cloneNode(this._variable_),
            cloneNode(this._over_),
            cloneNode(this._proctype_),
            cloneNode(this._lBrace_),
            cloneNode(this._sequence_),
            cloneNode(this._rBrace_),
            cloneNode(this._options_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATemplateOptions(this);
    }

    public TColonColon getColonColon()
    {
        return this._colonColon_;
    }

    public void setColonColon(TColonColon node)
    {
        if(this._colonColon_ != null)
        {
            this._colonColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colonColon_ = node;
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public TName getVariable()
    {
        return this._variable_;
    }

    public void setVariable(TName node)
    {
        if(this._variable_ != null)
        {
            this._variable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variable_ = node;
    }

    public TOver getOver()
    {
        return this._over_;
    }

    public void setOver(TOver node)
    {
        if(this._over_ != null)
        {
            this._over_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._over_ = node;
    }

    public TName getProctype()
    {
        return this._proctype_;
    }

    public void setProctype(TName node)
    {
        if(this._proctype_ != null)
        {
            this._proctype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proctype_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PSequence getSequence()
    {
        return this._sequence_;
    }

    public void setSequence(PSequence node)
    {
        if(this._sequence_ != null)
        {
            this._sequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sequence_ = node;
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    public POptions getOptions()
    {
        return this._options_;
    }

    public void setOptions(POptions node)
    {
        if(this._options_ != null)
        {
            this._options_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._options_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colonColon_)
            + toString(this._for_)
            + toString(this._variable_)
            + toString(this._over_)
            + toString(this._proctype_)
            + toString(this._lBrace_)
            + toString(this._sequence_)
            + toString(this._rBrace_)
            + toString(this._options_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colonColon_ == child)
        {
            this._colonColon_ = null;
            return;
        }

        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._variable_ == child)
        {
            this._variable_ = null;
            return;
        }

        if(this._over_ == child)
        {
            this._over_ = null;
            return;
        }

        if(this._proctype_ == child)
        {
            this._proctype_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._sequence_ == child)
        {
            this._sequence_ = null;
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        if(this._options_ == child)
        {
            this._options_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colonColon_ == oldChild)
        {
            setColonColon((TColonColon) newChild);
            return;
        }

        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._variable_ == oldChild)
        {
            setVariable((TName) newChild);
            return;
        }

        if(this._over_ == oldChild)
        {
            setOver((TOver) newChild);
            return;
        }

        if(this._proctype_ == oldChild)
        {
            setProctype((TName) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._sequence_ == oldChild)
        {
            setSequence((PSequence) newChild);
            return;
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        if(this._options_ == oldChild)
        {
            setOptions((POptions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
