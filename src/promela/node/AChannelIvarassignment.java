/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AChannelIvarassignment extends PIvarassignment
{
    private TAssign _assign_;
    private TLBracket _lBracket_;
    private PConst _const_;
    private TRBracket _rBracket_;
    private TOf _of_;
    private TLBrace _lBrace_;
    private PTypenamelst _typenamelst_;
    private TRBrace _rBrace_;

    public AChannelIvarassignment()
    {
        // Constructor
    }

    public AChannelIvarassignment(
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") TLBracket _lBracket_,
        @SuppressWarnings("hiding") PConst _const_,
        @SuppressWarnings("hiding") TRBracket _rBracket_,
        @SuppressWarnings("hiding") TOf _of_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PTypenamelst _typenamelst_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setAssign(_assign_);

        setLBracket(_lBracket_);

        setConst(_const_);

        setRBracket(_rBracket_);

        setOf(_of_);

        setLBrace(_lBrace_);

        setTypenamelst(_typenamelst_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new AChannelIvarassignment(
            cloneNode(this._assign_),
            cloneNode(this._lBracket_),
            cloneNode(this._const_),
            cloneNode(this._rBracket_),
            cloneNode(this._of_),
            cloneNode(this._lBrace_),
            cloneNode(this._typenamelst_),
            cloneNode(this._rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChannelIvarassignment(this);
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public TLBracket getLBracket()
    {
        return this._lBracket_;
    }

    public void setLBracket(TLBracket node)
    {
        if(this._lBracket_ != null)
        {
            this._lBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBracket_ = node;
    }

    public PConst getConst()
    {
        return this._const_;
    }

    public void setConst(PConst node)
    {
        if(this._const_ != null)
        {
            this._const_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._const_ = node;
    }

    public TRBracket getRBracket()
    {
        return this._rBracket_;
    }

    public void setRBracket(TRBracket node)
    {
        if(this._rBracket_ != null)
        {
            this._rBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBracket_ = node;
    }

    public TOf getOf()
    {
        return this._of_;
    }

    public void setOf(TOf node)
    {
        if(this._of_ != null)
        {
            this._of_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._of_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PTypenamelst getTypenamelst()
    {
        return this._typenamelst_;
    }

    public void setTypenamelst(PTypenamelst node)
    {
        if(this._typenamelst_ != null)
        {
            this._typenamelst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typenamelst_ = node;
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._assign_)
            + toString(this._lBracket_)
            + toString(this._const_)
            + toString(this._rBracket_)
            + toString(this._of_)
            + toString(this._lBrace_)
            + toString(this._typenamelst_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._lBracket_ == child)
        {
            this._lBracket_ = null;
            return;
        }

        if(this._const_ == child)
        {
            this._const_ = null;
            return;
        }

        if(this._rBracket_ == child)
        {
            this._rBracket_ = null;
            return;
        }

        if(this._of_ == child)
        {
            this._of_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._typenamelst_ == child)
        {
            this._typenamelst_ = null;
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._lBracket_ == oldChild)
        {
            setLBracket((TLBracket) newChild);
            return;
        }

        if(this._const_ == oldChild)
        {
            setConst((PConst) newChild);
            return;
        }

        if(this._rBracket_ == oldChild)
        {
            setRBracket((TRBracket) newChild);
            return;
        }

        if(this._of_ == oldChild)
        {
            setOf((TOf) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._typenamelst_ == oldChild)
        {
            setTypenamelst((PTypenamelst) newChild);
            return;
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
