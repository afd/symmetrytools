/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ATemplate extends PTemplate
{
    private TName _name_;
    private TTemplatetok _templatetok_;
    private TColon _colon_;
    private PSequence _sequence_;

    public ATemplate()
    {
        // Constructor
    }

    public ATemplate(
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TTemplatetok _templatetok_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PSequence _sequence_)
    {
        // Constructor
        setName(_name_);

        setTemplatetok(_templatetok_);

        setColon(_colon_);

        setSequence(_sequence_);

    }

    @Override
    public Object clone()
    {
        return new ATemplate(
            cloneNode(this._name_),
            cloneNode(this._templatetok_),
            cloneNode(this._colon_),
            cloneNode(this._sequence_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATemplate(this);
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TTemplatetok getTemplatetok()
    {
        return this._templatetok_;
    }

    public void setTemplatetok(TTemplatetok node)
    {
        if(this._templatetok_ != null)
        {
            this._templatetok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._templatetok_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PSequence getSequence()
    {
        return this._sequence_;
    }

    public void setSequence(PSequence node)
    {
        if(this._sequence_ != null)
        {
            this._sequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sequence_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._templatetok_)
            + toString(this._colon_)
            + toString(this._sequence_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._templatetok_ == child)
        {
            this._templatetok_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._sequence_ == child)
        {
            this._sequence_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._templatetok_ == oldChild)
        {
            setTemplatetok((TTemplatetok) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._sequence_ == oldChild)
        {
            setSequence((PSequence) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
