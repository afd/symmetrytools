/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleOrExpr extends POrExpr
{
    private PAndExpr _andExpr_;

    public ASimpleOrExpr()
    {
        // Constructor
    }

    public ASimpleOrExpr(
        @SuppressWarnings("hiding") PAndExpr _andExpr_)
    {
        // Constructor
        setAndExpr(_andExpr_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleOrExpr(
            cloneNode(this._andExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleOrExpr(this);
    }

    public PAndExpr getAndExpr()
    {
        return this._andExpr_;
    }

    public void setAndExpr(PAndExpr node)
    {
        if(this._andExpr_ != null)
        {
            this._andExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._andExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._andExpr_ == child)
        {
            this._andExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._andExpr_ == oldChild)
        {
            setAndExpr((PAndExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
