/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AManyArgLst extends PArgLst
{
    private PExpr _expr_;
    private TComma _comma_;
    private PArgLst _argLst_;

    public AManyArgLst()
    {
        // Constructor
    }

    public AManyArgLst(
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PArgLst _argLst_)
    {
        // Constructor
        setExpr(_expr_);

        setComma(_comma_);

        setArgLst(_argLst_);

    }

    @Override
    public Object clone()
    {
        return new AManyArgLst(
            cloneNode(this._expr_),
            cloneNode(this._comma_),
            cloneNode(this._argLst_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAManyArgLst(this);
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PArgLst getArgLst()
    {
        return this._argLst_;
    }

    public void setArgLst(PArgLst node)
    {
        if(this._argLst_ != null)
        {
            this._argLst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argLst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr_)
            + toString(this._comma_)
            + toString(this._argLst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._argLst_ == child)
        {
            this._argLst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._argLst_ == oldChild)
        {
            setArgLst((PArgLst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
