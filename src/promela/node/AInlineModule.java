/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AInlineModule extends PModule
{
    private PInline _inline_;

    public AInlineModule()
    {
        // Constructor
    }

    public AInlineModule(
        @SuppressWarnings("hiding") PInline _inline_)
    {
        // Constructor
        setInline(_inline_);

    }

    @Override
    public Object clone()
    {
        return new AInlineModule(
            cloneNode(this._inline_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInlineModule(this);
    }

    public PInline getInline()
    {
        return this._inline_;
    }

    public void setInline(PInline node)
    {
        if(this._inline_ != null)
        {
            this._inline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inline_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._inline_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._inline_ == child)
        {
            this._inline_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._inline_ == oldChild)
        {
            setInline((PInline) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
