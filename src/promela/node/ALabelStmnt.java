/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ALabelStmnt extends PStmnt
{
    private TName _name_;
    private TColon _colon_;
    private PStmnt _stmnt_;

    public ALabelStmnt()
    {
        // Constructor
    }

    public ALabelStmnt(
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PStmnt _stmnt_)
    {
        // Constructor
        setName(_name_);

        setColon(_colon_);

        setStmnt(_stmnt_);

    }

    @Override
    public Object clone()
    {
        return new ALabelStmnt(
            cloneNode(this._name_),
            cloneNode(this._colon_),
            cloneNode(this._stmnt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALabelStmnt(this);
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PStmnt getStmnt()
    {
        return this._stmnt_;
    }

    public void setStmnt(PStmnt node)
    {
        if(this._stmnt_ != null)
        {
            this._stmnt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmnt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._colon_)
            + toString(this._stmnt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._stmnt_ == child)
        {
            this._stmnt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._stmnt_ == oldChild)
        {
            setStmnt((PStmnt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
