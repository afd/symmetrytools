/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ARecordref extends PRecordref
{
    private TDot _dot_;
    private PVarref _varref_;

    public ARecordref()
    {
        // Constructor
    }

    public ARecordref(
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") PVarref _varref_)
    {
        // Constructor
        setDot(_dot_);

        setVarref(_varref_);

    }

    @Override
    public Object clone()
    {
        return new ARecordref(
            cloneNode(this._dot_),
            cloneNode(this._varref_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARecordref(this);
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public PVarref getVarref()
    {
        return this._varref_;
    }

    public void setVarref(PVarref node)
    {
        if(this._varref_ != null)
        {
            this._varref_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varref_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dot_)
            + toString(this._varref_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._varref_ == child)
        {
            this._varref_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._varref_ == oldChild)
        {
            setVarref((PVarref) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
