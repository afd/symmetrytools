/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class APrintwithargsStmnt extends PStmnt
{
    private TPrint _print_;
    private TLParenthese _lParenthese_;
    private TString _string_;
    private TComma _comma_;
    private PArgLst _argLst_;
    private TRParenthese _rParenthese_;

    public APrintwithargsStmnt()
    {
        // Constructor
    }

    public APrintwithargsStmnt(
        @SuppressWarnings("hiding") TPrint _print_,
        @SuppressWarnings("hiding") TLParenthese _lParenthese_,
        @SuppressWarnings("hiding") TString _string_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PArgLst _argLst_,
        @SuppressWarnings("hiding") TRParenthese _rParenthese_)
    {
        // Constructor
        setPrint(_print_);

        setLParenthese(_lParenthese_);

        setString(_string_);

        setComma(_comma_);

        setArgLst(_argLst_);

        setRParenthese(_rParenthese_);

    }

    @Override
    public Object clone()
    {
        return new APrintwithargsStmnt(
            cloneNode(this._print_),
            cloneNode(this._lParenthese_),
            cloneNode(this._string_),
            cloneNode(this._comma_),
            cloneNode(this._argLst_),
            cloneNode(this._rParenthese_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrintwithargsStmnt(this);
    }

    public TPrint getPrint()
    {
        return this._print_;
    }

    public void setPrint(TPrint node)
    {
        if(this._print_ != null)
        {
            this._print_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._print_ = node;
    }

    public TLParenthese getLParenthese()
    {
        return this._lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(this._lParenthese_ != null)
        {
            this._lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParenthese_ = node;
    }

    public TString getString()
    {
        return this._string_;
    }

    public void setString(TString node)
    {
        if(this._string_ != null)
        {
            this._string_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._string_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PArgLst getArgLst()
    {
        return this._argLst_;
    }

    public void setArgLst(PArgLst node)
    {
        if(this._argLst_ != null)
        {
            this._argLst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argLst_ = node;
    }

    public TRParenthese getRParenthese()
    {
        return this._rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(this._rParenthese_ != null)
        {
            this._rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParenthese_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._print_)
            + toString(this._lParenthese_)
            + toString(this._string_)
            + toString(this._comma_)
            + toString(this._argLst_)
            + toString(this._rParenthese_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._print_ == child)
        {
            this._print_ = null;
            return;
        }

        if(this._lParenthese_ == child)
        {
            this._lParenthese_ = null;
            return;
        }

        if(this._string_ == child)
        {
            this._string_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._argLst_ == child)
        {
            this._argLst_ = null;
            return;
        }

        if(this._rParenthese_ == child)
        {
            this._rParenthese_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._print_ == oldChild)
        {
            setPrint((TPrint) newChild);
            return;
        }

        if(this._lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(this._string_ == oldChild)
        {
            setString((TString) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._argLst_ == oldChild)
        {
            setArgLst((PArgLst) newChild);
            return;
        }

        if(this._rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
