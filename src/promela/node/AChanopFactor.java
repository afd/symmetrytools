/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AChanopFactor extends PFactor
{
    private TChanop _chanop_;
    private TLParenthese _lParenthese_;
    private PVarref _varref_;
    private TRParenthese _rParenthese_;

    public AChanopFactor()
    {
        // Constructor
    }

    public AChanopFactor(
        @SuppressWarnings("hiding") TChanop _chanop_,
        @SuppressWarnings("hiding") TLParenthese _lParenthese_,
        @SuppressWarnings("hiding") PVarref _varref_,
        @SuppressWarnings("hiding") TRParenthese _rParenthese_)
    {
        // Constructor
        setChanop(_chanop_);

        setLParenthese(_lParenthese_);

        setVarref(_varref_);

        setRParenthese(_rParenthese_);

    }

    @Override
    public Object clone()
    {
        return new AChanopFactor(
            cloneNode(this._chanop_),
            cloneNode(this._lParenthese_),
            cloneNode(this._varref_),
            cloneNode(this._rParenthese_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChanopFactor(this);
    }

    public TChanop getChanop()
    {
        return this._chanop_;
    }

    public void setChanop(TChanop node)
    {
        if(this._chanop_ != null)
        {
            this._chanop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._chanop_ = node;
    }

    public TLParenthese getLParenthese()
    {
        return this._lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(this._lParenthese_ != null)
        {
            this._lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParenthese_ = node;
    }

    public PVarref getVarref()
    {
        return this._varref_;
    }

    public void setVarref(PVarref node)
    {
        if(this._varref_ != null)
        {
            this._varref_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varref_ = node;
    }

    public TRParenthese getRParenthese()
    {
        return this._rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(this._rParenthese_ != null)
        {
            this._rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParenthese_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._chanop_)
            + toString(this._lParenthese_)
            + toString(this._varref_)
            + toString(this._rParenthese_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._chanop_ == child)
        {
            this._chanop_ = null;
            return;
        }

        if(this._lParenthese_ == child)
        {
            this._lParenthese_ = null;
            return;
        }

        if(this._varref_ == child)
        {
            this._varref_ = null;
            return;
        }

        if(this._rParenthese_ == child)
        {
            this._rParenthese_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._chanop_ == oldChild)
        {
            setChanop((TChanop) newChild);
            return;
        }

        if(this._lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(this._varref_ == oldChild)
        {
            setVarref((PVarref) newChild);
            return;
        }

        if(this._rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
