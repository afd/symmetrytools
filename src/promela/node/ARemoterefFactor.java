/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ARemoterefFactor extends PFactor
{
    private TName _process_;
    private TLBracket _lBracket_;
    private PExpr _expr_;
    private TRBracket _rBracket_;
    private TAt _at_;
    private TName _label_;

    public ARemoterefFactor()
    {
        // Constructor
    }

    public ARemoterefFactor(
        @SuppressWarnings("hiding") TName _process_,
        @SuppressWarnings("hiding") TLBracket _lBracket_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRBracket _rBracket_,
        @SuppressWarnings("hiding") TAt _at_,
        @SuppressWarnings("hiding") TName _label_)
    {
        // Constructor
        setProcess(_process_);

        setLBracket(_lBracket_);

        setExpr(_expr_);

        setRBracket(_rBracket_);

        setAt(_at_);

        setLabel(_label_);

    }

    @Override
    public Object clone()
    {
        return new ARemoterefFactor(
            cloneNode(this._process_),
            cloneNode(this._lBracket_),
            cloneNode(this._expr_),
            cloneNode(this._rBracket_),
            cloneNode(this._at_),
            cloneNode(this._label_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARemoterefFactor(this);
    }

    public TName getProcess()
    {
        return this._process_;
    }

    public void setProcess(TName node)
    {
        if(this._process_ != null)
        {
            this._process_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._process_ = node;
    }

    public TLBracket getLBracket()
    {
        return this._lBracket_;
    }

    public void setLBracket(TLBracket node)
    {
        if(this._lBracket_ != null)
        {
            this._lBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBracket_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRBracket getRBracket()
    {
        return this._rBracket_;
    }

    public void setRBracket(TRBracket node)
    {
        if(this._rBracket_ != null)
        {
            this._rBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBracket_ = node;
    }

    public TAt getAt()
    {
        return this._at_;
    }

    public void setAt(TAt node)
    {
        if(this._at_ != null)
        {
            this._at_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._at_ = node;
    }

    public TName getLabel()
    {
        return this._label_;
    }

    public void setLabel(TName node)
    {
        if(this._label_ != null)
        {
            this._label_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._label_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._process_)
            + toString(this._lBracket_)
            + toString(this._expr_)
            + toString(this._rBracket_)
            + toString(this._at_)
            + toString(this._label_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._process_ == child)
        {
            this._process_ = null;
            return;
        }

        if(this._lBracket_ == child)
        {
            this._lBracket_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rBracket_ == child)
        {
            this._rBracket_ = null;
            return;
        }

        if(this._at_ == child)
        {
            this._at_ = null;
            return;
        }

        if(this._label_ == child)
        {
            this._label_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._process_ == oldChild)
        {
            setProcess((TName) newChild);
            return;
        }

        if(this._lBracket_ == oldChild)
        {
            setLBracket((TLBracket) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rBracket_ == oldChild)
        {
            setRBracket((TRBracket) newChild);
            return;
        }

        if(this._at_ == oldChild)
        {
            setAt((TAt) newChild);
            return;
        }

        if(this._label_ == oldChild)
        {
            setLabel((TName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
