/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AUnlessStep extends PStep
{
    private PStmnt _main_;
    private TUnless _unless_;
    private PStmnt _escape_;

    public AUnlessStep()
    {
        // Constructor
    }

    public AUnlessStep(
        @SuppressWarnings("hiding") PStmnt _main_,
        @SuppressWarnings("hiding") TUnless _unless_,
        @SuppressWarnings("hiding") PStmnt _escape_)
    {
        // Constructor
        setMain(_main_);

        setUnless(_unless_);

        setEscape(_escape_);

    }

    @Override
    public Object clone()
    {
        return new AUnlessStep(
            cloneNode(this._main_),
            cloneNode(this._unless_),
            cloneNode(this._escape_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnlessStep(this);
    }

    public PStmnt getMain()
    {
        return this._main_;
    }

    public void setMain(PStmnt node)
    {
        if(this._main_ != null)
        {
            this._main_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._main_ = node;
    }

    public TUnless getUnless()
    {
        return this._unless_;
    }

    public void setUnless(TUnless node)
    {
        if(this._unless_ != null)
        {
            this._unless_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unless_ = node;
    }

    public PStmnt getEscape()
    {
        return this._escape_;
    }

    public void setEscape(PStmnt node)
    {
        if(this._escape_ != null)
        {
            this._escape_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._escape_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._main_)
            + toString(this._unless_)
            + toString(this._escape_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._main_ == child)
        {
            this._main_ = null;
            return;
        }

        if(this._unless_ == child)
        {
            this._unless_ = null;
            return;
        }

        if(this._escape_ == child)
        {
            this._escape_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._main_ == oldChild)
        {
            setMain((PStmnt) newChild);
            return;
        }

        if(this._unless_ == oldChild)
        {
            setUnless((TUnless) newChild);
            return;
        }

        if(this._escape_ == oldChild)
        {
            setEscape((PStmnt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
