/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ACompoundMultExpr extends PMultExpr
{
    private PUnExpr _unExpr_;
    private TMultop _multop_;
    private PMultExpr _multExpr_;

    public ACompoundMultExpr()
    {
        // Constructor
    }

    public ACompoundMultExpr(
        @SuppressWarnings("hiding") PUnExpr _unExpr_,
        @SuppressWarnings("hiding") TMultop _multop_,
        @SuppressWarnings("hiding") PMultExpr _multExpr_)
    {
        // Constructor
        setUnExpr(_unExpr_);

        setMultop(_multop_);

        setMultExpr(_multExpr_);

    }

    @Override
    public Object clone()
    {
        return new ACompoundMultExpr(
            cloneNode(this._unExpr_),
            cloneNode(this._multop_),
            cloneNode(this._multExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompoundMultExpr(this);
    }

    public PUnExpr getUnExpr()
    {
        return this._unExpr_;
    }

    public void setUnExpr(PUnExpr node)
    {
        if(this._unExpr_ != null)
        {
            this._unExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unExpr_ = node;
    }

    public TMultop getMultop()
    {
        return this._multop_;
    }

    public void setMultop(TMultop node)
    {
        if(this._multop_ != null)
        {
            this._multop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multop_ = node;
    }

    public PMultExpr getMultExpr()
    {
        return this._multExpr_;
    }

    public void setMultExpr(PMultExpr node)
    {
        if(this._multExpr_ != null)
        {
            this._multExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._unExpr_)
            + toString(this._multop_)
            + toString(this._multExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._unExpr_ == child)
        {
            this._unExpr_ = null;
            return;
        }

        if(this._multop_ == child)
        {
            this._multop_ = null;
            return;
        }

        if(this._multExpr_ == child)
        {
            this._multExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._unExpr_ == oldChild)
        {
            setUnExpr((PUnExpr) newChild);
            return;
        }

        if(this._multop_ == oldChild)
        {
            setMultop((TMultop) newChild);
            return;
        }

        if(this._multExpr_ == oldChild)
        {
            setMultExpr((PMultExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
