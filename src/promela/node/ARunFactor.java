/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ARunFactor extends PFactor
{
    private TRun _run_;
    private TName _name_;
    private TLParenthese _lParenthese_;
    private PArgLst _argLst_;
    private TRParenthese _rParenthese_;
    private PPriority _priority_;

    public ARunFactor()
    {
        // Constructor
    }

    public ARunFactor(
        @SuppressWarnings("hiding") TRun _run_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TLParenthese _lParenthese_,
        @SuppressWarnings("hiding") PArgLst _argLst_,
        @SuppressWarnings("hiding") TRParenthese _rParenthese_,
        @SuppressWarnings("hiding") PPriority _priority_)
    {
        // Constructor
        setRun(_run_);

        setName(_name_);

        setLParenthese(_lParenthese_);

        setArgLst(_argLst_);

        setRParenthese(_rParenthese_);

        setPriority(_priority_);

    }

    @Override
    public Object clone()
    {
        return new ARunFactor(
            cloneNode(this._run_),
            cloneNode(this._name_),
            cloneNode(this._lParenthese_),
            cloneNode(this._argLst_),
            cloneNode(this._rParenthese_),
            cloneNode(this._priority_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARunFactor(this);
    }

    public TRun getRun()
    {
        return this._run_;
    }

    public void setRun(TRun node)
    {
        if(this._run_ != null)
        {
            this._run_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._run_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TLParenthese getLParenthese()
    {
        return this._lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(this._lParenthese_ != null)
        {
            this._lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParenthese_ = node;
    }

    public PArgLst getArgLst()
    {
        return this._argLst_;
    }

    public void setArgLst(PArgLst node)
    {
        if(this._argLst_ != null)
        {
            this._argLst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argLst_ = node;
    }

    public TRParenthese getRParenthese()
    {
        return this._rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(this._rParenthese_ != null)
        {
            this._rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParenthese_ = node;
    }

    public PPriority getPriority()
    {
        return this._priority_;
    }

    public void setPriority(PPriority node)
    {
        if(this._priority_ != null)
        {
            this._priority_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._priority_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._run_)
            + toString(this._name_)
            + toString(this._lParenthese_)
            + toString(this._argLst_)
            + toString(this._rParenthese_)
            + toString(this._priority_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._run_ == child)
        {
            this._run_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._lParenthese_ == child)
        {
            this._lParenthese_ = null;
            return;
        }

        if(this._argLst_ == child)
        {
            this._argLst_ = null;
            return;
        }

        if(this._rParenthese_ == child)
        {
            this._rParenthese_ = null;
            return;
        }

        if(this._priority_ == child)
        {
            this._priority_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._run_ == oldChild)
        {
            setRun((TRun) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(this._argLst_ == oldChild)
        {
            setArgLst((PArgLst) newChild);
            return;
        }

        if(this._rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

        if(this._priority_ == oldChild)
        {
            setPriority((PPriority) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
