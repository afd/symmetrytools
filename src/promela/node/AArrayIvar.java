/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AArrayIvar extends PIvar
{
    private TName _name_;
    private TLBracket _lBracket_;
    private PConst _const_;
    private TRBracket _rBracket_;
    private PIvarassignment _ivarassignment_;

    public AArrayIvar()
    {
        // Constructor
    }

    public AArrayIvar(
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TLBracket _lBracket_,
        @SuppressWarnings("hiding") PConst _const_,
        @SuppressWarnings("hiding") TRBracket _rBracket_,
        @SuppressWarnings("hiding") PIvarassignment _ivarassignment_)
    {
        // Constructor
        setName(_name_);

        setLBracket(_lBracket_);

        setConst(_const_);

        setRBracket(_rBracket_);

        setIvarassignment(_ivarassignment_);

    }

    @Override
    public Object clone()
    {
        return new AArrayIvar(
            cloneNode(this._name_),
            cloneNode(this._lBracket_),
            cloneNode(this._const_),
            cloneNode(this._rBracket_),
            cloneNode(this._ivarassignment_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayIvar(this);
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TLBracket getLBracket()
    {
        return this._lBracket_;
    }

    public void setLBracket(TLBracket node)
    {
        if(this._lBracket_ != null)
        {
            this._lBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBracket_ = node;
    }

    public PConst getConst()
    {
        return this._const_;
    }

    public void setConst(PConst node)
    {
        if(this._const_ != null)
        {
            this._const_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._const_ = node;
    }

    public TRBracket getRBracket()
    {
        return this._rBracket_;
    }

    public void setRBracket(TRBracket node)
    {
        if(this._rBracket_ != null)
        {
            this._rBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBracket_ = node;
    }

    public PIvarassignment getIvarassignment()
    {
        return this._ivarassignment_;
    }

    public void setIvarassignment(PIvarassignment node)
    {
        if(this._ivarassignment_ != null)
        {
            this._ivarassignment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ivarassignment_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._lBracket_)
            + toString(this._const_)
            + toString(this._rBracket_)
            + toString(this._ivarassignment_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._lBracket_ == child)
        {
            this._lBracket_ = null;
            return;
        }

        if(this._const_ == child)
        {
            this._const_ = null;
            return;
        }

        if(this._rBracket_ == child)
        {
            this._rBracket_ = null;
            return;
        }

        if(this._ivarassignment_ == child)
        {
            this._ivarassignment_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._lBracket_ == oldChild)
        {
            setLBracket((TLBracket) newChild);
            return;
        }

        if(this._const_ == oldChild)
        {
            setConst((PConst) newChild);
            return;
        }

        if(this._rBracket_ == oldChild)
        {
            setRBracket((TRBracket) newChild);
            return;
        }

        if(this._ivarassignment_ == oldChild)
        {
            setIvarassignment((PIvarassignment) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
