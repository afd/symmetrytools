/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class AExreceiveStep extends PStep
{
    private TXr _xr_;
    private PVarreflst _varreflst_;

    public AExreceiveStep()
    {
        // Constructor
    }

    public AExreceiveStep(
        @SuppressWarnings("hiding") TXr _xr_,
        @SuppressWarnings("hiding") PVarreflst _varreflst_)
    {
        // Constructor
        setXr(_xr_);

        setVarreflst(_varreflst_);

    }

    @Override
    public Object clone()
    {
        return new AExreceiveStep(
            cloneNode(this._xr_),
            cloneNode(this._varreflst_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExreceiveStep(this);
    }

    public TXr getXr()
    {
        return this._xr_;
    }

    public void setXr(TXr node)
    {
        if(this._xr_ != null)
        {
            this._xr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._xr_ = node;
    }

    public PVarreflst getVarreflst()
    {
        return this._varreflst_;
    }

    public void setVarreflst(PVarreflst node)
    {
        if(this._varreflst_ != null)
        {
            this._varreflst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varreflst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._xr_)
            + toString(this._varreflst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._xr_ == child)
        {
            this._xr_ = null;
            return;
        }

        if(this._varreflst_ == child)
        {
            this._varreflst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._xr_ == oldChild)
        {
            setXr((TXr) newChild);
            return;
        }

        if(this._varreflst_ == oldChild)
        {
            setVarreflst((PVarreflst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
