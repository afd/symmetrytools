/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ACompoundAndExpr extends PAndExpr
{
    private PBitorExpr _bitorExpr_;
    private TAnd _and_;
    private PAndExpr _andExpr_;

    public ACompoundAndExpr()
    {
        // Constructor
    }

    public ACompoundAndExpr(
        @SuppressWarnings("hiding") PBitorExpr _bitorExpr_,
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PAndExpr _andExpr_)
    {
        // Constructor
        setBitorExpr(_bitorExpr_);

        setAnd(_and_);

        setAndExpr(_andExpr_);

    }

    @Override
    public Object clone()
    {
        return new ACompoundAndExpr(
            cloneNode(this._bitorExpr_),
            cloneNode(this._and_),
            cloneNode(this._andExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompoundAndExpr(this);
    }

    public PBitorExpr getBitorExpr()
    {
        return this._bitorExpr_;
    }

    public void setBitorExpr(PBitorExpr node)
    {
        if(this._bitorExpr_ != null)
        {
            this._bitorExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bitorExpr_ = node;
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PAndExpr getAndExpr()
    {
        return this._andExpr_;
    }

    public void setAndExpr(PAndExpr node)
    {
        if(this._andExpr_ != null)
        {
            this._andExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bitorExpr_)
            + toString(this._and_)
            + toString(this._andExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bitorExpr_ == child)
        {
            this._bitorExpr_ = null;
            return;
        }

        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._andExpr_ == child)
        {
            this._andExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bitorExpr_ == oldChild)
        {
            setBitorExpr((PBitorExpr) newChild);
            return;
        }

        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._andExpr_ == oldChild)
        {
            setAndExpr((PAndExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
