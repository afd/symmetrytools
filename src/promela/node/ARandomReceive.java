/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ARandomReceive extends PReceive
{
    private PVarref _varref_;
    private TQueryQuery _queryQuery_;
    private PRecvArgs _recvArgs_;

    public ARandomReceive()
    {
        // Constructor
    }

    public ARandomReceive(
        @SuppressWarnings("hiding") PVarref _varref_,
        @SuppressWarnings("hiding") TQueryQuery _queryQuery_,
        @SuppressWarnings("hiding") PRecvArgs _recvArgs_)
    {
        // Constructor
        setVarref(_varref_);

        setQueryQuery(_queryQuery_);

        setRecvArgs(_recvArgs_);

    }

    @Override
    public Object clone()
    {
        return new ARandomReceive(
            cloneNode(this._varref_),
            cloneNode(this._queryQuery_),
            cloneNode(this._recvArgs_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARandomReceive(this);
    }

    public PVarref getVarref()
    {
        return this._varref_;
    }

    public void setVarref(PVarref node)
    {
        if(this._varref_ != null)
        {
            this._varref_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varref_ = node;
    }

    public TQueryQuery getQueryQuery()
    {
        return this._queryQuery_;
    }

    public void setQueryQuery(TQueryQuery node)
    {
        if(this._queryQuery_ != null)
        {
            this._queryQuery_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._queryQuery_ = node;
    }

    public PRecvArgs getRecvArgs()
    {
        return this._recvArgs_;
    }

    public void setRecvArgs(PRecvArgs node)
    {
        if(this._recvArgs_ != null)
        {
            this._recvArgs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._recvArgs_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varref_)
            + toString(this._queryQuery_)
            + toString(this._recvArgs_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varref_ == child)
        {
            this._varref_ = null;
            return;
        }

        if(this._queryQuery_ == child)
        {
            this._queryQuery_ = null;
            return;
        }

        if(this._recvArgs_ == child)
        {
            this._recvArgs_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varref_ == oldChild)
        {
            setVarref((PVarref) newChild);
            return;
        }

        if(this._queryQuery_ == oldChild)
        {
            setQueryQuery((TQueryQuery) newChild);
            return;
        }

        if(this._recvArgs_ == oldChild)
        {
            setRecvArgs((PRecvArgs) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
