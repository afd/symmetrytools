/* This file was generated by SableCC (http://www.sablecc.org/). */

package promela.node;

import java.util.*;
import promela.analysis.*;
import promela.types.NumericType;

public final class ARunFactor extends PFactor
{
    private TRun _run_;
    private TName _name_;
    private TLParenthese _lParenthese_;
    private PArgLst _argLst_;
    private TRParenthese _rParenthese_;
    private PPriority _priority_;
	private int pid = 0;

    public ARunFactor()
    {
    }

    public ARunFactor(
        TRun _run_,
        TName _name_,
        TLParenthese _lParenthese_,
        PArgLst _argLst_,
        TRParenthese _rParenthese_,
        PPriority _priority_)
    {
        setRun(_run_);

        setName(_name_);

        setLParenthese(_lParenthese_);

        setArgLst(_argLst_);

        setRParenthese(_rParenthese_);

        setPriority(_priority_);

    }
    public Object clone()
    {
        ARunFactor result = new ARunFactor(
            (TRun) cloneNode(_run_),
            (TName) cloneNode(_name_),
            (TLParenthese) cloneNode(_lParenthese_),
            (PArgLst) cloneNode(_argLst_),
            (TRParenthese) cloneNode(_rParenthese_),
            (PPriority) cloneNode(_priority_));
        result.setPid(getPid());
        return result;
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARunFactor(this);
    }

    public TRun getRun()
    {
        return _run_;
    }

    public void setRun(TRun node)
    {
        if(_run_ != null)
        {
            _run_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _run_ = node;
    }

    public TName getName()
    {
        return _name_;
    }

    public void setName(TName node)
    {
        if(_name_ != null)
        {
            _name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _name_ = node;
    }

    public TLParenthese getLParenthese()
    {
        return _lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(_lParenthese_ != null)
        {
            _lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lParenthese_ = node;
    }

    public PArgLst getArgLst()
    {
        return _argLst_;
    }

    public void setArgLst(PArgLst node)
    {
        if(_argLst_ != null)
        {
            _argLst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _argLst_ = node;
    }

    public TRParenthese getRParenthese()
    {
        return _rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(_rParenthese_ != null)
        {
            _rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rParenthese_ = node;
    }

    public PPriority getPriority()
    {
        return _priority_;
    }

    public void setPriority(PPriority node)
    {
        if(_priority_ != null)
        {
            _priority_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priority_ = node;
    }

    public String toString()
    {

    	String result = "";

    	if(NumericType.isPidSensitive()) {
    		result = result + pid + ":";
    	}
    		
        return result 
            + toString(_run_)
            + toString(_name_)
            + toString(_lParenthese_)
            + toString(_argLst_)
            + toString(_rParenthese_)
            + toString(_priority_);
    }

    void removeChild(Node child)
    {
        if(_run_ == child)
        {
            _run_ = null;
            return;
        }

        if(_name_ == child)
        {
            _name_ = null;
            return;
        }

        if(_lParenthese_ == child)
        {
            _lParenthese_ = null;
            return;
        }

        if(_argLst_ == child)
        {
            _argLst_ = null;
            return;
        }

        if(_rParenthese_ == child)
        {
            _rParenthese_ = null;
            return;
        }

        if(_priority_ == child)
        {
            _priority_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_run_ == oldChild)
        {
            setRun((TRun) newChild);
            return;
        }

        if(_name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(_lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(_argLst_ == oldChild)
        {
            setArgLst((PArgLst) newChild);
            return;
        }

        if(_rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

        if(_priority_ == oldChild)
        {
            setPriority((PPriority) newChild);
            return;
        }

    }

	public void setPid(int pid) {
		this.pid = pid;
	}
	
	public int getPid() {
		return pid;
	}
	
}
