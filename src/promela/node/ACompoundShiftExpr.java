/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.promela.node;

import src.promela.analysis.*;

@SuppressWarnings("nls")
public final class ACompoundShiftExpr extends PShiftExpr
{
    private PAddExpr _addExpr_;
    private TShiftop _shiftop_;
    private PShiftExpr _shiftExpr_;

    public ACompoundShiftExpr()
    {
        // Constructor
    }

    public ACompoundShiftExpr(
        @SuppressWarnings("hiding") PAddExpr _addExpr_,
        @SuppressWarnings("hiding") TShiftop _shiftop_,
        @SuppressWarnings("hiding") PShiftExpr _shiftExpr_)
    {
        // Constructor
        setAddExpr(_addExpr_);

        setShiftop(_shiftop_);

        setShiftExpr(_shiftExpr_);

    }

    @Override
    public Object clone()
    {
        return new ACompoundShiftExpr(
            cloneNode(this._addExpr_),
            cloneNode(this._shiftop_),
            cloneNode(this._shiftExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompoundShiftExpr(this);
    }

    public PAddExpr getAddExpr()
    {
        return this._addExpr_;
    }

    public void setAddExpr(PAddExpr node)
    {
        if(this._addExpr_ != null)
        {
            this._addExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addExpr_ = node;
    }

    public TShiftop getShiftop()
    {
        return this._shiftop_;
    }

    public void setShiftop(TShiftop node)
    {
        if(this._shiftop_ != null)
        {
            this._shiftop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftop_ = node;
    }

    public PShiftExpr getShiftExpr()
    {
        return this._shiftExpr_;
    }

    public void setShiftExpr(PShiftExpr node)
    {
        if(this._shiftExpr_ != null)
        {
            this._shiftExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shiftExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._addExpr_)
            + toString(this._shiftop_)
            + toString(this._shiftExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._addExpr_ == child)
        {
            this._addExpr_ = null;
            return;
        }

        if(this._shiftop_ == child)
        {
            this._shiftop_ = null;
            return;
        }

        if(this._shiftExpr_ == child)
        {
            this._shiftExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._addExpr_ == oldChild)
        {
            setAddExpr((PAddExpr) newChild);
            return;
        }

        if(this._shiftop_ == oldChild)
        {
            setShiftop((TShiftop) newChild);
            return;
        }

        if(this._shiftExpr_ == oldChild)
        {
            setShiftExpr((PShiftExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
