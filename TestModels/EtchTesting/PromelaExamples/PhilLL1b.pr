/* The 'never' automaton in this example accepts, showing that
   pid_of_interest can also make progress */

mtype = {are_you_free, yes, no, release}
byte progress;
byte pid_of_interest;

proctype phil(chan lf, rf)
{ 
  do
    :: do 
         :: lf!are_you_free ->
            if 
              :: lf?yes -> break
              :: lf?no;
            fi
       od;
       do
         :: rf!are_you_free ->
            if
              :: rf?yes;
                 if
                 :: _pid == pid_of_interest -> progress = 1; progress = 0
                 fi; 
                 lf!release -> 
                 rf!release;
                 break;
              :: rf?no -> lf!release;
                 break;
            fi
       od;
  od
}

proctype fork(chan lp, rp)
{
  do

   :: rp?are_you_free -> rp!yes ->

        do
        :: lp?are_you_free ->
           lp!no
        :: rp?release -> break
        od

   :: lp?are_you_free -> lp!yes ->

      do
        :: rp?are_you_free ->
           rp!no
        :: lp?release -> break
      od;
  od
}

init {

   chan c0 = [0] of { mtype };
   chan c1 = [0] of { mtype };
   chan c2 = [0] of { mtype };
   chan c3 = [0] of { mtype };
   chan c4 = [0] of { mtype };
   chan c5 = [0] of { mtype };

   atomic {
     pid_of_interest = run phil(c5, c0);
     run fork(c0, c1);
     run phil(c1, c2);
     run fork(c2, c3);
     run phil(c3, c4);
     run fork(c4, c5);
   };
}

never { /* Negation of <>[] !progress */
lab:
 do
 :: (!progress) 
 :: (progress) -> goto accept;
 od;
 accept: if
         :: progress -> goto accept
         :: (!progress) -> goto lab
         fi
}
